
USB_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002df4  08002df4  00012df4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  20000000  08002e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001124  200001c4  0800302c  000201c4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200012e8  0800302c  000212e8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011ea9  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000306d  00000000  00000000  00032095  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000564c  00000000  00000000  00035102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000960  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000df0  00000000  00000000  0003b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000055bb  00000000  00000000  0003bea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000314d  00000000  00000000  0004145b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000445a8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001708  00000000  00000000  00044624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c4 	.word	0x200001c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ddc 	.word	0x08002ddc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c8 	.word	0x200001c8
 8000104:	08002ddc 	.word	0x08002ddc

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uhi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5a09      	ldrh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000248:	21fa      	movs	r1, #250	; 0xfa
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <HAL_InitTick+0x2c>)
{
 800024c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800024e:	0089      	lsls	r1, r1, #2
{
 8000250:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000252:	6818      	ldr	r0, [r3, #0]
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 f86a 	bl	8000330 <HAL_SYSTICK_Config>
 800025c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800025e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000260:	2c00      	cmp	r4, #0
 8000262:	d105      	bne.n	8000270 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000264:	3802      	subs	r0, #2
 8000266:	0022      	movs	r2, r4
 8000268:	0029      	movs	r1, r5
 800026a:	f000 f827 	bl	80002bc <HAL_NVIC_SetPriority>
 800026e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000270:	bd70      	pop	{r4, r5, r6, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000110 	.word	0x20000110

08000278 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000278:	2340      	movs	r3, #64	; 0x40
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <HAL_Init+0x24>)
{
 800027c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800027e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000280:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000282:	430b      	orrs	r3, r1
 8000284:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000286:	f7ff ffdf 	bl	8000248 <HAL_InitTick>
 800028a:	1e04      	subs	r4, r0, #0
 800028c:	d103      	bne.n	8000296 <HAL_Init+0x1e>
    HAL_MspInit();
 800028e:	f002 faf3 	bl	8002878 <HAL_MspInit>
}
 8000292:	0020      	movs	r0, r4
 8000294:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000296:	2401      	movs	r4, #1
 8000298:	e7fb      	b.n	8000292 <HAL_Init+0x1a>
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40022000 	.word	0x40022000

080002a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002a0:	4a02      	ldr	r2, [pc, #8]	; (80002ac <HAL_IncTick+0xc>)
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	4770      	bx	lr
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	20000404 	.word	0x20000404

080002b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002b0:	4b01      	ldr	r3, [pc, #4]	; (80002b8 <HAL_GetTick+0x8>)
 80002b2:	6818      	ldr	r0, [r3, #0]
}
 80002b4:	4770      	bx	lr
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000404 	.word	0x20000404

080002bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002c0:	2800      	cmp	r0, #0
 80002c2:	da14      	bge.n	80002ee <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c4:	230f      	movs	r3, #15
 80002c6:	b2c0      	uxtb	r0, r0
 80002c8:	4003      	ands	r3, r0
 80002ca:	3b08      	subs	r3, #8
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <HAL_NVIC_SetPriority+0x58>)
 80002ce:	089b      	lsrs	r3, r3, #2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	189b      	adds	r3, r3, r2
 80002d4:	2203      	movs	r2, #3
 80002d6:	4010      	ands	r0, r2
 80002d8:	4090      	lsls	r0, r2
 80002da:	32fc      	adds	r2, #252	; 0xfc
 80002dc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002de:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002e2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	69dc      	ldr	r4, [r3, #28]
 80002e6:	43ac      	bics	r4, r5
 80002e8:	4321      	orrs	r1, r4
 80002ea:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002ec:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ee:	2503      	movs	r5, #3
 80002f0:	0883      	lsrs	r3, r0, #2
 80002f2:	4028      	ands	r0, r5
 80002f4:	40a8      	lsls	r0, r5
 80002f6:	35fc      	adds	r5, #252	; 0xfc
 80002f8:	002e      	movs	r6, r5
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <HAL_NVIC_SetPriority+0x5c>)
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	189b      	adds	r3, r3, r2
 8000300:	22c0      	movs	r2, #192	; 0xc0
 8000302:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000304:	4029      	ands	r1, r5
 8000306:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	589c      	ldr	r4, [r3, r2]
 800030c:	43b4      	bics	r4, r6
 800030e:	4321      	orrs	r1, r4
 8000310:	5099      	str	r1, [r3, r2]
 8000312:	e7eb      	b.n	80002ec <HAL_NVIC_SetPriority+0x30>
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	e000e100 	.word	0xe000e100

0800031c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800031c:	231f      	movs	r3, #31
 800031e:	4018      	ands	r0, r3
 8000320:	3b1e      	subs	r3, #30
 8000322:	4083      	lsls	r3, r0
 8000324:	4a01      	ldr	r2, [pc, #4]	; (800032c <HAL_NVIC_EnableIRQ+0x10>)
 8000326:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000328:	4770      	bx	lr
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	e000e100 	.word	0xe000e100

08000330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <HAL_SYSTICK_Config+0x28>)
 8000332:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000334:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000336:	4293      	cmp	r3, r2
 8000338:	d80d      	bhi.n	8000356 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033c:	4a07      	ldr	r2, [pc, #28]	; (800035c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033e:	4808      	ldr	r0, [pc, #32]	; (8000360 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000340:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000342:	6a03      	ldr	r3, [r0, #32]
 8000344:	0609      	lsls	r1, r1, #24
 8000346:	021b      	lsls	r3, r3, #8
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	430b      	orrs	r3, r1
 800034c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000350:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000352:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000354:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000356:	4770      	bx	lr
 8000358:	00ffffff 	.word	0x00ffffff
 800035c:	e000e010 	.word	0xe000e010
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000364:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000366:	4a53      	ldr	r2, [pc, #332]	; (80004b4 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000368:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800036a:	1882      	adds	r2, r0, r2
 800036c:	1e54      	subs	r4, r2, #1
 800036e:	41a2      	sbcs	r2, r4
{
 8000370:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000372:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000374:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000376:	3205      	adds	r2, #5
 8000378:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800037a:	9a01      	ldr	r2, [sp, #4]
 800037c:	40da      	lsrs	r2, r3
 800037e:	d101      	bne.n	8000384 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000380:	b005      	add	sp, #20
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000384:	2501      	movs	r5, #1
 8000386:	409d      	lsls	r5, r3
 8000388:	9a01      	ldr	r2, [sp, #4]
 800038a:	402a      	ands	r2, r5
 800038c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800038e:	d100      	bne.n	8000392 <HAL_GPIO_Init+0x2e>
 8000390:	e08d      	b.n	80004ae <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000392:	684a      	ldr	r2, [r1, #4]
 8000394:	4694      	mov	ip, r2
 8000396:	2210      	movs	r2, #16
 8000398:	4664      	mov	r4, ip
 800039a:	4394      	bics	r4, r2
 800039c:	0022      	movs	r2, r4
 800039e:	3c01      	subs	r4, #1
 80003a0:	2a02      	cmp	r2, #2
 80003a2:	d11f      	bne.n	80003e4 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003a4:	2407      	movs	r4, #7
 80003a6:	270f      	movs	r7, #15
 80003a8:	401c      	ands	r4, r3
 80003aa:	00a4      	lsls	r4, r4, #2
 80003ac:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80003ae:	08da      	lsrs	r2, r3, #3
 80003b0:	0092      	lsls	r2, r2, #2
 80003b2:	1882      	adds	r2, r0, r2
 80003b4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003b6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80003b8:	690f      	ldr	r7, [r1, #16]
 80003ba:	40a7      	lsls	r7, r4
 80003bc:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80003be:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003c0:	2403      	movs	r4, #3
 80003c2:	005e      	lsls	r6, r3, #1
 80003c4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80003c6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003c8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ca:	68cc      	ldr	r4, [r1, #12]
 80003cc:	40b4      	lsls	r4, r6
 80003ce:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80003d0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	4662      	mov	r2, ip
 80003d4:	06d2      	lsls	r2, r2, #27
 80003d6:	0fd2      	lsrs	r2, r2, #31
 80003d8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80003da:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003dc:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003de:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80003e0:	6042      	str	r2, [r0, #4]
 80003e2:	e001      	b.n	80003e8 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e4:	2c01      	cmp	r4, #1
 80003e6:	d9eb      	bls.n	80003c0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003e8:	2603      	movs	r6, #3
 80003ea:	0034      	movs	r4, r6
 80003ec:	005d      	lsls	r5, r3, #1
 80003ee:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f0:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003f2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003f4:	4032      	ands	r2, r6
 80003f6:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003f8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003fa:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003fc:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003fe:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000400:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000402:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000404:	688a      	ldr	r2, [r1, #8]
 8000406:	40aa      	lsls	r2, r5
 8000408:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800040c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040e:	00d2      	lsls	r2, r2, #3
 8000410:	d54d      	bpl.n	80004ae <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	2501      	movs	r5, #1
 8000414:	4c28      	ldr	r4, [pc, #160]	; (80004b8 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000416:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000418:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800041a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800041c:	001d      	movs	r5, r3
 800041e:	4035      	ands	r5, r6
 8000420:	00ad      	lsls	r5, r5, #2
 8000422:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	6362      	str	r2, [r4, #52]	; 0x34
 8000426:	4a25      	ldr	r2, [pc, #148]	; (80004bc <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000428:	089c      	lsrs	r4, r3, #2
 800042a:	00a4      	lsls	r4, r4, #2
 800042c:	18a4      	adds	r4, r4, r2
 800042e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000430:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000432:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000434:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000436:	05ff      	lsls	r7, r7, #23
 8000438:	2200      	movs	r2, #0
 800043a:	42b8      	cmp	r0, r7
 800043c:	d00c      	beq.n	8000458 <HAL_GPIO_Init+0xf4>
 800043e:	4f20      	ldr	r7, [pc, #128]	; (80004c0 <HAL_GPIO_Init+0x15c>)
 8000440:	3201      	adds	r2, #1
 8000442:	42b8      	cmp	r0, r7
 8000444:	d008      	beq.n	8000458 <HAL_GPIO_Init+0xf4>
 8000446:	4f1f      	ldr	r7, [pc, #124]	; (80004c4 <HAL_GPIO_Init+0x160>)
 8000448:	3201      	adds	r2, #1
 800044a:	42b8      	cmp	r0, r7
 800044c:	d004      	beq.n	8000458 <HAL_GPIO_Init+0xf4>
 800044e:	4f1e      	ldr	r7, [pc, #120]	; (80004c8 <HAL_GPIO_Init+0x164>)
 8000450:	0032      	movs	r2, r6
 8000452:	42b8      	cmp	r0, r7
 8000454:	d000      	beq.n	8000458 <HAL_GPIO_Init+0xf4>
 8000456:	9a03      	ldr	r2, [sp, #12]
 8000458:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800045c:	9d02      	ldr	r5, [sp, #8]
 800045e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000460:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000462:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000464:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000466:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000468:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800046a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800046c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046e:	03ff      	lsls	r7, r7, #15
 8000470:	d401      	bmi.n	8000476 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000472:	0035      	movs	r5, r6
 8000474:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000476:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000478:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800047a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800047c:	9d00      	ldr	r5, [sp, #0]
 800047e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000480:	03bf      	lsls	r7, r7, #14
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000484:	0035      	movs	r5, r6
 8000486:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000488:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800048a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800048c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800048e:	9d00      	ldr	r5, [sp, #0]
 8000490:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000492:	02ff      	lsls	r7, r7, #11
 8000494:	d401      	bmi.n	800049a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8000496:	0035      	movs	r5, r6
 8000498:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800049a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800049c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800049e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80004a0:	9e00      	ldr	r6, [sp, #0]
 80004a2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a4:	02bf      	lsls	r7, r7, #10
 80004a6:	d401      	bmi.n	80004ac <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 80004a8:	4025      	ands	r5, r4
 80004aa:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004ac:	60d6      	str	r6, [r2, #12]
    position++;
 80004ae:	3301      	adds	r3, #1
 80004b0:	e763      	b.n	800037a <HAL_GPIO_Init+0x16>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	afffe400 	.word	0xafffe400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000
 80004c0:	50000400 	.word	0x50000400
 80004c4:	50000800 	.word	0x50000800
 80004c8:	50000c00 	.word	0x50000c00
 80004cc:	40010400 	.word	0x40010400

080004d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	d001      	beq.n	80004d8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80004d4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80004d6:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80004d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004da:	e7fc      	b.n	80004d6 <HAL_GPIO_WritePin+0x6>

080004dc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004dc:	6943      	ldr	r3, [r0, #20]
 80004de:	4059      	eors	r1, r3
 80004e0:	6141      	str	r1, [r0, #20]
}
 80004e2:	4770      	bx	lr

080004e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	b087      	sub	sp, #28
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 80004ea:	2601      	movs	r6, #1
  if (hpcd == NULL)
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d02b      	beq.n	8000548 <HAL_PCD_Init+0x64>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80004f0:	4d31      	ldr	r5, [pc, #196]	; (80005b8 <HAL_PCD_Init+0xd4>)
 80004f2:	5d43      	ldrb	r3, [r0, r5]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d104      	bne.n	8000504 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004fa:	228a      	movs	r2, #138	; 0x8a
 80004fc:	0092      	lsls	r2, r2, #2
 80004fe:	5483      	strb	r3, [r0, r2]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000500:	f002 fa70 	bl	80029e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000504:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000506:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000508:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_DISABLE(hpcd);
 800050a:	f001 f84d 	bl	80015a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800050e:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000510:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000512:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000514:	6861      	ldr	r1, [r4, #4]
 8000516:	428b      	cmp	r3, r1
 8000518:	d319      	bcc.n	800054e <HAL_PCD_Init+0x6a>
 800051a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800051c:	0018      	movs	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800051e:	4299      	cmp	r1, r3
 8000520:	d826      	bhi.n	8000570 <HAL_PCD_Init+0x8c>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000522:	0023      	movs	r3, r4
 8000524:	466a      	mov	r2, sp
 8000526:	3310      	adds	r3, #16
 8000528:	cb43      	ldmia	r3!, {r0, r1, r6}
 800052a:	c243      	stmia	r2!, {r0, r1, r6}
 800052c:	cb03      	ldmia	r3!, {r0, r1}
 800052e:	c203      	stmia	r2!, {r0, r1}
 8000530:	68e3      	ldr	r3, [r4, #12]
 8000532:	6861      	ldr	r1, [r4, #4]
 8000534:	68a2      	ldr	r2, [r4, #8]
 8000536:	6820      	ldr	r0, [r4, #0]
 8000538:	f001 f840 	bl	80015bc <USB_DevInit>
 800053c:	2301      	movs	r3, #1
 800053e:	1e06      	subs	r6, r0, #0
 8000540:	d029      	beq.n	8000596 <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000542:	2202      	movs	r2, #2
    return HAL_ERROR;
 8000544:	001e      	movs	r6, r3
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000546:	5562      	strb	r2, [r4, r5]
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
  }

  return HAL_OK;
}
 8000548:	0030      	movs	r0, r6
 800054a:	b007      	add	sp, #28
 800054c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 800054e:	015a      	lsls	r2, r3, #5
 8000550:	18a2      	adds	r2, r4, r2
 8000552:	0017      	movs	r7, r2
 8000554:	3729      	adds	r7, #41	; 0x29
 8000556:	703e      	strb	r6, [r7, #0]
    hpcd->IN_ep[i].num = i;
 8000558:	3f01      	subs	r7, #1
 800055a:	703b      	strb	r3, [r7, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800055c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800055e:	70f8      	strb	r0, [r7, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000560:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000562:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000564:	1c9a      	adds	r2, r3, #2
 8000566:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000568:	3301      	adds	r3, #1
    hpcd->IN_ep[i].xfer_len = 0U;
 800056a:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800056c:	b2db      	uxtb	r3, r3
 800056e:	e7d2      	b.n	8000516 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000570:	015a      	lsls	r2, r3, #5
 8000572:	18a2      	adds	r2, r4, r2
 8000574:	0016      	movs	r6, r2
 8000576:	362a      	adds	r6, #42	; 0x2a
 8000578:	36ff      	adds	r6, #255	; 0xff
 800057a:	7030      	strb	r0, [r6, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800057c:	32fc      	adds	r2, #252	; 0xfc
    hpcd->OUT_ep[i].num = i;
 800057e:	3e01      	subs	r6, #1
 8000580:	7033      	strb	r3, [r6, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000582:	70f0      	strb	r0, [r6, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000584:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000586:	6410      	str	r0, [r2, #64]	; 0x40
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000588:	001a      	movs	r2, r3
 800058a:	320a      	adds	r2, #10
 800058c:	0152      	lsls	r2, r2, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800058e:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000590:	5110      	str	r0, [r2, r4]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000592:	b2db      	uxtb	r3, r3
 8000594:	e7c3      	b.n	800051e <HAL_PCD_Init+0x3a>
  hpcd->USB_Address = 0U;
 8000596:	1d62      	adds	r2, r4, #5
 8000598:	77d0      	strb	r0, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 800059a:	5563      	strb	r3, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
 800059c:	69e3      	ldr	r3, [r4, #28]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d102      	bne.n	80005a8 <HAL_PCD_Init+0xc4>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80005a2:	0020      	movs	r0, r4
 80005a4:	f000 fb8b 	bl	8000cbe <HAL_PCDEx_ActivateLPM>
  if (hpcd->Init.battery_charging_enable == 1U)
 80005a8:	6a23      	ldr	r3, [r4, #32]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1cc      	bne.n	8000548 <HAL_PCD_Init+0x64>
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80005ae:	0020      	movs	r0, r4
 80005b0:	f000 fb76 	bl	8000ca0 <HAL_PCDEx_ActivateBCD>
 80005b4:	e7c8      	b.n	8000548 <HAL_PCD_Init+0x64>
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	00000229 	.word	0x00000229

080005bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80005bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80005be:	258a      	movs	r5, #138	; 0x8a
 80005c0:	00ad      	lsls	r5, r5, #2
 80005c2:	5d43      	ldrb	r3, [r0, r5]
{
 80005c4:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80005c6:	2002      	movs	r0, #2
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d009      	beq.n	80005e0 <HAL_PCD_Start+0x24>
 80005cc:	2301      	movs	r3, #1
  (void)USB_DevConnect(hpcd->Instance);
 80005ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80005d0:	5563      	strb	r3, [r4, r5]
  (void)USB_DevConnect(hpcd->Instance);
 80005d2:	f001 fa46 	bl	8001a62 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80005d6:	6820      	ldr	r0, [r4, #0]
 80005d8:	f000 ffdc 	bl	8001594 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80005dc:	2000      	movs	r0, #0
 80005de:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 80005e0:	bd70      	pop	{r4, r5, r6, pc}

080005e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80005e2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80005e4:	258a      	movs	r5, #138	; 0x8a
 80005e6:	00ad      	lsls	r5, r5, #2
 80005e8:	5d43      	ldrb	r3, [r0, r5]
{
 80005ea:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80005ec:	2002      	movs	r0, #2
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d008      	beq.n	8000604 <HAL_PCD_SetAddress+0x22>
 80005f2:	2301      	movs	r3, #1
 80005f4:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 80005f6:	1d63      	adds	r3, r4, #5
 80005f8:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80005fa:	6820      	ldr	r0, [r4, #0]
 80005fc:	f001 fa2a 	bl	8001a54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000600:	2000      	movs	r0, #0
 8000602:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 8000604:	bd70      	pop	{r4, r5, r6, pc}

08000606 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000606:	b570      	push	{r4, r5, r6, lr}
 8000608:	000d      	movs	r5, r1
 800060a:	0004      	movs	r4, r0
 800060c:	2007      	movs	r0, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800060e:	b249      	sxtb	r1, r1
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000610:	4028      	ands	r0, r5
 8000612:	0140      	lsls	r0, r0, #5
  if ((ep_addr & 0x80U) == 0x80U)
 8000614:	2900      	cmp	r1, #0
 8000616:	da21      	bge.n	800065c <HAL_PCD_EP_Open+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000618:	0001      	movs	r1, r0
    ep->is_in = 1U;
 800061a:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800061c:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 800061e:	1820      	adds	r0, r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000620:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8000622:	3029      	adds	r0, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 8000624:	7006      	strb	r6, [r0, #0]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000626:	2007      	movs	r0, #7
  ep->maxpacket = ep_mps;
 8000628:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800062a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800062c:	4005      	ands	r5, r0
 800062e:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8000630:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8000632:	2a00      	cmp	r2, #0
 8000634:	d000      	beq.n	8000638 <HAL_PCD_EP_Open+0x32>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000636:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000638:	2b02      	cmp	r3, #2
 800063a:	d101      	bne.n	8000640 <HAL_PCD_EP_Open+0x3a>
  {
    ep->data_pid_start = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	710b      	strb	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8000640:	258a      	movs	r5, #138	; 0x8a
 8000642:	00ad      	lsls	r5, r5, #2
 8000644:	5d63      	ldrb	r3, [r4, r5]
 8000646:	2002      	movs	r0, #2
 8000648:	2b01      	cmp	r3, #1
 800064a:	d006      	beq.n	800065a <HAL_PCD_EP_Open+0x54>
 800064c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800064e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000650:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000652:	f000 ffc9 	bl	80015e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000656:	2000      	movs	r0, #0
 8000658:	5560      	strb	r0, [r4, r5]

  return ret;
}
 800065a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800065c:	0001      	movs	r1, r0
    ep->is_in = 0U;
 800065e:	1820      	adds	r0, r4, r0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000660:	3129      	adds	r1, #41	; 0x29
 8000662:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8000664:	302a      	adds	r0, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000666:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8000668:	30ff      	adds	r0, #255	; 0xff
 800066a:	2600      	movs	r6, #0
 800066c:	e7da      	b.n	8000624 <HAL_PCD_EP_Open+0x1e>

0800066e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800066e:	000a      	movs	r2, r1
 8000670:	2307      	movs	r3, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000672:	b249      	sxtb	r1, r1
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000674:	4013      	ands	r3, r2
{
 8000676:	b570      	push	{r4, r5, r6, lr}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000678:	015b      	lsls	r3, r3, #5
{
 800067a:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800067c:	2900      	cmp	r1, #0
 800067e:	da17      	bge.n	80006b0 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000680:	0019      	movs	r1, r3
 8000682:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 8000684:	18c3      	adds	r3, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000686:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 8000688:	2001      	movs	r0, #1
 800068a:	3329      	adds	r3, #41	; 0x29
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
 800068c:	7018      	strb	r0, [r3, #0]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800068e:	2307      	movs	r3, #7

  __HAL_LOCK(hpcd);
 8000690:	258a      	movs	r5, #138	; 0x8a
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000692:	401a      	ands	r2, r3
 8000694:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8000696:	00ad      	lsls	r5, r5, #2
 8000698:	5d63      	ldrb	r3, [r4, r5]
 800069a:	2002      	movs	r0, #2
 800069c:	2b01      	cmp	r3, #1
 800069e:	d006      	beq.n	80006ae <HAL_PCD_EP_Close+0x40>
 80006a0:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80006a2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80006a4:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80006a6:	f001 f8e1 	bl	800186c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80006aa:	2000      	movs	r0, #0
 80006ac:	5560      	strb	r0, [r4, r5]
  return HAL_OK;
}
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006b0:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80006b2:	18c3      	adds	r3, r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006b4:	3129      	adds	r1, #41	; 0x29
 80006b6:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80006b8:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006ba:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 80006bc:	33ff      	adds	r3, #255	; 0xff
 80006be:	2000      	movs	r0, #0
 80006c0:	e7e4      	b.n	800068c <HAL_PCD_EP_Close+0x1e>

080006c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80006c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c4:	2407      	movs	r4, #7
 80006c6:	4021      	ands	r1, r4
 80006c8:	014c      	lsls	r4, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80006ca:	1906      	adds	r6, r0, r4
 80006cc:	0037      	movs	r7, r6
 80006ce:	37fc      	adds	r7, #252	; 0xfc
  ep->xfer_len = len;
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  ep->xfer_count = 0U;
  ep->is_in = 0U;
 80006d2:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 80006d4:	2500      	movs	r5, #0
  ep->is_in = 0U;
 80006d6:	332a      	adds	r3, #42	; 0x2a
  ep->num = ep_addr & EP_ADDR_MSK;
 80006d8:	3629      	adds	r6, #41	; 0x29
  ep->is_in = 0U;
 80006da:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 80006dc:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_count = 0U;
 80006de:	64bd      	str	r5, [r7, #72]	; 0x48
  ep->xfer_buff = pBuf;
 80006e0:	643a      	str	r2, [r7, #64]	; 0x40
  ep->is_in = 0U;
 80006e2:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80006e4:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80006e6:	0021      	movs	r1, r4
 80006e8:	3129      	adds	r1, #41	; 0x29
 80006ea:	31ff      	adds	r1, #255	; 0xff
 80006ec:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80006ee:	6800      	ldr	r0, [r0, #0]
 80006f0:	f001 f9da 	bl	8001aa8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006f4:	0028      	movs	r0, r5
 80006f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080006f8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80006f8:	2307      	movs	r3, #7
 80006fa:	4019      	ands	r1, r3
 80006fc:	310a      	adds	r1, #10
 80006fe:	0149      	lsls	r1, r1, #5
 8000700:	1840      	adds	r0, r0, r1
 8000702:	6840      	ldr	r0, [r0, #4]
}
 8000704:	4770      	bx	lr

08000706 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000706:	b570      	push	{r4, r5, r6, lr}
 8000708:	2407      	movs	r4, #7
 800070a:	4021      	ands	r1, r4
 800070c:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800070e:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000710:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000712:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000714:	0023      	movs	r3, r4
  ep->xfer_buff = pBuf;
 8000716:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 8000718:	2201      	movs	r2, #1
  ep->xfer_count = 0U;
 800071a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800071c:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800071e:	3428      	adds	r4, #40	; 0x28
  ep->is_in = 1U;
 8000720:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000722:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000724:	0029      	movs	r1, r5
 8000726:	3128      	adds	r1, #40	; 0x28
 8000728:	1841      	adds	r1, r0, r1
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800072a:	6800      	ldr	r0, [r0, #0]
 800072c:	f001 f9bc 	bl	8001aa8 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000730:	0030      	movs	r0, r6
 8000732:	bd70      	pop	{r4, r5, r6, pc}

08000734 <HAL_PCD_IRQHandler>:
{
 8000734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000736:	0004      	movs	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000738:	6800      	ldr	r0, [r0, #0]
 800073a:	f001 f99a 	bl	8001a72 <USB_ReadInterrupts>
 800073e:	0403      	lsls	r3, r0, #16
 8000740:	d500      	bpl.n	8000744 <HAL_PCD_IRQHandler+0x10>
 8000742:	e21d      	b.n	8000b80 <HAL_PCD_IRQHandler+0x44c>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000744:	6820      	ldr	r0, [r4, #0]
 8000746:	f001 f994 	bl	8001a72 <USB_ReadInterrupts>
 800074a:	0543      	lsls	r3, r0, #21
 800074c:	d50c      	bpl.n	8000768 <HAL_PCD_IRQHandler+0x34>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	49a6      	ldr	r1, [pc, #664]	; (80009ec <HAL_PCD_IRQHandler+0x2b8>)
 8000752:	3306      	adds	r3, #6
 8000754:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8000756:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000758:	400a      	ands	r2, r1
 800075a:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800075c:	f002 f97f 	bl	8002a5e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000760:	2100      	movs	r1, #0
 8000762:	0020      	movs	r0, r4
 8000764:	f7ff ff3d 	bl	80005e2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000768:	6820      	ldr	r0, [r4, #0]
 800076a:	f001 f982 	bl	8001a72 <USB_ReadInterrupts>
 800076e:	0443      	lsls	r3, r0, #17
 8000770:	d505      	bpl.n	800077e <HAL_PCD_IRQHandler+0x4a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	499e      	ldr	r1, [pc, #632]	; (80009f0 <HAL_PCD_IRQHandler+0x2bc>)
 8000776:	3306      	adds	r3, #6
 8000778:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800077a:	400a      	ands	r2, r1
 800077c:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800077e:	6820      	ldr	r0, [r4, #0]
 8000780:	f001 f977 	bl	8001a72 <USB_ReadInterrupts>
 8000784:	0483      	lsls	r3, r0, #18
 8000786:	d505      	bpl.n	8000794 <HAL_PCD_IRQHandler+0x60>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	499a      	ldr	r1, [pc, #616]	; (80009f4 <HAL_PCD_IRQHandler+0x2c0>)
 800078c:	3306      	adds	r3, #6
 800078e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8000790:	400a      	ands	r2, r1
 8000792:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000794:	6820      	ldr	r0, [r4, #0]
 8000796:	f001 f96c 	bl	8001a72 <USB_ReadInterrupts>
 800079a:	04c3      	lsls	r3, r0, #19
 800079c:	d51c      	bpl.n	80007d8 <HAL_PCD_IRQHandler+0xa4>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800079e:	2104      	movs	r1, #4
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	3302      	adds	r3, #2
 80007a4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80007a6:	438a      	bics	r2, r1
 80007a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80007aa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80007ac:	1849      	adds	r1, r1, r1
 80007ae:	438a      	bics	r2, r1
 80007b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80007b2:	2398      	movs	r3, #152	; 0x98
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	5ce2      	ldrb	r2, [r4, r3]
 80007b8:	2a01      	cmp	r2, #1
 80007ba:	d104      	bne.n	80007c6 <HAL_PCD_IRQHandler+0x92>
      hpcd->LPM_State = LPM_L0;
 80007bc:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80007be:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80007c0:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80007c2:	f000 fa90 	bl	8000ce6 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 80007c6:	0020      	movs	r0, r4
 80007c8:	f002 f968 	bl	8002a9c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	498a      	ldr	r1, [pc, #552]	; (80009f8 <HAL_PCD_IRQHandler+0x2c4>)
 80007d0:	3306      	adds	r3, #6
 80007d2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80007d4:	400a      	ands	r2, r1
 80007d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80007d8:	6820      	ldr	r0, [r4, #0]
 80007da:	f001 f94a 	bl	8001a72 <USB_ReadInterrupts>
 80007de:	0503      	lsls	r3, r0, #20
 80007e0:	d515      	bpl.n	800080e <HAL_PCD_IRQHandler+0xda>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007e2:	2208      	movs	r2, #8
 80007e4:	6820      	ldr	r0, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007e6:	4d85      	ldr	r5, [pc, #532]	; (80009fc <HAL_PCD_IRQHandler+0x2c8>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80007e8:	1c83      	adds	r3, r0, #2
 80007ea:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80007ec:	430a      	orrs	r2, r1
 80007ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80007f0:	1d81      	adds	r1, r0, #6
 80007f2:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80007f4:	402a      	ands	r2, r5
 80007f6:	87ca      	strh	r2, [r1, #62]	; 0x3e
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80007f8:	2204      	movs	r2, #4
 80007fa:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80007fc:	430a      	orrs	r2, r1
 80007fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8000800:	f001 f937 	bl	8001a72 <USB_ReadInterrupts>
 8000804:	04c3      	lsls	r3, r0, #19
 8000806:	d402      	bmi.n	800080e <HAL_PCD_IRQHandler+0xda>
      HAL_PCD_SuspendCallback(hpcd);
 8000808:	0020      	movs	r0, r4
 800080a:	f002 f935 	bl	8002a78 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800080e:	6820      	ldr	r0, [r4, #0]
 8000810:	f001 f92f 	bl	8001a72 <USB_ReadInterrupts>
 8000814:	2580      	movs	r5, #128	; 0x80
 8000816:	4228      	tst	r0, r5
 8000818:	d020      	beq.n	800085c <HAL_PCD_IRQHandler+0x128>
    if (hpcd->LPM_State == LPM_L0)
 800081a:	2098      	movs	r0, #152	; 0x98
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800081c:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 800081e:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000820:	1d99      	adds	r1, r3, #6
 8000822:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8000824:	43aa      	bics	r2, r5
 8000826:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8000828:	5c22      	ldrb	r2, [r4, r0]
 800082a:	2a00      	cmp	r2, #0
 800082c:	d000      	beq.n	8000830 <HAL_PCD_IRQHandler+0xfc>
 800082e:	e1a9      	b.n	8000b84 <HAL_PCD_IRQHandler+0x450>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000830:	2104      	movs	r1, #4
 8000832:	1c9a      	adds	r2, r3, #2
 8000834:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000836:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000838:	4329      	orrs	r1, r5
 800083a:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800083c:	2108      	movs	r1, #8
 800083e:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
 8000840:	4329      	orrs	r1, r5
 8000842:	87d1      	strh	r1, [r2, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8000844:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000846:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000848:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800084a:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800084c:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	4013      	ands	r3, r2
 8000852:	2299      	movs	r2, #153	; 0x99
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000858:	f000 fa45 	bl	8000ce6 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800085c:	6820      	ldr	r0, [r4, #0]
 800085e:	f001 f908 	bl	8001a72 <USB_ReadInterrupts>
 8000862:	0583      	lsls	r3, r0, #22
 8000864:	d508      	bpl.n	8000878 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	4965      	ldr	r1, [pc, #404]	; (8000a00 <HAL_PCD_IRQHandler+0x2cc>)
 800086a:	3306      	adds	r3, #6
 800086c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 800086e:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000870:	400a      	ands	r2, r1
 8000872:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8000874:	f002 f8ec 	bl	8002a50 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000878:	6820      	ldr	r0, [r4, #0]
 800087a:	f001 f8fa 	bl	8001a72 <USB_ReadInterrupts>
 800087e:	05c3      	lsls	r3, r0, #23
 8000880:	d505      	bpl.n	800088e <HAL_PCD_IRQHandler+0x15a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	495f      	ldr	r1, [pc, #380]	; (8000a04 <HAL_PCD_IRQHandler+0x2d0>)
 8000886:	3306      	adds	r3, #6
 8000888:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800088a:	400a      	ands	r2, r1
 800088c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 800088e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000890:	260f      	movs	r6, #15
    wIstr = hpcd->Instance->ISTR;
 8000892:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
 8000894:	b289      	uxth	r1, r1
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000896:	400e      	ands	r6, r1

    if (epindex == 0U)
 8000898:	d000      	beq.n	800089c <HAL_PCD_IRQHandler+0x168>
 800089a:	e0c5      	b.n	8000a28 <HAL_PCD_IRQHandler+0x2f4>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800089c:	2310      	movs	r3, #16
 800089e:	4019      	ands	r1, r3
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008a0:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80008a2:	2900      	cmp	r1, #0
 80008a4:	d12f      	bne.n	8000906 <HAL_PCD_IRQHandler+0x1d2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008a6:	4a58      	ldr	r2, [pc, #352]	; (8000a08 <HAL_PCD_IRQHandler+0x2d4>)
 80008a8:	4013      	ands	r3, r2
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0212      	lsls	r2, r2, #8
 80008ae:	4313      	orrs	r3, r2
 80008b0:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80008b2:	0003      	movs	r3, r0
 80008b4:	3350      	adds	r3, #80	; 0x50
 80008b6:	881a      	ldrh	r2, [r3, #0]
 80008b8:	0023      	movs	r3, r4
 80008ba:	3328      	adds	r3, #40	; 0x28
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	18c0      	adds	r0, r0, r3
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <HAL_PCD_IRQHandler+0x2d8>)
 80008c4:	1880      	adds	r0, r0, r2
 80008c6:	18c0      	adds	r0, r0, r3
 80008c8:	8803      	ldrh	r3, [r0, #0]
        ep->xfer_buff += ep->xfer_count;
 80008ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80008cc:	059b      	lsls	r3, r3, #22
 80008ce:	0d9b      	lsrs	r3, r3, #22
 80008d0:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80008d2:	18d3      	adds	r3, r2, r3
 80008d4:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80008d6:	0020      	movs	r0, r4
 80008d8:	f002 f8b0 	bl	8002a3c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80008dc:	1d63      	adds	r3, r4, #5
 80008de:	7fda      	ldrb	r2, [r3, #31]
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	d009      	beq.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
 80008e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d106      	bne.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	7fd9      	ldrb	r1, [r3, #31]
 80008ee:	4311      	orrs	r1, r2
 80008f0:	6822      	ldr	r2, [r4, #0]
 80008f2:	324c      	adds	r2, #76	; 0x4c
 80008f4:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 80008f6:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	1d82      	adds	r2, r0, #6
 80008fc:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80008fe:	b21b      	sxth	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	dbc5      	blt.n	8000890 <HAL_PCD_IRQHandler+0x15c>
 8000904:	e71e      	b.n	8000744 <HAL_PCD_IRQHandler+0x10>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000906:	b29b      	uxth	r3, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000908:	051a      	lsls	r2, r3, #20
 800090a:	d521      	bpl.n	8000950 <HAL_PCD_IRQHandler+0x21c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800090c:	0003      	movs	r3, r0
 800090e:	3350      	adds	r3, #80	; 0x50
 8000910:	881a      	ldrh	r2, [r3, #0]
 8000912:	2394      	movs	r3, #148	; 0x94
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000918:	218c      	movs	r1, #140	; 0x8c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	18c3      	adds	r3, r0, r3
 800091e:	189b      	adds	r3, r3, r2
 8000920:	4a3b      	ldr	r2, [pc, #236]	; (8000a10 <HAL_PCD_IRQHandler+0x2dc>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000922:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000924:	189b      	adds	r3, r3, r2
 8000926:	0022      	movs	r2, r4
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	3229      	adds	r2, #41	; 0x29
 800092c:	059b      	lsls	r3, r3, #22
 800092e:	0d9b      	lsrs	r3, r3, #22
 8000930:	32ff      	adds	r2, #255	; 0xff
 8000932:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000934:	1861      	adds	r1, r4, r1
 8000936:	88d2      	ldrh	r2, [r2, #6]
 8000938:	f001 f992 	bl	8001c60 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	4935      	ldr	r1, [pc, #212]	; (8000a14 <HAL_PCD_IRQHandler+0x2e0>)
 8000940:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000942:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000944:	400b      	ands	r3, r1
 8000946:	433b      	orrs	r3, r7
 8000948:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800094a:	f002 f863 	bl	8002a14 <HAL_PCD_SetupStageCallback>
 800094e:	e7d3      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000950:	b21b      	sxth	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	dad0      	bge.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000956:	8803      	ldrh	r3, [r0, #0]
 8000958:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <HAL_PCD_IRQHandler+0x2e0>)
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800095a:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800095c:	4013      	ands	r3, r2
 800095e:	433b      	orrs	r3, r7
 8000960:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000962:	0003      	movs	r3, r0
 8000964:	3350      	adds	r3, #80	; 0x50
 8000966:	881a      	ldrh	r2, [r3, #0]
 8000968:	2394      	movs	r3, #148	; 0x94
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	5ce3      	ldrb	r3, [r4, r3]
 800096e:	3529      	adds	r5, #41	; 0x29
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	18c3      	adds	r3, r0, r3
 8000974:	189b      	adds	r3, r3, r2
 8000976:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <HAL_PCD_IRQHandler+0x2dc>)
 8000978:	35ff      	adds	r5, #255	; 0xff
 800097a:	189b      	adds	r3, r3, r2
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	059b      	lsls	r3, r3, #22
 8000980:	0d9b      	lsrs	r3, r3, #22
 8000982:	61eb      	str	r3, [r5, #28]

          if (ep->xfer_count != 0U)
 8000984:	d007      	beq.n	8000996 <HAL_PCD_IRQHandler+0x262>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8000986:	88ea      	ldrh	r2, [r5, #6]
 8000988:	6969      	ldr	r1, [r5, #20]
 800098a:	f001 f969 	bl	8001c60 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 800098e:	696b      	ldr	r3, [r5, #20]
 8000990:	69ea      	ldr	r2, [r5, #28]
 8000992:	189b      	adds	r3, r3, r2
 8000994:	616b      	str	r3, [r5, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000996:	2100      	movs	r1, #0
 8000998:	0020      	movs	r0, r4
 800099a:	f002 f844 	bl	8002a26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800099e:	6821      	ldr	r1, [r4, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_PCD_IRQHandler+0x2dc>)
 80009a2:	000b      	movs	r3, r1
 80009a4:	3350      	adds	r3, #80	; 0x50
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	188a      	adds	r2, r1, r2
 80009aa:	18d2      	adds	r2, r2, r3
 80009ac:	692b      	ldr	r3, [r5, #16]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d106      	bne.n	80009c0 <HAL_PCD_IRQHandler+0x28c>
 80009b2:	8813      	ldrh	r3, [r2, #0]
 80009b4:	4818      	ldr	r0, [pc, #96]	; (8000a18 <HAL_PCD_IRQHandler+0x2e4>)
 80009b6:	4018      	ands	r0, r3
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_PCD_IRQHandler+0x2e8>)
 80009ba:	4303      	orrs	r3, r0
 80009bc:	8013      	strh	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_PCD_IRQHandler+0x29c>
 80009c0:	2b3d      	cmp	r3, #61	; 0x3d
 80009c2:	d80f      	bhi.n	80009e4 <HAL_PCD_IRQHandler+0x2b0>
 80009c4:	2501      	movs	r5, #1
 80009c6:	0858      	lsrs	r0, r3, #1
 80009c8:	402b      	ands	r3, r5
 80009ca:	18c0      	adds	r0, r0, r3
 80009cc:	0280      	lsls	r0, r0, #10
 80009ce:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80009d0:	880b      	ldrh	r3, [r1, #0]
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_PCD_IRQHandler+0x2ec>)
 80009d4:	401a      	ands	r2, r3
 80009d6:	23c0      	movs	r3, #192	; 0xc0
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	4053      	eors	r3, r2
 80009dc:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <HAL_PCD_IRQHandler+0x2f0>)
 80009de:	4313      	orrs	r3, r2
 80009e0:	800b      	strh	r3, [r1, #0]
 80009e2:	e789      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	029b      	lsls	r3, r3, #10
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <HAL_PCD_IRQHandler+0x2e8>)
 80009ea:	e7e6      	b.n	80009ba <HAL_PCD_IRQHandler+0x286>
 80009ec:	fffffbff 	.word	0xfffffbff
 80009f0:	ffffbfff 	.word	0xffffbfff
 80009f4:	ffffdfff 	.word	0xffffdfff
 80009f8:	ffffefff 	.word	0xffffefff
 80009fc:	fffff7ff 	.word	0xfffff7ff
 8000a00:	fffffdff 	.word	0xfffffdff
 8000a04:	fffffeff 	.word	0xfffffeff
 8000a08:	ffff8f0f 	.word	0xffff8f0f
 8000a0c:	00000402 	.word	0x00000402
 8000a10:	00000406 	.word	0x00000406
 8000a14:	00000f8f 	.word	0x00000f8f
 8000a18:	ffff83ff 	.word	0xffff83ff
 8000a1c:	ffff8000 	.word	0xffff8000
 8000a20:	ffffbf8f 	.word	0xffffbf8f
 8000a24:	00008080 	.word	0x00008080
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000a28:	00b3      	lsls	r3, r6, #2
 8000a2a:	18c2      	adds	r2, r0, r3
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	8813      	ldrh	r3, [r2, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	9300      	str	r3, [sp, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000a34:	466b      	mov	r3, sp
 8000a36:	2100      	movs	r1, #0
 8000a38:	5e5b      	ldrsh	r3, [r3, r1]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da3b      	bge.n	8000ab6 <HAL_PCD_IRQHandler+0x382>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a3e:	8813      	ldrh	r3, [r2, #0]
 8000a40:	4952      	ldr	r1, [pc, #328]	; (8000b8c <HAL_PCD_IRQHandler+0x458>)
 8000a42:	400b      	ands	r3, r1
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a44:	0171      	lsls	r1, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a46:	433b      	orrs	r3, r7
        if (ep->doublebuffer == 0U)
 8000a48:	1861      	adds	r1, r4, r1
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000a4a:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8000a4c:	000b      	movs	r3, r1
 8000a4e:	0002      	movs	r2, r0
 8000a50:	3335      	adds	r3, #53	; 0x35
 8000a52:	33ff      	adds	r3, #255	; 0xff
 8000a54:	781d      	ldrb	r5, [r3, #0]
 8000a56:	3250      	adds	r2, #80	; 0x50
 8000a58:	3b0c      	subs	r3, #12
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d155      	bne.n	8000b0a <HAL_PCD_IRQHandler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	8812      	ldrh	r2, [r2, #0]
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	18c3      	adds	r3, r0, r3
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	4a49      	ldr	r2, [pc, #292]	; (8000b90 <HAL_PCD_IRQHandler+0x45c>)
 8000a6a:	189b      	adds	r3, r3, r2
 8000a6c:	881d      	ldrh	r5, [r3, #0]
 8000a6e:	05ad      	lsls	r5, r5, #22
 8000a70:	0dad      	lsrs	r5, r5, #22
          if (count != 0U)
 8000a72:	d007      	beq.n	8000a84 <HAL_PCD_IRQHandler+0x350>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000a74:	000b      	movs	r3, r1
 8000a76:	31fc      	adds	r1, #252	; 0xfc
 8000a78:	33fe      	adds	r3, #254	; 0xfe
 8000a7a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8000a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a7e:	002b      	movs	r3, r5
 8000a80:	f001 f8ee 	bl	8001c60 <USB_ReadPMA>
 8000a84:	0173      	lsls	r3, r6, #5
 8000a86:	18e0      	adds	r0, r4, r3
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8000a88:	0001      	movs	r1, r0
 8000a8a:	31fc      	adds	r1, #252	; 0xfc
 8000a8c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	1952      	adds	r2, r2, r5
 8000a92:	648a      	str	r2, [r1, #72]	; 0x48
        ep->xfer_buff += count;
 8000a94:	6c0a      	ldr	r2, [r1, #64]	; 0x40

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a96:	6c4b      	ldr	r3, [r1, #68]	; 0x44
        ep->xfer_buff += count;
 8000a98:	1952      	adds	r2, r2, r5
 8000a9a:	640a      	str	r2, [r1, #64]	; 0x40
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d002      	beq.n	8000aa6 <HAL_PCD_IRQHandler+0x372>
 8000aa0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	d262      	bcs.n	8000b6c <HAL_PCD_IRQHandler+0x438>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000aa6:	0173      	lsls	r3, r6, #5
 8000aa8:	18e3      	adds	r3, r4, r3
 8000aaa:	3329      	adds	r3, #41	; 0x29
 8000aac:	33ff      	adds	r3, #255	; 0xff
 8000aae:	7819      	ldrb	r1, [r3, #0]
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f001 ffb8 	bl	8002a26 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000ab6:	9b00      	ldr	r3, [sp, #0]
 8000ab8:	423b      	tst	r3, r7
 8000aba:	d100      	bne.n	8000abe <HAL_PCD_IRQHandler+0x38a>
 8000abc:	e71c      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	00b2      	lsls	r2, r6, #2
 8000ac2:	1899      	adds	r1, r3, r2
 8000ac4:	880a      	ldrh	r2, [r1, #0]
 8000ac6:	4833      	ldr	r0, [pc, #204]	; (8000b94 <HAL_PCD_IRQHandler+0x460>)

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ac8:	0176      	lsls	r6, r6, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000aca:	4002      	ands	r2, r0
 8000acc:	2080      	movs	r0, #128	; 0x80
 8000ace:	0200      	lsls	r0, r0, #8
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ad0:	19a6      	adds	r6, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000ad2:	4302      	orrs	r2, r0
 8000ad4:	800a      	strh	r2, [r1, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000ad6:	0031      	movs	r1, r6
 8000ad8:	001a      	movs	r2, r3
 8000ada:	3128      	adds	r1, #40	; 0x28
 8000adc:	7808      	ldrb	r0, [r1, #0]
 8000ade:	3250      	adds	r2, #80	; 0x50
 8000ae0:	8812      	ldrh	r2, [r2, #0]
 8000ae2:	00c0      	lsls	r0, r0, #3
 8000ae4:	181b      	adds	r3, r3, r0
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <HAL_PCD_IRQHandler+0x464>)
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000aea:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000aec:	189b      	adds	r3, r3, r2
 8000aee:	881a      	ldrh	r2, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8000af0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000af2:	0592      	lsls	r2, r2, #22
 8000af4:	0d92      	lsrs	r2, r2, #22
 8000af6:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000af8:	189a      	adds	r2, r3, r2
        if (ep->xfer_len == 0U)
 8000afa:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8000afc:	63f2      	str	r2, [r6, #60]	; 0x3c
 8000afe:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d13a      	bne.n	8000b7a <HAL_PCD_IRQHandler+0x446>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000b04:	f001 ff9a 	bl	8002a3c <HAL_PCD_DataInStageCallback>
 8000b08:	e6f6      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	009d      	lsls	r5, r3, #2
 8000b0e:	1945      	adds	r5, r0, r5
 8000b10:	882d      	ldrh	r5, [r5, #0]
 8000b12:	00db      	lsls	r3, r3, #3
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b14:	8812      	ldrh	r2, [r2, #0]
 8000b16:	18c3      	adds	r3, r0, r3
 8000b18:	189b      	adds	r3, r3, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000b1a:	046d      	lsls	r5, r5, #17
 8000b1c:	d51c      	bpl.n	8000b58 <HAL_PCD_IRQHandler+0x424>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <HAL_PCD_IRQHandler+0x464>)
 8000b20:	189b      	adds	r3, r3, r2
 8000b22:	881d      	ldrh	r5, [r3, #0]
 8000b24:	05ad      	lsls	r5, r5, #22
 8000b26:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8000b28:	d007      	beq.n	8000b3a <HAL_PCD_IRQHandler+0x406>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000b2a:	000b      	movs	r3, r1
 8000b2c:	33fe      	adds	r3, #254	; 0xfe
 8000b2e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b30:	31fc      	adds	r1, #252	; 0xfc
 8000b32:	002b      	movs	r3, r5
 8000b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b36:	f001 f893 	bl	8001c60 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000b3a:	0173      	lsls	r3, r6, #5
 8000b3c:	18e3      	adds	r3, r4, r3
 8000b3e:	3329      	adds	r3, #41	; 0x29
 8000b40:	33ff      	adds	r3, #255	; 0xff
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	0092      	lsls	r2, r2, #2
 8000b48:	189a      	adds	r2, r3, r2
 8000b4a:	8813      	ldrh	r3, [r2, #0]
 8000b4c:	4913      	ldr	r1, [pc, #76]	; (8000b9c <HAL_PCD_IRQHandler+0x468>)
 8000b4e:	400b      	ands	r3, r1
 8000b50:	4913      	ldr	r1, [pc, #76]	; (8000ba0 <HAL_PCD_IRQHandler+0x46c>)
 8000b52:	430b      	orrs	r3, r1
 8000b54:	8013      	strh	r3, [r2, #0]
 8000b56:	e795      	b.n	8000a84 <HAL_PCD_IRQHandler+0x350>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_PCD_IRQHandler+0x45c>)
 8000b5a:	189b      	adds	r3, r3, r2
 8000b5c:	881d      	ldrh	r5, [r3, #0]
 8000b5e:	05ad      	lsls	r5, r5, #22
 8000b60:	0dad      	lsrs	r5, r5, #22
            if (count != 0U)
 8000b62:	d0ea      	beq.n	8000b3a <HAL_PCD_IRQHandler+0x406>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000b64:	000b      	movs	r3, r1
 8000b66:	33fe      	adds	r3, #254	; 0xfe
 8000b68:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000b6a:	e7e1      	b.n	8000b30 <HAL_PCD_IRQHandler+0x3fc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b6c:	3029      	adds	r0, #41	; 0x29
 8000b6e:	30ff      	adds	r0, #255	; 0xff
 8000b70:	7801      	ldrb	r1, [r0, #0]
 8000b72:	0020      	movs	r0, r4
 8000b74:	f7ff fda5 	bl	80006c2 <HAL_PCD_EP_Receive>
 8000b78:	e79d      	b.n	8000ab6 <HAL_PCD_IRQHandler+0x382>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b7a:	f7ff fdc4 	bl	8000706 <HAL_PCD_EP_Transmit>
 8000b7e:	e6bb      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000b80:	2780      	movs	r7, #128	; 0x80
 8000b82:	e6b9      	b.n	80008f8 <HAL_PCD_IRQHandler+0x1c4>
      HAL_PCD_SuspendCallback(hpcd);
 8000b84:	0020      	movs	r0, r4
 8000b86:	f001 ff77 	bl	8002a78 <HAL_PCD_SuspendCallback>
 8000b8a:	e667      	b.n	800085c <HAL_PCD_IRQHandler+0x128>
 8000b8c:	00000f8f 	.word	0x00000f8f
 8000b90:	00000406 	.word	0x00000406
 8000b94:	ffff8f0f 	.word	0xffff8f0f
 8000b98:	00000402 	.word	0x00000402
 8000b9c:	ffff8f8f 	.word	0xffff8f8f
 8000ba0:	000080c0 	.word	0x000080c0

08000ba4 <HAL_PCD_EP_SetStall>:
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0004      	movs	r4, r0
 8000ba8:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000baa:	6863      	ldr	r3, [r4, #4]
 8000bac:	400d      	ands	r5, r1
    return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000bb0:	429d      	cmp	r5, r3
 8000bb2:	d820      	bhi.n	8000bf6 <HAL_PCD_EP_SetStall+0x52>
  if ((0x80U & ep_addr) == 0x80U)
 8000bb4:	b24b      	sxtb	r3, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da1e      	bge.n	8000bf8 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bba:	016b      	lsls	r3, r5, #5
 8000bbc:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8000bbe:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bc0:	3128      	adds	r1, #40	; 0x28
    ep->is_in = 1U;
 8000bc2:	3329      	adds	r3, #41	; 0x29
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bc4:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8000bc6:	7018      	strb	r0, [r3, #0]
  ep->is_stall = 1U;
 8000bc8:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8000bca:	268a      	movs	r6, #138	; 0x8a
  ep->is_stall = 1U;
 8000bcc:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000bce:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8000bd0:	00b6      	lsls	r6, r6, #2
 8000bd2:	5da2      	ldrb	r2, [r4, r6]
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_PCD_EP_SetStall+0x52>
 8000bda:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000bdc:	6820      	ldr	r0, [r4, #0]
 8000bde:	f000 fedd 	bl	800199c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	d105      	bne.n	8000bf2 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000be6:	238c      	movs	r3, #140	; 0x8c
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	18e1      	adds	r1, r4, r3
 8000bec:	6820      	ldr	r0, [r4, #0]
 8000bee:	f000 ff44 	bl	8001a7a <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	55a0      	strb	r0, [r4, r6]
}
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf8:	014b      	lsls	r3, r1, #5
 8000bfa:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8000c00:	3129      	adds	r1, #41	; 0x29
    ep->is_in = 0U;
 8000c02:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr];
 8000c04:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8000c06:	33ff      	adds	r3, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8000c08:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e7dc      	b.n	8000bc8 <HAL_PCD_EP_SetStall+0x24>

08000c0e <HAL_PCD_EP_ClrStall>:
{
 8000c0e:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c10:	230f      	movs	r3, #15
{
 8000c12:	0004      	movs	r4, r0
 8000c14:	000a      	movs	r2, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c16:	400b      	ands	r3, r1
 8000c18:	6861      	ldr	r1, [r4, #4]
    return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d81d      	bhi.n	8000c5c <HAL_PCD_EP_ClrStall+0x4e>
 8000c20:	2307      	movs	r3, #7
  if ((0x80U & ep_addr) == 0x80U)
 8000c22:	b251      	sxtb	r1, r2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c24:	4013      	ands	r3, r2
 8000c26:	015b      	lsls	r3, r3, #5
  if ((0x80U & ep_addr) == 0x80U)
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	da18      	bge.n	8000c5e <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c2c:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8000c2e:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c30:	3128      	adds	r1, #40	; 0x28
 8000c32:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8000c34:	3329      	adds	r3, #41	; 0x29
    ep->is_in = 0U;
 8000c36:	7018      	strb	r0, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c38:	2307      	movs	r3, #7
  ep->is_stall = 0U;
 8000c3a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8000c3c:	268a      	movs	r6, #138	; 0x8a
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c3e:	401a      	ands	r2, r3
  ep->is_stall = 0U;
 8000c40:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c42:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8000c44:	00b6      	lsls	r6, r6, #2
 8000c46:	5da3      	ldrb	r3, [r4, r6]
 8000c48:	2002      	movs	r0, #2
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <HAL_PCD_EP_ClrStall+0x4e>
 8000c4e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c50:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000c52:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000c54:	f000 fec0 	bl	80019d8 <USB_EPClearStall>
  return HAL_OK;
 8000c58:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8000c5a:	55a5      	strb	r5, [r4, r6]
}
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c5e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8000c60:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c62:	3129      	adds	r1, #41	; 0x29
 8000c64:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8000c66:	332a      	adds	r3, #42	; 0x2a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c68:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8000c6a:	33ff      	adds	r3, #255	; 0xff
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e7e2      	b.n	8000c36 <HAL_PCD_EP_ClrStall+0x28>

08000c70 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8000c70:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8000c72:	060c      	lsls	r4, r1, #24
 8000c74:	d50a      	bpl.n	8000c8c <HAL_PCDEx_PMAConfig+0x1c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c76:	2407      	movs	r4, #7
 8000c78:	4021      	ands	r1, r4
 8000c7a:	0149      	lsls	r1, r1, #5
 8000c7c:	3128      	adds	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c7e:	1841      	adds	r1, r0, r1
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	d107      	bne.n	8000c94 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8000c84:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8000c86:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8000c88:	2000      	movs	r0, #0
 8000c8a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8000c8c:	0149      	lsls	r1, r1, #5
 8000c8e:	3129      	adds	r1, #41	; 0x29
 8000c90:	31ff      	adds	r1, #255	; 0xff
 8000c92:	e7f4      	b.n	8000c7e <HAL_PCDEx_PMAConfig+0xe>
    ep->doublebuffer = 1U;
 8000c94:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8000c96:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c98:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c9a:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8000c9c:	814b      	strh	r3, [r1, #10]
 8000c9e:	e7f3      	b.n	8000c88 <HAL_PCDEx_PMAConfig+0x18>

08000ca0 <HAL_PCDEx_ActivateBCD>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->battery_charging_active = 1U;
 8000ca0:	219b      	movs	r1, #155	; 0x9b
 8000ca2:	2201      	movs	r2, #1
  USB_TypeDef *USBx = hpcd->Instance;
 8000ca4:	6803      	ldr	r3, [r0, #0]
  hpcd->battery_charging_active = 1U;
 8000ca6:	0089      	lsls	r1, r1, #2
 8000ca8:	5042      	str	r2, [r0, r1]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8000caa:	3358      	adds	r3, #88	; 0x58
 8000cac:	8819      	ldrh	r1, [r3, #0]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);

  return HAL_OK;
}
 8000cae:	2000      	movs	r0, #0
  USBx->BCDR |= (USB_BCDR_BCDEN);
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	801a      	strh	r2, [r3, #0]
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	801a      	strh	r2, [r3, #0]
}
 8000cbc:	4770      	bx	lr

08000cbe <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000cbe:	6803      	ldr	r3, [r0, #0]
{
 8000cc0:	0001      	movs	r1, r0
  hpcd->lpm_active = 1U;
 8000cc2:	209a      	movs	r0, #154	; 0x9a
 8000cc4:	2201      	movs	r2, #1
{
 8000cc6:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8000cc8:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8000cca:	2498      	movs	r4, #152	; 0x98
  hpcd->lpm_active = 1U;
 8000ccc:	500a      	str	r2, [r1, r0]
  hpcd->LPM_State = LPM_L0;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	00a4      	lsls	r4, r4, #2
 8000cd2:	5508      	strb	r0, [r1, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000cd4:	3354      	adds	r3, #84	; 0x54
 8000cd6:	8819      	ldrh	r1, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	801a      	strh	r2, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000cdc:	2202      	movs	r2, #2
 8000cde:	8819      	ldrh	r1, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8000ce4:	bd10      	pop	{r4, pc}

08000ce6 <HAL_PCDEx_LPM_Callback>:
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ce8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000cec:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000cee:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	2a08      	cmp	r2, #8
 8000cf4:	d026      	beq.n	8000d44 <HAL_RCC_GetSysClockFreq+0x5c>
 8000cf6:	2a0c      	cmp	r2, #12
 8000cf8:	d006      	beq.n	8000d08 <HAL_RCC_GetSysClockFreq+0x20>
 8000cfa:	2a04      	cmp	r2, #4
 8000cfc:	d11a      	bne.n	8000d34 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	06db      	lsls	r3, r3, #27
 8000d02:	d421      	bmi.n	8000d48 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000d06:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000d08:	028a      	lsls	r2, r1, #10
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000d0c:	0f12      	lsrs	r2, r2, #28
 8000d0e:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000d10:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d12:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000d14:	0f89      	lsrs	r1, r1, #30
 8000d16:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d18:	03c0      	lsls	r0, r0, #15
 8000d1a:	d504      	bpl.n	8000d26 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000d1c:	480e      	ldr	r0, [pc, #56]	; (8000d58 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000d1e:	4350      	muls	r0, r2
 8000d20:	f7ff fa06 	bl	8000130 <__udivsi3>
 8000d24:	e7ef      	b.n	8000d06 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	06db      	lsls	r3, r3, #27
 8000d2a:	d501      	bpl.n	8000d30 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HAL_RCC_GetSysClockFreq+0x74>)
 8000d2e:	e7f6      	b.n	8000d1e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <HAL_RCC_GetSysClockFreq+0x68>)
 8000d32:	e7f4      	b.n	8000d1e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000d34:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000d36:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000d38:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000d3a:	041b      	lsls	r3, r3, #16
 8000d3c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000d3e:	3301      	adds	r3, #1
 8000d40:	4098      	lsls	r0, r3
 8000d42:	e7e0      	b.n	8000d06 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <HAL_RCC_GetSysClockFreq+0x70>)
 8000d46:	e7de      	b.n	8000d06 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000d4a:	e7dc      	b.n	8000d06 <HAL_RCC_GetSysClockFreq+0x1e>
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	00f42400 	.word	0x00f42400
 8000d54:	08002e04 	.word	0x08002e04
 8000d58:	007a1200 	.word	0x007a1200
 8000d5c:	003d0900 	.word	0x003d0900

08000d60 <HAL_RCC_OscConfig>:
{
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	0005      	movs	r5, r0
 8000d64:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
}
 8000d6c:	b007      	add	sp, #28
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d70:	230c      	movs	r3, #12
 8000d72:	4cbe      	ldr	r4, [pc, #760]	; (800106c <HAL_RCC_OscConfig+0x30c>)
 8000d74:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d76:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d78:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	025b      	lsls	r3, r3, #9
 8000d7e:	401a      	ands	r2, r3
 8000d80:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	07d2      	lsls	r2, r2, #31
 8000d86:	d441      	bmi.n	8000e0c <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	079b      	lsls	r3, r3, #30
 8000d8c:	d500      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x30>
 8000d8e:	e087      	b.n	8000ea0 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	06db      	lsls	r3, r3, #27
 8000d94:	d528      	bpl.n	8000de8 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d000      	beq.n	8000d9c <HAL_RCC_OscConfig+0x3c>
 8000d9a:	e0d9      	b.n	8000f50 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	059b      	lsls	r3, r3, #22
 8000da0:	d502      	bpl.n	8000da8 <HAL_RCC_OscConfig+0x48>
 8000da2:	69eb      	ldr	r3, [r5, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0e0      	beq.n	8000d6a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da8:	6862      	ldr	r2, [r4, #4]
 8000daa:	49b1      	ldr	r1, [pc, #708]	; (8001070 <HAL_RCC_OscConfig+0x310>)
 8000dac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000dae:	400a      	ands	r2, r1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000db4:	6861      	ldr	r1, [r4, #4]
 8000db6:	6a2a      	ldr	r2, [r5, #32]
 8000db8:	0209      	lsls	r1, r1, #8
 8000dba:	0a09      	lsrs	r1, r1, #8
 8000dbc:	0612      	lsls	r2, r2, #24
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	0b5b      	lsrs	r3, r3, #13
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	0212      	lsls	r2, r2, #8
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000dce:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000dd0:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000dd2:	060a      	lsls	r2, r1, #24
 8000dd4:	49a7      	ldr	r1, [pc, #668]	; (8001074 <HAL_RCC_OscConfig+0x314>)
 8000dd6:	0f12      	lsrs	r2, r2, #28
 8000dd8:	5c8a      	ldrb	r2, [r1, r2]
 8000dda:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ddc:	4aa6      	ldr	r2, [pc, #664]	; (8001078 <HAL_RCC_OscConfig+0x318>)
 8000dde:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000de0:	f7ff fa32 	bl	8000248 <HAL_InitTick>
        if(status != HAL_OK)
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d1c1      	bne.n	8000d6c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	071b      	lsls	r3, r3, #28
 8000dec:	d500      	bpl.n	8000df0 <HAL_RCC_OscConfig+0x90>
 8000dee:	e0e6      	b.n	8000fbe <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	075b      	lsls	r3, r3, #29
 8000df4:	d500      	bpl.n	8000df8 <HAL_RCC_OscConfig+0x98>
 8000df6:	e108      	b.n	800100a <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	069b      	lsls	r3, r3, #26
 8000dfc:	d500      	bpl.n	8000e00 <HAL_RCC_OscConfig+0xa0>
 8000dfe:	e18d      	b.n	800111c <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d000      	beq.n	8000e08 <HAL_RCC_OscConfig+0xa8>
 8000e06:	e1bc      	b.n	8001182 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 8000e08:	2000      	movs	r0, #0
 8000e0a:	e7af      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e0c:	2e08      	cmp	r6, #8
 8000e0e:	d004      	beq.n	8000e1a <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e10:	2e0c      	cmp	r6, #12
 8000e12:	d109      	bne.n	8000e28 <HAL_RCC_OscConfig+0xc8>
 8000e14:	9a01      	ldr	r2, [sp, #4]
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d006      	beq.n	8000e28 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	039b      	lsls	r3, r3, #14
 8000e1e:	d5b3      	bpl.n	8000d88 <HAL_RCC_OscConfig+0x28>
 8000e20:	686b      	ldr	r3, [r5, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1b0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x28>
 8000e26:	e7a0      	b.n	8000d6a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e28:	686a      	ldr	r2, [r5, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d111      	bne.n	8000e52 <HAL_RCC_OscConfig+0xf2>
 8000e2e:	6822      	ldr	r2, [r4, #0]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e34:	f7ff fa3c 	bl	80002b0 <HAL_GetTick>
 8000e38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	0292      	lsls	r2, r2, #10
 8000e40:	4213      	tst	r3, r2
 8000e42:	d1a1      	bne.n	8000d88 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fa34 	bl	80002b0 <HAL_GetTick>
 8000e48:	1bc0      	subs	r0, r0, r7
 8000e4a:	2864      	cmp	r0, #100	; 0x64
 8000e4c:	d9f5      	bls.n	8000e3a <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000e4e:	2003      	movs	r0, #3
 8000e50:	e78c      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e52:	21a0      	movs	r1, #160	; 0xa0
 8000e54:	02c9      	lsls	r1, r1, #11
 8000e56:	428a      	cmp	r2, r1
 8000e58:	d105      	bne.n	8000e66 <HAL_RCC_OscConfig+0x106>
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	6821      	ldr	r1, [r4, #0]
 8000e5e:	02d2      	lsls	r2, r2, #11
 8000e60:	430a      	orrs	r2, r1
 8000e62:	6022      	str	r2, [r4, #0]
 8000e64:	e7e3      	b.n	8000e2e <HAL_RCC_OscConfig+0xce>
 8000e66:	6821      	ldr	r1, [r4, #0]
 8000e68:	4884      	ldr	r0, [pc, #528]	; (800107c <HAL_RCC_OscConfig+0x31c>)
 8000e6a:	4001      	ands	r1, r0
 8000e6c:	6021      	str	r1, [r4, #0]
 8000e6e:	6821      	ldr	r1, [r4, #0]
 8000e70:	400b      	ands	r3, r1
 8000e72:	9305      	str	r3, [sp, #20]
 8000e74:	9b05      	ldr	r3, [sp, #20]
 8000e76:	4982      	ldr	r1, [pc, #520]	; (8001080 <HAL_RCC_OscConfig+0x320>)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d1d8      	bne.n	8000e34 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000e82:	f7ff fa15 	bl	80002b0 <HAL_GetTick>
 8000e86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0292      	lsls	r2, r2, #10
 8000e8e:	4213      	tst	r3, r2
 8000e90:	d100      	bne.n	8000e94 <HAL_RCC_OscConfig+0x134>
 8000e92:	e779      	b.n	8000d88 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fa0c 	bl	80002b0 <HAL_GetTick>
 8000e98:	1bc0      	subs	r0, r0, r7
 8000e9a:	2864      	cmp	r0, #100	; 0x64
 8000e9c:	d9f4      	bls.n	8000e88 <HAL_RCC_OscConfig+0x128>
 8000e9e:	e7d6      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000ea0:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea2:	2e04      	cmp	r6, #4
 8000ea4:	d004      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ea6:	2e0c      	cmp	r6, #12
 8000ea8:	d125      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x196>
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d122      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	075b      	lsls	r3, r3, #29
 8000eb4:	d502      	bpl.n	8000ebc <HAL_RCC_OscConfig+0x15c>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d100      	bne.n	8000ebc <HAL_RCC_OscConfig+0x15c>
 8000eba:	e756      	b.n	8000d6a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ebc:	6861      	ldr	r1, [r4, #4]
 8000ebe:	692b      	ldr	r3, [r5, #16]
 8000ec0:	4870      	ldr	r0, [pc, #448]	; (8001084 <HAL_RCC_OscConfig+0x324>)
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	4001      	ands	r1, r0
 8000ec6:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ec8:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	438b      	bics	r3, r1
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ed4:	f7ff ff08 	bl	8000ce8 <HAL_RCC_GetSysClockFreq>
 8000ed8:	68e3      	ldr	r3, [r4, #12]
 8000eda:	4a66      	ldr	r2, [pc, #408]	; (8001074 <HAL_RCC_OscConfig+0x314>)
 8000edc:	061b      	lsls	r3, r3, #24
 8000ede:	0f1b      	lsrs	r3, r3, #28
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	40d8      	lsrs	r0, r3
 8000ee4:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_RCC_OscConfig+0x318>)
 8000ee6:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff f9ad 	bl	8000248 <HAL_InitTick>
      if(status != HAL_OK)
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d100      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x194>
 8000ef2:	e74d      	b.n	8000d90 <HAL_RCC_OscConfig+0x30>
 8000ef4:	e73a      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ef6:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d018      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000efc:	2109      	movs	r1, #9
 8000efe:	438b      	bics	r3, r1
 8000f00:	4313      	orrs	r3, r2
 8000f02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f04:	f7ff f9d4 	bl	80002b0 <HAL_GetTick>
 8000f08:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	4213      	tst	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	6862      	ldr	r2, [r4, #4]
 8000f14:	692b      	ldr	r3, [r5, #16]
 8000f16:	495b      	ldr	r1, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x324>)
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	6063      	str	r3, [r4, #4]
 8000f20:	e736      	b.n	8000d90 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff f9c5 	bl	80002b0 <HAL_GetTick>
 8000f26:	1bc0      	subs	r0, r0, r7
 8000f28:	2802      	cmp	r0, #2
 8000f2a:	d9ee      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1aa>
 8000f2c:	e78f      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4393      	bics	r3, r2
 8000f32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f34:	f7ff f9bc 	bl	80002b0 <HAL_GetTick>
 8000f38:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	4213      	tst	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_RCC_OscConfig+0x1e4>
 8000f42:	e725      	b.n	8000d90 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff f9b4 	bl	80002b0 <HAL_GetTick>
 8000f48:	1bc0      	subs	r0, r0, r7
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9f5      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1da>
 8000f4e:	e77e      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f50:	69eb      	ldr	r3, [r5, #28]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d020      	beq.n	8000f98 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff f9a6 	bl	80002b0 <HAL_GetTick>
 8000f64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4213      	tst	r3, r2
 8000f6e:	d00d      	beq.n	8000f8c <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_RCC_OscConfig+0x310>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f7c:	6862      	ldr	r2, [r4, #4]
 8000f7e:	6a2b      	ldr	r3, [r5, #32]
 8000f80:	0212      	lsls	r2, r2, #8
 8000f82:	061b      	lsls	r3, r3, #24
 8000f84:	0a12      	lsrs	r2, r2, #8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	6063      	str	r3, [r4, #4]
 8000f8a:	e72d      	b.n	8000de8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f8c:	f7ff f990 	bl	80002b0 <HAL_GetTick>
 8000f90:	1bc0      	subs	r0, r0, r7
 8000f92:	2802      	cmp	r0, #2
 8000f94:	d9e7      	bls.n	8000f66 <HAL_RCC_OscConfig+0x206>
 8000f96:	e75a      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_RCC_OscConfig+0x328>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff f986 	bl	80002b0 <HAL_GetTick>
 8000fa4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4213      	tst	r3, r2
 8000fae:	d100      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x252>
 8000fb0:	e71a      	b.n	8000de8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb2:	f7ff f97d 	bl	80002b0 <HAL_GetTick>
 8000fb6:	1bc0      	subs	r0, r0, r7
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9f4      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x246>
 8000fbc:	e747      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fbe:	696a      	ldr	r2, [r5, #20]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d010      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000fc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fcc:	f7ff f970 	bl	80002b0 <HAL_GetTick>
 8000fd0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fd6:	4213      	tst	r3, r2
 8000fd8:	d000      	beq.n	8000fdc <HAL_RCC_OscConfig+0x27c>
 8000fda:	e709      	b.n	8000df0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff f968 	bl	80002b0 <HAL_GetTick>
 8000fe0:	1bc0      	subs	r0, r0, r7
 8000fe2:	2802      	cmp	r0, #2
 8000fe4:	d9f5      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x272>
 8000fe6:	e732      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000fe8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000fea:	439a      	bics	r2, r3
 8000fec:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fee:	f7ff f95f 	bl	80002b0 <HAL_GetTick>
 8000ff2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ff8:	4213      	tst	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x29e>
 8000ffc:	e6f8      	b.n	8000df0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ffe:	f7ff f957 	bl	80002b0 <HAL_GetTick>
 8001002:	1bc0      	subs	r0, r0, r7
 8001004:	2802      	cmp	r0, #2
 8001006:	d9f5      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x294>
 8001008:	e721      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800100c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001010:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001012:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001014:	421a      	tst	r2, r3
 8001016:	d104      	bne.n	8001022 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800101a:	4313      	orrs	r3, r2
 800101c:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800101e:	2301      	movs	r3, #1
 8001020:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	4f19      	ldr	r7, [pc, #100]	; (800108c <HAL_RCC_OscConfig+0x32c>)
 8001026:	0052      	lsls	r2, r2, #1
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4213      	tst	r3, r2
 800102c:	d008      	beq.n	8001040 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	68ab      	ldr	r3, [r5, #8]
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	4293      	cmp	r3, r2
 8001036:	d12b      	bne.n	8001090 <HAL_RCC_OscConfig+0x330>
 8001038:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800103a:	4313      	orrs	r3, r2
 800103c:	6523      	str	r3, [r4, #80]	; 0x50
 800103e:	e04c      	b.n	80010da <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	0052      	lsls	r2, r2, #1
 8001046:	4313      	orrs	r3, r2
 8001048:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800104a:	f7ff f931 	bl	80002b0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001052:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001054:	9303      	str	r3, [sp, #12]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	9a03      	ldr	r2, [sp, #12]
 800105a:	4213      	tst	r3, r2
 800105c:	d1e7      	bne.n	800102e <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105e:	f7ff f927 	bl	80002b0 <HAL_GetTick>
 8001062:	9b02      	ldr	r3, [sp, #8]
 8001064:	1ac0      	subs	r0, r0, r3
 8001066:	2864      	cmp	r0, #100	; 0x64
 8001068:	d9f5      	bls.n	8001056 <HAL_RCC_OscConfig+0x2f6>
 800106a:	e6f0      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
 800106c:	40021000 	.word	0x40021000
 8001070:	ffff1fff 	.word	0xffff1fff
 8001074:	08002df4 	.word	0x08002df4
 8001078:	20000110 	.word	0x20000110
 800107c:	fffeffff 	.word	0xfffeffff
 8001080:	fffbffff 	.word	0xfffbffff
 8001084:	ffffe0ff 	.word	0xffffe0ff
 8001088:	fffffeff 	.word	0xfffffeff
 800108c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	2b00      	cmp	r3, #0
 8001092:	d116      	bne.n	80010c2 <HAL_RCC_OscConfig+0x362>
 8001094:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001096:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 8001098:	4013      	ands	r3, r2
 800109a:	6523      	str	r3, [r4, #80]	; 0x50
 800109c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800109e:	4a6b      	ldr	r2, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x4ec>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010a4:	f7ff f904 	bl	80002b0 <HAL_GetTick>
 80010a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4213      	tst	r3, r2
 80010b2:	d02a      	beq.n	800110a <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff f8fc 	bl	80002b0 <HAL_GetTick>
 80010b8:	4b65      	ldr	r3, [pc, #404]	; (8001250 <HAL_RCC_OscConfig+0x4f0>)
 80010ba:	1bc0      	subs	r0, r0, r7
 80010bc:	4298      	cmp	r0, r3
 80010be:	d9f4      	bls.n	80010aa <HAL_RCC_OscConfig+0x34a>
 80010c0:	e6c5      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c2:	21a0      	movs	r1, #160	; 0xa0
 80010c4:	00c9      	lsls	r1, r1, #3
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d10b      	bne.n	80010e2 <HAL_RCC_OscConfig+0x382>
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6523      	str	r3, [r4, #80]	; 0x50
 80010d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010da:	f7ff f8e9 	bl	80002b0 <HAL_GetTick>
 80010de:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010e0:	e00e      	b.n	8001100 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010e4:	4a58      	ldr	r2, [pc, #352]	; (8001248 <HAL_RCC_OscConfig+0x4e8>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	6523      	str	r3, [r4, #80]	; 0x50
 80010ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80010ec:	4a57      	ldr	r2, [pc, #348]	; (800124c <HAL_RCC_OscConfig+0x4ec>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	e7a4      	b.n	800103c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff f8dd 	bl	80002b0 <HAL_GetTick>
 80010f6:	4b56      	ldr	r3, [pc, #344]	; (8001250 <HAL_RCC_OscConfig+0x4f0>)
 80010f8:	1bc0      	subs	r0, r0, r7
 80010fa:	4298      	cmp	r0, r3
 80010fc:	d900      	bls.n	8001100 <HAL_RCC_OscConfig+0x3a0>
 80010fe:	e6a6      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4213      	tst	r3, r2
 8001108:	d0f3      	beq.n	80010f2 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 800110a:	9b01      	ldr	r3, [sp, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d000      	beq.n	8001112 <HAL_RCC_OscConfig+0x3b2>
 8001110:	e672      	b.n	8000df8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001114:	4a4f      	ldr	r2, [pc, #316]	; (8001254 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	4013      	ands	r3, r2
 8001118:	63a3      	str	r3, [r4, #56]	; 0x38
 800111a:	e66d      	b.n	8000df8 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800111c:	69a9      	ldr	r1, [r5, #24]
 800111e:	2301      	movs	r3, #1
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_RCC_OscConfig+0x4f8>)
 8001122:	2900      	cmp	r1, #0
 8001124:	d018      	beq.n	8001158 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 8001126:	68a1      	ldr	r1, [r4, #8]
 8001128:	4319      	orrs	r1, r3
 800112a:	60a1      	str	r1, [r4, #8]
 800112c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800112e:	430b      	orrs	r3, r1
 8001130:	6363      	str	r3, [r4, #52]	; 0x34
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	6a11      	ldr	r1, [r2, #32]
 8001136:	019b      	lsls	r3, r3, #6
 8001138:	430b      	orrs	r3, r1
 800113a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800113c:	f7ff f8b8 	bl	80002b0 <HAL_GetTick>
 8001140:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001142:	2202      	movs	r2, #2
 8001144:	68a3      	ldr	r3, [r4, #8]
 8001146:	4213      	tst	r3, r2
 8001148:	d000      	beq.n	800114c <HAL_RCC_OscConfig+0x3ec>
 800114a:	e659      	b.n	8000e00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114c:	f7ff f8b0 	bl	80002b0 <HAL_GetTick>
 8001150:	1bc0      	subs	r0, r0, r7
 8001152:	2802      	cmp	r0, #2
 8001154:	d9f5      	bls.n	8001142 <HAL_RCC_OscConfig+0x3e2>
 8001156:	e67a      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8001158:	68a1      	ldr	r1, [r4, #8]
 800115a:	4399      	bics	r1, r3
 800115c:	60a1      	str	r1, [r4, #8]
 800115e:	6a13      	ldr	r3, [r2, #32]
 8001160:	493e      	ldr	r1, [pc, #248]	; (800125c <HAL_RCC_OscConfig+0x4fc>)
 8001162:	400b      	ands	r3, r1
 8001164:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001166:	f7ff f8a3 	bl	80002b0 <HAL_GetTick>
 800116a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800116c:	2202      	movs	r2, #2
 800116e:	68a3      	ldr	r3, [r4, #8]
 8001170:	4213      	tst	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCC_OscConfig+0x416>
 8001174:	e644      	b.n	8000e00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001176:	f7ff f89b 	bl	80002b0 <HAL_GetTick>
 800117a:	1bc0      	subs	r0, r0, r7
 800117c:	2802      	cmp	r0, #2
 800117e:	d9f5      	bls.n	800116c <HAL_RCC_OscConfig+0x40c>
 8001180:	e665      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001182:	2e0c      	cmp	r6, #12
 8001184:	d043      	beq.n	800120e <HAL_RCC_OscConfig+0x4ae>
 8001186:	4a36      	ldr	r2, [pc, #216]	; (8001260 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	2b02      	cmp	r3, #2
 800118a:	d12e      	bne.n	80011ea <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 800118c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800118e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001190:	4013      	ands	r3, r2
 8001192:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001194:	f7ff f88c 	bl	80002b0 <HAL_GetTick>
 8001198:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800119a:	04b6      	lsls	r6, r6, #18
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	4233      	tst	r3, r6
 80011a0:	d11d      	bne.n	80011de <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80011a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011a6:	68e2      	ldr	r2, [r4, #12]
 80011a8:	430b      	orrs	r3, r1
 80011aa:	492e      	ldr	r1, [pc, #184]	; (8001264 <HAL_RCC_OscConfig+0x504>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	4313      	orrs	r3, r2
 80011b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011b2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	045b      	lsls	r3, r3, #17
 80011be:	4313      	orrs	r3, r2
 80011c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011c2:	f7ff f875 	bl	80002b0 <HAL_GetTick>
 80011c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011c8:	04ad      	lsls	r5, r5, #18
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	422b      	tst	r3, r5
 80011ce:	d000      	beq.n	80011d2 <HAL_RCC_OscConfig+0x472>
 80011d0:	e61a      	b.n	8000e08 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d2:	f7ff f86d 	bl	80002b0 <HAL_GetTick>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	2802      	cmp	r0, #2
 80011da:	d9f6      	bls.n	80011ca <HAL_RCC_OscConfig+0x46a>
 80011dc:	e637      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff f867 	bl	80002b0 <HAL_GetTick>
 80011e2:	1bc0      	subs	r0, r0, r7
 80011e4:	2802      	cmp	r0, #2
 80011e6:	d9d9      	bls.n	800119c <HAL_RCC_OscConfig+0x43c>
 80011e8:	e631      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80011ea:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011ec:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4013      	ands	r3, r2
 80011f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011f2:	f7ff f85d 	bl	80002b0 <HAL_GetTick>
 80011f6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011f8:	04ad      	lsls	r5, r5, #18
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	422b      	tst	r3, r5
 80011fe:	d100      	bne.n	8001202 <HAL_RCC_OscConfig+0x4a2>
 8001200:	e602      	b.n	8000e08 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff f855 	bl	80002b0 <HAL_GetTick>
 8001206:	1b80      	subs	r0, r0, r6
 8001208:	2802      	cmp	r0, #2
 800120a:	d9f6      	bls.n	80011fa <HAL_RCC_OscConfig+0x49a>
 800120c:	e61f      	b.n	8000e4e <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 800120e:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001210:	2b01      	cmp	r3, #1
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x4b6>
 8001214:	e5aa      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001216:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001218:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800121c:	0252      	lsls	r2, r2, #9
 800121e:	401a      	ands	r2, r3
        return HAL_ERROR;
 8001220:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001222:	428a      	cmp	r2, r1
 8001224:	d000      	beq.n	8001228 <HAL_RCC_OscConfig+0x4c8>
 8001226:	e5a1      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001228:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800122c:	0392      	lsls	r2, r2, #14
 800122e:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001230:	428a      	cmp	r2, r1
 8001232:	d000      	beq.n	8001236 <HAL_RCC_OscConfig+0x4d6>
 8001234:	e59a      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001236:	20c0      	movs	r0, #192	; 0xc0
 8001238:	0400      	lsls	r0, r0, #16
 800123a:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800123c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800123e:	1a18      	subs	r0, r3, r0
 8001240:	1e43      	subs	r3, r0, #1
 8001242:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001244:	b2c0      	uxtb	r0, r0
 8001246:	e591      	b.n	8000d6c <HAL_RCC_OscConfig+0xc>
 8001248:	fffffeff 	.word	0xfffffeff
 800124c:	fffffbff 	.word	0xfffffbff
 8001250:	00001388 	.word	0x00001388
 8001254:	efffffff 	.word	0xefffffff
 8001258:	40010000 	.word	0x40010000
 800125c:	ffffdfff 	.word	0xffffdfff
 8001260:	feffffff 	.word	0xfeffffff
 8001264:	ff02ffff 	.word	0xff02ffff

08001268 <HAL_RCC_ClockConfig>:
{
 8001268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800126a:	1e06      	subs	r6, r0, #0
 800126c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	2201      	movs	r2, #1
 8001276:	4c51      	ldr	r4, [pc, #324]	; (80013bc <HAL_RCC_ClockConfig+0x154>)
 8001278:	9901      	ldr	r1, [sp, #4]
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	4013      	ands	r3, r2
 800127e:	428b      	cmp	r3, r1
 8001280:	d327      	bcc.n	80012d2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001282:	6832      	ldr	r2, [r6, #0]
 8001284:	0793      	lsls	r3, r2, #30
 8001286:	d42f      	bmi.n	80012e8 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001288:	07d3      	lsls	r3, r2, #31
 800128a:	d435      	bmi.n	80012f8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800128c:	2301      	movs	r3, #1
 800128e:	6822      	ldr	r2, [r4, #0]
 8001290:	9901      	ldr	r1, [sp, #4]
 8001292:	401a      	ands	r2, r3
 8001294:	4291      	cmp	r1, r2
 8001296:	d200      	bcs.n	800129a <HAL_RCC_ClockConfig+0x32>
 8001298:	e081      	b.n	800139e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129a:	6832      	ldr	r2, [r6, #0]
 800129c:	4c48      	ldr	r4, [pc, #288]	; (80013c0 <HAL_RCC_ClockConfig+0x158>)
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d500      	bpl.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
 80012a2:	e084      	b.n	80013ae <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a4:	0713      	lsls	r3, r2, #28
 80012a6:	d506      	bpl.n	80012b6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012a8:	68e2      	ldr	r2, [r4, #12]
 80012aa:	6933      	ldr	r3, [r6, #16]
 80012ac:	4945      	ldr	r1, [pc, #276]	; (80013c4 <HAL_RCC_ClockConfig+0x15c>)
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	400a      	ands	r2, r1
 80012b2:	4313      	orrs	r3, r2
 80012b4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b6:	f7ff fd17 	bl	8000ce8 <HAL_RCC_GetSysClockFreq>
 80012ba:	68e3      	ldr	r3, [r4, #12]
 80012bc:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_RCC_ClockConfig+0x160>)
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	0f1b      	lsrs	r3, r3, #28
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	40d8      	lsrs	r0, r3
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_ClockConfig+0x164>)
 80012c8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7fe ffbc 	bl	8000248 <HAL_InitTick>
 80012d0:	e7cf      	b.n	8001272 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	9901      	ldr	r1, [sp, #4]
 80012d6:	4393      	bics	r3, r2
 80012d8:	430b      	orrs	r3, r1
 80012da:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	4013      	ands	r3, r2
 80012e0:	9a01      	ldr	r2, [sp, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d1c4      	bne.n	8001270 <HAL_RCC_ClockConfig+0x8>
 80012e6:	e7cc      	b.n	8001282 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	20f0      	movs	r0, #240	; 0xf0
 80012ea:	4935      	ldr	r1, [pc, #212]	; (80013c0 <HAL_RCC_ClockConfig+0x158>)
 80012ec:	68cb      	ldr	r3, [r1, #12]
 80012ee:	4383      	bics	r3, r0
 80012f0:	68b0      	ldr	r0, [r6, #8]
 80012f2:	4303      	orrs	r3, r0
 80012f4:	60cb      	str	r3, [r1, #12]
 80012f6:	e7c7      	b.n	8001288 <HAL_RCC_ClockConfig+0x20>
 80012f8:	4d31      	ldr	r5, [pc, #196]	; (80013c0 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fe:	2a02      	cmp	r2, #2
 8001300:	d119      	bne.n	8001336 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001302:	039b      	lsls	r3, r3, #14
 8001304:	d5b4      	bpl.n	8001270 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001306:	2103      	movs	r1, #3
 8001308:	68eb      	ldr	r3, [r5, #12]
 800130a:	438b      	bics	r3, r1
 800130c:	4313      	orrs	r3, r2
 800130e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001310:	f7fe ffce 	bl	80002b0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001314:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001316:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001318:	2b02      	cmp	r3, #2
 800131a:	d119      	bne.n	8001350 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800131c:	220c      	movs	r2, #12
 800131e:	68eb      	ldr	r3, [r5, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	2b08      	cmp	r3, #8
 8001324:	d0b2      	beq.n	800128c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001326:	f7fe ffc3 	bl	80002b0 <HAL_GetTick>
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_RCC_ClockConfig+0x168>)
 800132c:	1bc0      	subs	r0, r0, r7
 800132e:	4298      	cmp	r0, r3
 8001330:	d9f4      	bls.n	800131c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001332:	2003      	movs	r0, #3
 8001334:	e79d      	b.n	8001272 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001336:	2a03      	cmp	r2, #3
 8001338:	d102      	bne.n	8001340 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800133a:	019b      	lsls	r3, r3, #6
 800133c:	d4e3      	bmi.n	8001306 <HAL_RCC_ClockConfig+0x9e>
 800133e:	e797      	b.n	8001270 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001340:	2a01      	cmp	r2, #1
 8001342:	d102      	bne.n	800134a <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001344:	075b      	lsls	r3, r3, #29
 8001346:	d4de      	bmi.n	8001306 <HAL_RCC_ClockConfig+0x9e>
 8001348:	e792      	b.n	8001270 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800134a:	059b      	lsls	r3, r3, #22
 800134c:	d4db      	bmi.n	8001306 <HAL_RCC_ClockConfig+0x9e>
 800134e:	e78f      	b.n	8001270 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001350:	2b03      	cmp	r3, #3
 8001352:	d10b      	bne.n	800136c <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	220c      	movs	r2, #12
 8001356:	68eb      	ldr	r3, [r5, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	4293      	cmp	r3, r2
 800135c:	d096      	beq.n	800128c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7fe ffa7 	bl	80002b0 <HAL_GetTick>
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_ClockConfig+0x168>)
 8001364:	1bc0      	subs	r0, r0, r7
 8001366:	4298      	cmp	r0, r3
 8001368:	d9f4      	bls.n	8001354 <HAL_RCC_ClockConfig+0xec>
 800136a:	e7e2      	b.n	8001332 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800136c:	2b01      	cmp	r3, #1
 800136e:	d010      	beq.n	8001392 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001370:	220c      	movs	r2, #12
 8001372:	68eb      	ldr	r3, [r5, #12]
 8001374:	4213      	tst	r3, r2
 8001376:	d089      	beq.n	800128c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001378:	f7fe ff9a 	bl	80002b0 <HAL_GetTick>
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_RCC_ClockConfig+0x168>)
 800137e:	1bc0      	subs	r0, r0, r7
 8001380:	4298      	cmp	r0, r3
 8001382:	d9f5      	bls.n	8001370 <HAL_RCC_ClockConfig+0x108>
 8001384:	e7d5      	b.n	8001332 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001386:	f7fe ff93 	bl	80002b0 <HAL_GetTick>
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_RCC_ClockConfig+0x168>)
 800138c:	1bc0      	subs	r0, r0, r7
 800138e:	4298      	cmp	r0, r3
 8001390:	d8cf      	bhi.n	8001332 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001392:	220c      	movs	r2, #12
 8001394:	68eb      	ldr	r3, [r5, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b04      	cmp	r3, #4
 800139a:	d1f4      	bne.n	8001386 <HAL_RCC_ClockConfig+0x11e>
 800139c:	e776      	b.n	800128c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	6822      	ldr	r2, [r4, #0]
 80013a0:	439a      	bics	r2, r3
 80013a2:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	421a      	tst	r2, r3
 80013a8:	d000      	beq.n	80013ac <HAL_RCC_ClockConfig+0x144>
 80013aa:	e761      	b.n	8001270 <HAL_RCC_ClockConfig+0x8>
 80013ac:	e775      	b.n	800129a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ae:	68e3      	ldr	r3, [r4, #12]
 80013b0:	4908      	ldr	r1, [pc, #32]	; (80013d4 <HAL_RCC_ClockConfig+0x16c>)
 80013b2:	400b      	ands	r3, r1
 80013b4:	68f1      	ldr	r1, [r6, #12]
 80013b6:	430b      	orrs	r3, r1
 80013b8:	60e3      	str	r3, [r4, #12]
 80013ba:	e773      	b.n	80012a4 <HAL_RCC_ClockConfig+0x3c>
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	ffffc7ff 	.word	0xffffc7ff
 80013c8:	08002df4 	.word	0x08002df4
 80013cc:	20000110 	.word	0x20000110
 80013d0:	00001388 	.word	0x00001388
 80013d4:	fffff8ff 	.word	0xfffff8ff

080013d8 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80013d8:	2382      	movs	r3, #130	; 0x82
{
 80013da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80013dc:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80013de:	011b      	lsls	r3, r3, #4
{
 80013e0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80013e2:	421a      	tst	r2, r3
 80013e4:	d047      	beq.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013e8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4c5f      	ldr	r4, [pc, #380]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80013ec:	055b      	lsls	r3, r3, #21
 80013ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80013f0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	421a      	tst	r2, r3
 80013f4:	d104      	bne.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013f8:	4313      	orrs	r3, r2
 80013fa:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	2780      	movs	r7, #128	; 0x80
 8001402:	4e5a      	ldr	r6, [pc, #360]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001404:	007f      	lsls	r7, r7, #1
 8001406:	6833      	ldr	r3, [r6, #0]
 8001408:	423b      	tst	r3, r7
 800140a:	d06d      	beq.n	80014e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800140c:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800140e:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001410:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	0392      	lsls	r2, r2, #14
 8001416:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001418:	4010      	ands	r0, r2
 800141a:	4283      	cmp	r3, r0
 800141c:	d103      	bne.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800141e:	68a8      	ldr	r0, [r5, #8]
 8001420:	4002      	ands	r2, r0
 8001422:	4293      	cmp	r3, r2
 8001424:	d009      	beq.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	000a      	movs	r2, r1
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	401a      	ands	r2, r3
 800142e:	429a      	cmp	r2, r3
 8001430:	d103      	bne.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001432:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001436:	039b      	lsls	r3, r3, #14
 8001438:	d466      	bmi.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800143a:	22c0      	movs	r2, #192	; 0xc0
 800143c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800143e:	0292      	lsls	r2, r2, #10
 8001440:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001442:	d162      	bne.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001444:	6869      	ldr	r1, [r5, #4]
 8001446:	23c0      	movs	r3, #192	; 0xc0
 8001448:	000a      	movs	r2, r1
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	401a      	ands	r2, r3
 800144e:	429a      	cmp	r2, r3
 8001450:	d107      	bne.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	4846      	ldr	r0, [pc, #280]	; (8001570 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001456:	4003      	ands	r3, r0
 8001458:	20c0      	movs	r0, #192	; 0xc0
 800145a:	0380      	lsls	r0, r0, #14
 800145c:	4001      	ands	r1, r0
 800145e:	430b      	orrs	r3, r1
 8001460:	6023      	str	r3, [r4, #0]
 8001462:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001464:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001466:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001468:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800146a:	2b01      	cmp	r3, #1
 800146c:	d103      	bne.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001470:	4a40      	ldr	r2, [pc, #256]	; (8001574 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8001472:	4013      	ands	r3, r2
 8001474:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	07da      	lsls	r2, r3, #31
 800147a:	d506      	bpl.n	800148a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800147c:	2003      	movs	r0, #3
 800147e:	493a      	ldr	r1, [pc, #232]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001480:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001482:	4382      	bics	r2, r0
 8001484:	68e8      	ldr	r0, [r5, #12]
 8001486:	4302      	orrs	r2, r0
 8001488:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800148a:	079a      	lsls	r2, r3, #30
 800148c:	d506      	bpl.n	800149c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800148e:	200c      	movs	r0, #12
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001492:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001494:	4382      	bics	r2, r0
 8001496:	6928      	ldr	r0, [r5, #16]
 8001498:	4302      	orrs	r2, r0
 800149a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800149c:	075a      	lsls	r2, r3, #29
 800149e:	d506      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80014a0:	4931      	ldr	r1, [pc, #196]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014a2:	4835      	ldr	r0, [pc, #212]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80014a4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014a6:	4002      	ands	r2, r0
 80014a8:	6968      	ldr	r0, [r5, #20]
 80014aa:	4302      	orrs	r2, r0
 80014ac:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014ae:	071a      	lsls	r2, r3, #28
 80014b0:	d506      	bpl.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014b2:	492d      	ldr	r1, [pc, #180]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014b4:	4831      	ldr	r0, [pc, #196]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80014b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014b8:	4002      	ands	r2, r0
 80014ba:	69a8      	ldr	r0, [r5, #24]
 80014bc:	4302      	orrs	r2, r0
 80014be:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014c0:	065a      	lsls	r2, r3, #25
 80014c2:	d506      	bpl.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014c4:	4928      	ldr	r1, [pc, #160]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014c6:	482e      	ldr	r0, [pc, #184]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80014c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014ca:	4002      	ands	r2, r0
 80014cc:	6a28      	ldr	r0, [r5, #32]
 80014ce:	4302      	orrs	r2, r0
 80014d0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80014d2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	d517      	bpl.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80014d8:	4a23      	ldr	r2, [pc, #140]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014da:	492a      	ldr	r1, [pc, #168]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80014dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80014de:	400b      	ands	r3, r1
 80014e0:	69e9      	ldr	r1, [r5, #28]
 80014e2:	430b      	orrs	r3, r1
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	e00f      	b.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e8:	6833      	ldr	r3, [r6, #0]
 80014ea:	433b      	orrs	r3, r7
 80014ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014ee:	f7fe fedf 	bl	80002b0 <HAL_GetTick>
 80014f2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	6833      	ldr	r3, [r6, #0]
 80014f6:	423b      	tst	r3, r7
 80014f8:	d188      	bne.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7fe fed9 	bl	80002b0 <HAL_GetTick>
 80014fe:	9b01      	ldr	r3, [sp, #4]
 8001500:	1ac0      	subs	r0, r0, r3
 8001502:	2864      	cmp	r0, #100	; 0x64
 8001504:	d9f6      	bls.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
}
 8001508:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800150a:	4011      	ands	r1, r2
 800150c:	428b      	cmp	r3, r1
 800150e:	d002      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001510:	6829      	ldr	r1, [r5, #0]
 8001512:	0689      	lsls	r1, r1, #26
 8001514:	d408      	bmi.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001516:	68a9      	ldr	r1, [r5, #8]
 8001518:	400a      	ands	r2, r1
 800151a:	4293      	cmp	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800151e:	e791      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	051b      	lsls	r3, r3, #20
 8001524:	d400      	bmi.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001526:	e78d      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001528:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800152a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800152c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800152e:	0312      	lsls	r2, r2, #12
 8001530:	4302      	orrs	r2, r0
 8001532:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001534:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001538:	4814      	ldr	r0, [pc, #80]	; (800158c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800153a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800153c:	4002      	ands	r2, r0
 800153e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001540:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001542:	05cb      	lsls	r3, r1, #23
 8001544:	d400      	bmi.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8001546:	e77d      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8001548:	f7fe feb2 	bl	80002b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800154e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001550:	00bf      	lsls	r7, r7, #2
 8001552:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001554:	423b      	tst	r3, r7
 8001556:	d000      	beq.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001558:	e774      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7fe fea9 	bl	80002b0 <HAL_GetTick>
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001560:	1b80      	subs	r0, r0, r6
 8001562:	4298      	cmp	r0, r3
 8001564:	d9f5      	bls.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001566:	e7ce      	b.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001568:	40021000 	.word	0x40021000
 800156c:	40007000 	.word	0x40007000
 8001570:	ffcfffff 	.word	0xffcfffff
 8001574:	efffffff 	.word	0xefffffff
 8001578:	fffff3ff 	.word	0xfffff3ff
 800157c:	ffffcfff 	.word	0xffffcfff
 8001580:	fbffffff 	.word	0xfbffffff
 8001584:	fff3ffff 	.word	0xfff3ffff
 8001588:	fffcffff 	.word	0xfffcffff
 800158c:	fff7ffff 	.word	0xfff7ffff
 8001590:	00001388 	.word	0x00001388

08001594 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001594:	3002      	adds	r0, #2
 8001596:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001598:	4a02      	ldr	r2, [pc, #8]	; (80015a4 <USB_EnableGlobalInt+0x10>)
 800159a:	4313      	orrs	r3, r2
 800159c:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 800159e:	2000      	movs	r0, #0
 80015a0:	4770      	bx	lr
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	0000bf80 	.word	0x0000bf80

080015a8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80015a8:	3002      	adds	r0, #2
 80015aa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80015ac:	4a02      	ldr	r2, [pc, #8]	; (80015b8 <USB_DisableGlobalInt+0x10>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 80015b2:	2000      	movs	r0, #0
 80015b4:	4770      	bx	lr
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	0000407f 	.word	0x0000407f

080015bc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80015bc:	b084      	sub	sp, #16
 80015be:	9303      	str	r3, [sp, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80015c0:	2301      	movs	r3, #1
{
 80015c2:	9202      	str	r2, [sp, #8]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80015c4:	2200      	movs	r2, #0
{
 80015c6:	9101      	str	r1, [sp, #4]
  USBx->CNTR = USB_CNTR_FRES;
 80015c8:	1c81      	adds	r1, r0, #2
 80015ca:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80015cc:	1d83      	adds	r3, r0, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80015ce:	3050      	adds	r0, #80	; 0x50
  USBx->CNTR = 0;
 80015d0:	87ca      	strh	r2, [r1, #62]	; 0x3e
  USBx->ISTR = 0;
 80015d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 80015d4:	8002      	strh	r2, [r0, #0]
  USBx->CNTR |= winterruptmask;
 80015d6:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USB_DevInit+0x28>)
 80015da:	4303      	orrs	r3, r0
 80015dc:	87cb      	strh	r3, [r1, #62]	; 0x3e

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80015de:	0010      	movs	r0, r2
 80015e0:	b004      	add	sp, #16
 80015e2:	4770      	bx	lr
 80015e4:	0000bf80 	.word	0x0000bf80

080015e8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80015e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 80015ea:	2501      	movs	r5, #1
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80015ec:	780c      	ldrb	r4, [r1, #0]
{
 80015ee:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80015f0:	00a4      	lsls	r4, r4, #2
 80015f2:	1904      	adds	r4, r0, r4
 80015f4:	8820      	ldrh	r0, [r4, #0]
 80015f6:	4a8f      	ldr	r2, [pc, #572]	; (8001834 <USB_ActivateEndpoint+0x24c>)
 80015f8:	4002      	ands	r2, r0
  switch (ep->type)
 80015fa:	78c8      	ldrb	r0, [r1, #3]
      ret = HAL_ERROR;
 80015fc:	9500      	str	r5, [sp, #0]
  switch (ep->type)
 80015fe:	2803      	cmp	r0, #3
 8001600:	d808      	bhi.n	8001614 <USB_ActivateEndpoint+0x2c>
 8001602:	f7fe fd81 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001606:	4e02      	.short	0x4e02
 8001608:	4b05      	.short	0x4b05
      wEpRegVal |= USB_EP_CONTROL;
 800160a:	2080      	movs	r0, #128	; 0x80
 800160c:	0080      	lsls	r0, r0, #2
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800160e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8001610:	2000      	movs	r0, #0
 8001612:	9000      	str	r0, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8001614:	4888      	ldr	r0, [pc, #544]	; (8001838 <USB_ActivateEndpoint+0x250>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001616:	4f89      	ldr	r7, [pc, #548]	; (800183c <USB_ActivateEndpoint+0x254>)
  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8001618:	4302      	orrs	r2, r0
 800161a:	b292      	uxth	r2, r2
 800161c:	8022      	strh	r2, [r4, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800161e:	780d      	ldrb	r5, [r1, #0]
 8001620:	00ac      	lsls	r4, r5, #2
 8001622:	191c      	adds	r4, r3, r4
 8001624:	8822      	ldrh	r2, [r4, #0]
 8001626:	403a      	ands	r2, r7
 8001628:	432a      	orrs	r2, r5
 800162a:	4302      	orrs	r2, r0
 800162c:	b292      	uxth	r2, r2
 800162e:	8022      	strh	r2, [r4, #0]

  if (ep->doublebuffer == 0U)
 8001630:	7b0d      	ldrb	r5, [r1, #12]
 8001632:	780a      	ldrb	r2, [r1, #0]
 8001634:	003c      	movs	r4, r7
 8001636:	2d00      	cmp	r5, #0
 8001638:	d000      	beq.n	800163c <USB_ActivateEndpoint+0x54>
 800163a:	e06f      	b.n	800171c <USB_ActivateEndpoint+0x134>
  {
    if (ep->is_in != 0U)
 800163c:	784d      	ldrb	r5, [r1, #1]
 800163e:	001e      	movs	r6, r3
 8001640:	46ac      	mov	ip, r5
 8001642:	88cd      	ldrh	r5, [r1, #6]
 8001644:	3650      	adds	r6, #80	; 0x50
 8001646:	9501      	str	r5, [sp, #4]
 8001648:	4665      	mov	r5, ip
 800164a:	2d00      	cmp	r5, #0
 800164c:	d02b      	beq.n	80016a6 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800164e:	8834      	ldrh	r4, [r6, #0]
 8001650:	00d2      	lsls	r2, r2, #3
 8001652:	189a      	adds	r2, r3, r2
 8001654:	1912      	adds	r2, r2, r4
 8001656:	2480      	movs	r4, #128	; 0x80
 8001658:	00e4      	lsls	r4, r4, #3
 800165a:	1912      	adds	r2, r2, r4
 800165c:	2401      	movs	r4, #1
 800165e:	9d01      	ldr	r5, [sp, #4]
 8001660:	43a5      	bics	r5, r4
 8001662:	8015      	strh	r5, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001664:	780a      	ldrb	r2, [r1, #0]
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	189a      	adds	r2, r3, r2
 800166a:	8814      	ldrh	r4, [r2, #0]
 800166c:	0664      	lsls	r4, r4, #25
 800166e:	d504      	bpl.n	800167a <USB_ActivateEndpoint+0x92>
 8001670:	8814      	ldrh	r4, [r2, #0]
 8001672:	4027      	ands	r7, r4
 8001674:	4c72      	ldr	r4, [pc, #456]	; (8001840 <USB_ActivateEndpoint+0x258>)
 8001676:	4327      	orrs	r7, r4
 8001678:	8017      	strh	r7, [r2, #0]
 800167a:	780a      	ldrb	r2, [r1, #0]

      if (ep->type != EP_TYPE_ISOC)
 800167c:	78cc      	ldrb	r4, [r1, #3]
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	189b      	adds	r3, r3, r2
 8001682:	4970      	ldr	r1, [pc, #448]	; (8001844 <USB_ActivateEndpoint+0x25c>)
 8001684:	881a      	ldrh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8001686:	2c01      	cmp	r4, #1
 8001688:	d100      	bne.n	800168c <USB_ActivateEndpoint+0xa4>
 800168a:	e09d      	b.n	80017c8 <USB_ActivateEndpoint+0x1e0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800168c:	4011      	ands	r1, r2
 800168e:	2220      	movs	r2, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001690:	404a      	eors	r2, r1
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001692:	4310      	orrs	r0, r2
 8001694:	b280      	uxth	r0, r0
 8001696:	8018      	strh	r0, [r3, #0]
    }
  }

  return ret;
}
 8001698:	9800      	ldr	r0, [sp, #0]
 800169a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 800169c:	20c0      	movs	r0, #192	; 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800169e:	00c0      	lsls	r0, r0, #3
 80016a0:	e7b5      	b.n	800160e <USB_ActivateEndpoint+0x26>
 80016a2:	2080      	movs	r0, #128	; 0x80
 80016a4:	e7fb      	b.n	800169e <USB_ActivateEndpoint+0xb6>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80016a6:	8837      	ldrh	r7, [r6, #0]
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	19d2      	adds	r2, r2, r7
 80016ae:	2701      	movs	r7, #1
 80016b0:	4d65      	ldr	r5, [pc, #404]	; (8001848 <USB_ActivateEndpoint+0x260>)
 80016b2:	1952      	adds	r2, r2, r5
 80016b4:	9d01      	ldr	r5, [sp, #4]
 80016b6:	43bd      	bics	r5, r7
 80016b8:	8015      	strh	r5, [r2, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80016ba:	780a      	ldrb	r2, [r1, #0]
 80016bc:	8835      	ldrh	r5, [r6, #0]
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	4e62      	ldr	r6, [pc, #392]	; (800184c <USB_ActivateEndpoint+0x264>)
 80016c2:	18d2      	adds	r2, r2, r3
 80016c4:	1992      	adds	r2, r2, r6
 80016c6:	1952      	adds	r2, r2, r5
 80016c8:	690d      	ldr	r5, [r1, #16]
 80016ca:	2d00      	cmp	r5, #0
 80016cc:	d106      	bne.n	80016dc <USB_ActivateEndpoint+0xf4>
 80016ce:	8815      	ldrh	r5, [r2, #0]
 80016d0:	4e5f      	ldr	r6, [pc, #380]	; (8001850 <USB_ActivateEndpoint+0x268>)
 80016d2:	402e      	ands	r6, r5
 80016d4:	4d5f      	ldr	r5, [pc, #380]	; (8001854 <USB_ActivateEndpoint+0x26c>)
 80016d6:	4335      	orrs	r5, r6
 80016d8:	8015      	strh	r5, [r2, #0]
 80016da:	e006      	b.n	80016ea <USB_ActivateEndpoint+0x102>
 80016dc:	2d3d      	cmp	r5, #61	; 0x3d
 80016de:	d818      	bhi.n	8001712 <USB_ActivateEndpoint+0x12a>
 80016e0:	086e      	lsrs	r6, r5, #1
 80016e2:	402f      	ands	r7, r5
 80016e4:	19f6      	adds	r6, r6, r7
 80016e6:	02b6      	lsls	r6, r6, #10
 80016e8:	8016      	strh	r6, [r2, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80016ea:	780a      	ldrb	r2, [r1, #0]
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	189a      	adds	r2, r3, r2
 80016f0:	8815      	ldrh	r5, [r2, #0]
 80016f2:	046d      	lsls	r5, r5, #17
 80016f4:	d504      	bpl.n	8001700 <USB_ActivateEndpoint+0x118>
 80016f6:	8815      	ldrh	r5, [r2, #0]
 80016f8:	402c      	ands	r4, r5
 80016fa:	4d57      	ldr	r5, [pc, #348]	; (8001858 <USB_ActivateEndpoint+0x270>)
 80016fc:	432c      	orrs	r4, r5
 80016fe:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001700:	780a      	ldrb	r2, [r1, #0]
 8001702:	4956      	ldr	r1, [pc, #344]	; (800185c <USB_ActivateEndpoint+0x274>)
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	189b      	adds	r3, r3, r2
 8001708:	881a      	ldrh	r2, [r3, #0]
 800170a:	4011      	ands	r1, r2
 800170c:	22c0      	movs	r2, #192	; 0xc0
 800170e:	0192      	lsls	r2, r2, #6
 8001710:	e7be      	b.n	8001690 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001712:	096d      	lsrs	r5, r5, #5
 8001714:	4f4f      	ldr	r7, [pc, #316]	; (8001854 <USB_ActivateEndpoint+0x26c>)
 8001716:	02ad      	lsls	r5, r5, #10
 8001718:	433d      	orrs	r5, r7
 800171a:	e7dd      	b.n	80016d8 <USB_ActivateEndpoint+0xf0>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	189a      	adds	r2, r3, r2
 8001720:	8815      	ldrh	r5, [r2, #0]
 8001722:	4e4f      	ldr	r6, [pc, #316]	; (8001860 <USB_ActivateEndpoint+0x278>)
 8001724:	403d      	ands	r5, r7
 8001726:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001728:	001e      	movs	r6, r3
    PCD_SET_EP_DBUF(USBx, ep->num);
 800172a:	8015      	strh	r5, [r2, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800172c:	780a      	ldrb	r2, [r1, #0]
 800172e:	3650      	adds	r6, #80	; 0x50
 8001730:	8835      	ldrh	r5, [r6, #0]
 8001732:	00d2      	lsls	r2, r2, #3
 8001734:	18d2      	adds	r2, r2, r3
 8001736:	1952      	adds	r2, r2, r5
 8001738:	2580      	movs	r5, #128	; 0x80
 800173a:	00ed      	lsls	r5, r5, #3
 800173c:	1952      	adds	r2, r2, r5
 800173e:	2501      	movs	r5, #1
 8001740:	890f      	ldrh	r7, [r1, #8]
 8001742:	43af      	bics	r7, r5
 8001744:	8017      	strh	r7, [r2, #0]
 8001746:	780a      	ldrb	r2, [r1, #0]
 8001748:	8836      	ldrh	r6, [r6, #0]
 800174a:	00d2      	lsls	r2, r2, #3
 800174c:	18d2      	adds	r2, r2, r3
 800174e:	1992      	adds	r2, r2, r6
 8001750:	4e3d      	ldr	r6, [pc, #244]	; (8001848 <USB_ActivateEndpoint+0x260>)
 8001752:	1992      	adds	r2, r2, r6
 8001754:	894e      	ldrh	r6, [r1, #10]
 8001756:	43ae      	bics	r6, r5
 8001758:	8016      	strh	r6, [r2, #0]
 800175a:	4e3a      	ldr	r6, [pc, #232]	; (8001844 <USB_ActivateEndpoint+0x25c>)
 800175c:	780a      	ldrb	r2, [r1, #0]
 800175e:	46b4      	mov	ip, r6
 8001760:	2680      	movs	r6, #128	; 0x80
    if (ep->is_in == 0U)
 8001762:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	01f6      	lsls	r6, r6, #7
 8001768:	189a      	adds	r2, r3, r2
    if (ep->is_in == 0U)
 800176a:	2d00      	cmp	r5, #0
 800176c:	d12e      	bne.n	80017cc <USB_ActivateEndpoint+0x1e4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800176e:	8815      	ldrh	r5, [r2, #0]
 8001770:	4235      	tst	r5, r6
 8001772:	d004      	beq.n	800177e <USB_ActivateEndpoint+0x196>
 8001774:	8815      	ldrh	r5, [r2, #0]
 8001776:	4e38      	ldr	r6, [pc, #224]	; (8001858 <USB_ActivateEndpoint+0x270>)
 8001778:	4025      	ands	r5, r4
 800177a:	4335      	orrs	r5, r6
 800177c:	8015      	strh	r5, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800177e:	780a      	ldrb	r2, [r1, #0]
 8001780:	4e38      	ldr	r6, [pc, #224]	; (8001864 <USB_ActivateEndpoint+0x27c>)
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	189a      	adds	r2, r3, r2
 8001786:	8815      	ldrh	r5, [r2, #0]
 8001788:	066d      	lsls	r5, r5, #25
 800178a:	d504      	bpl.n	8001796 <USB_ActivateEndpoint+0x1ae>
 800178c:	8815      	ldrh	r5, [r2, #0]
 800178e:	4025      	ands	r5, r4
 8001790:	4335      	orrs	r5, r6
 8001792:	b2ad      	uxth	r5, r5
 8001794:	8015      	strh	r5, [r2, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8001796:	780a      	ldrb	r2, [r1, #0]
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	189a      	adds	r2, r3, r2
 800179c:	8815      	ldrh	r5, [r2, #0]
 800179e:	402c      	ands	r4, r5
 80017a0:	4326      	orrs	r6, r4
 80017a2:	b2b6      	uxth	r6, r6
 80017a4:	8016      	strh	r6, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017a6:	780c      	ldrb	r4, [r1, #0]
 80017a8:	4a2c      	ldr	r2, [pc, #176]	; (800185c <USB_ActivateEndpoint+0x274>)
 80017aa:	00a4      	lsls	r4, r4, #2
 80017ac:	191c      	adds	r4, r3, r4
 80017ae:	8825      	ldrh	r5, [r4, #0]
 80017b0:	4015      	ands	r5, r2
 80017b2:	22c0      	movs	r2, #192	; 0xc0
 80017b4:	0192      	lsls	r2, r2, #6
 80017b6:	406a      	eors	r2, r5
 80017b8:	4302      	orrs	r2, r0
 80017ba:	b292      	uxth	r2, r2
 80017bc:	8022      	strh	r2, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80017be:	780a      	ldrb	r2, [r1, #0]
 80017c0:	4661      	mov	r1, ip
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	881a      	ldrh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80017c8:	400a      	ands	r2, r1
 80017ca:	e762      	b.n	8001692 <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017cc:	8817      	ldrh	r7, [r2, #0]
 80017ce:	4d26      	ldr	r5, [pc, #152]	; (8001868 <USB_ActivateEndpoint+0x280>)
 80017d0:	4237      	tst	r7, r6
 80017d2:	d004      	beq.n	80017de <USB_ActivateEndpoint+0x1f6>
 80017d4:	8816      	ldrh	r6, [r2, #0]
 80017d6:	4026      	ands	r6, r4
 80017d8:	432e      	orrs	r6, r5
 80017da:	b2b6      	uxth	r6, r6
 80017dc:	8016      	strh	r6, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80017de:	780a      	ldrb	r2, [r1, #0]
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	189a      	adds	r2, r3, r2
 80017e4:	8816      	ldrh	r6, [r2, #0]
 80017e6:	0676      	lsls	r6, r6, #25
 80017e8:	d504      	bpl.n	80017f4 <USB_ActivateEndpoint+0x20c>
 80017ea:	8816      	ldrh	r6, [r2, #0]
 80017ec:	4f14      	ldr	r7, [pc, #80]	; (8001840 <USB_ActivateEndpoint+0x258>)
 80017ee:	4026      	ands	r6, r4
 80017f0:	433e      	orrs	r6, r7
 80017f2:	8016      	strh	r6, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80017f4:	780a      	ldrb	r2, [r1, #0]
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	189a      	adds	r2, r3, r2
 80017fa:	8816      	ldrh	r6, [r2, #0]
 80017fc:	4034      	ands	r4, r6
 80017fe:	4325      	orrs	r5, r4
 8001800:	b2ad      	uxth	r5, r5
 8001802:	8015      	strh	r5, [r2, #0]
 8001804:	780a      	ldrb	r2, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 8001806:	78cc      	ldrb	r4, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	189a      	adds	r2, r3, r2
      if (ep->type != EP_TYPE_ISOC)
 800180c:	2c01      	cmp	r4, #1
 800180e:	d00d      	beq.n	800182c <USB_ActivateEndpoint+0x244>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001810:	4664      	mov	r4, ip
 8001812:	8815      	ldrh	r5, [r2, #0]
 8001814:	4025      	ands	r5, r4
 8001816:	2420      	movs	r4, #32
 8001818:	406c      	eors	r4, r5
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800181a:	4304      	orrs	r4, r0
 800181c:	b2a4      	uxth	r4, r4
 800181e:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001820:	780a      	ldrb	r2, [r1, #0]
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <USB_ActivateEndpoint+0x274>)
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	189b      	adds	r3, r3, r2
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	e7cd      	b.n	80017c8 <USB_ActivateEndpoint+0x1e0>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800182c:	4665      	mov	r5, ip
 800182e:	8814      	ldrh	r4, [r2, #0]
 8001830:	402c      	ands	r4, r5
 8001832:	e7f2      	b.n	800181a <USB_ActivateEndpoint+0x232>
 8001834:	ffff898f 	.word	0xffff898f
 8001838:	ffff8080 	.word	0xffff8080
 800183c:	ffff8f8f 	.word	0xffff8f8f
 8001840:	000080c0 	.word	0x000080c0
 8001844:	ffff8fbf 	.word	0xffff8fbf
 8001848:	00000404 	.word	0x00000404
 800184c:	00000406 	.word	0x00000406
 8001850:	ffff83ff 	.word	0xffff83ff
 8001854:	ffff8000 	.word	0xffff8000
 8001858:	0000c080 	.word	0x0000c080
 800185c:	ffffbf8f 	.word	0xffffbf8f
 8001860:	00008180 	.word	0x00008180
 8001864:	ffff80c0 	.word	0xffff80c0
 8001868:	ffffc080 	.word	0xffffc080

0800186c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
 800186e:	7b0d      	ldrb	r5, [r1, #12]
 8001870:	784c      	ldrb	r4, [r1, #1]
 8001872:	780b      	ldrb	r3, [r1, #0]
 8001874:	4a41      	ldr	r2, [pc, #260]	; (800197c <USB_DeactivateEndpoint+0x110>)
 8001876:	2d00      	cmp	r5, #0
 8001878:	d123      	bne.n	80018c2 <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18c3      	adds	r3, r0, r3
    if (ep->is_in != 0U)
 800187e:	2c00      	cmp	r4, #0
 8001880:	d010      	beq.n	80018a4 <USB_DeactivateEndpoint+0x38>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001882:	881c      	ldrh	r4, [r3, #0]
 8001884:	0664      	lsls	r4, r4, #25
 8001886:	d505      	bpl.n	8001894 <USB_DeactivateEndpoint+0x28>
 8001888:	881c      	ldrh	r4, [r3, #0]
 800188a:	4d3d      	ldr	r5, [pc, #244]	; (8001980 <USB_DeactivateEndpoint+0x114>)
 800188c:	402c      	ands	r4, r5
 800188e:	4d3d      	ldr	r5, [pc, #244]	; (8001984 <USB_DeactivateEndpoint+0x118>)
 8001890:	432c      	orrs	r4, r5
 8001892:	801c      	strh	r4, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001894:	780b      	ldrb	r3, [r1, #0]
 8001896:	493c      	ldr	r1, [pc, #240]	; (8001988 <USB_DeactivateEndpoint+0x11c>)
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	18c0      	adds	r0, r0, r3
 800189c:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800189e:	400b      	ands	r3, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	e041      	b.n	8001928 <USB_DeactivateEndpoint+0xbc>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018a4:	881c      	ldrh	r4, [r3, #0]
 80018a6:	0464      	lsls	r4, r4, #17
 80018a8:	d505      	bpl.n	80018b6 <USB_DeactivateEndpoint+0x4a>
 80018aa:	881c      	ldrh	r4, [r3, #0]
 80018ac:	4d34      	ldr	r5, [pc, #208]	; (8001980 <USB_DeactivateEndpoint+0x114>)
 80018ae:	402c      	ands	r4, r5
 80018b0:	4d36      	ldr	r5, [pc, #216]	; (800198c <USB_DeactivateEndpoint+0x120>)
 80018b2:	432c      	orrs	r4, r5
 80018b4:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018b6:	780b      	ldrb	r3, [r1, #0]
 80018b8:	4935      	ldr	r1, [pc, #212]	; (8001990 <USB_DeactivateEndpoint+0x124>)
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	18c0      	adds	r0, r0, r3
 80018be:	8803      	ldrh	r3, [r0, #0]
 80018c0:	e7ed      	b.n	800189e <USB_DeactivateEndpoint+0x32>
 80018c2:	2680      	movs	r6, #128	; 0x80
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4d2e      	ldr	r5, [pc, #184]	; (8001980 <USB_DeactivateEndpoint+0x114>)
 80018c8:	4f2f      	ldr	r7, [pc, #188]	; (8001988 <USB_DeactivateEndpoint+0x11c>)
 80018ca:	01f6      	lsls	r6, r6, #7
 80018cc:	18c3      	adds	r3, r0, r3
    if (ep->is_in == 0U)
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	d12e      	bne.n	8001930 <USB_DeactivateEndpoint+0xc4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018d2:	881c      	ldrh	r4, [r3, #0]
 80018d4:	4234      	tst	r4, r6
 80018d6:	d004      	beq.n	80018e2 <USB_DeactivateEndpoint+0x76>
 80018d8:	881c      	ldrh	r4, [r3, #0]
 80018da:	4e2c      	ldr	r6, [pc, #176]	; (800198c <USB_DeactivateEndpoint+0x120>)
 80018dc:	402c      	ands	r4, r5
 80018de:	4334      	orrs	r4, r6
 80018e0:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018e2:	780b      	ldrb	r3, [r1, #0]
 80018e4:	4c2b      	ldr	r4, [pc, #172]	; (8001994 <USB_DeactivateEndpoint+0x128>)
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	18c3      	adds	r3, r0, r3
 80018ea:	881e      	ldrh	r6, [r3, #0]
 80018ec:	0676      	lsls	r6, r6, #25
 80018ee:	d504      	bpl.n	80018fa <USB_DeactivateEndpoint+0x8e>
 80018f0:	881e      	ldrh	r6, [r3, #0]
 80018f2:	402e      	ands	r6, r5
 80018f4:	4326      	orrs	r6, r4
 80018f6:	b2b6      	uxth	r6, r6
 80018f8:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80018fa:	780b      	ldrb	r3, [r1, #0]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	18c3      	adds	r3, r0, r3
 8001900:	881e      	ldrh	r6, [r3, #0]
 8001902:	4035      	ands	r5, r6
 8001904:	432c      	orrs	r4, r5
 8001906:	b2a4      	uxth	r4, r4
 8001908:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800190a:	780c      	ldrb	r4, [r1, #0]
 800190c:	4d20      	ldr	r5, [pc, #128]	; (8001990 <USB_DeactivateEndpoint+0x124>)
 800190e:	00a4      	lsls	r4, r4, #2
 8001910:	1904      	adds	r4, r0, r4
 8001912:	8823      	ldrh	r3, [r4, #0]
 8001914:	402b      	ands	r3, r5
 8001916:	4313      	orrs	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800191c:	780b      	ldrb	r3, [r1, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	18c0      	adds	r0, r0, r3
 8001922:	8803      	ldrh	r3, [r0, #0]
 8001924:	401f      	ands	r7, r3
 8001926:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001928:	b292      	uxth	r2, r2
 800192a:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 800192c:	2000      	movs	r0, #0
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001930:	881c      	ldrh	r4, [r3, #0]
 8001932:	4234      	tst	r4, r6
 8001934:	d005      	beq.n	8001942 <USB_DeactivateEndpoint+0xd6>
 8001936:	881e      	ldrh	r6, [r3, #0]
 8001938:	4c17      	ldr	r4, [pc, #92]	; (8001998 <USB_DeactivateEndpoint+0x12c>)
 800193a:	402e      	ands	r6, r5
 800193c:	4326      	orrs	r6, r4
 800193e:	b2b6      	uxth	r6, r6
 8001940:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001942:	780b      	ldrb	r3, [r1, #0]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	18c3      	adds	r3, r0, r3
 8001948:	881e      	ldrh	r6, [r3, #0]
 800194a:	0674      	lsls	r4, r6, #25
 800194c:	d504      	bpl.n	8001958 <USB_DeactivateEndpoint+0xec>
 800194e:	881e      	ldrh	r6, [r3, #0]
 8001950:	4c0c      	ldr	r4, [pc, #48]	; (8001984 <USB_DeactivateEndpoint+0x118>)
 8001952:	402e      	ands	r6, r5
 8001954:	4326      	orrs	r6, r4
 8001956:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8001958:	780b      	ldrb	r3, [r1, #0]
 800195a:	4c0f      	ldr	r4, [pc, #60]	; (8001998 <USB_DeactivateEndpoint+0x12c>)
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	18c3      	adds	r3, r0, r3
 8001960:	881e      	ldrh	r6, [r3, #0]
 8001962:	4035      	ands	r5, r6
 8001964:	432c      	orrs	r4, r5
 8001966:	b2a4      	uxth	r4, r4
 8001968:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800196a:	780b      	ldrb	r3, [r1, #0]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	18c3      	adds	r3, r0, r3
 8001970:	881c      	ldrh	r4, [r3, #0]
 8001972:	4027      	ands	r7, r4
 8001974:	4317      	orrs	r7, r2
 8001976:	b2bf      	uxth	r7, r7
 8001978:	801f      	strh	r7, [r3, #0]
 800197a:	e79c      	b.n	80018b6 <USB_DeactivateEndpoint+0x4a>
 800197c:	ffff8080 	.word	0xffff8080
 8001980:	ffff8f8f 	.word	0xffff8f8f
 8001984:	000080c0 	.word	0x000080c0
 8001988:	ffff8fbf 	.word	0xffff8fbf
 800198c:	0000c080 	.word	0x0000c080
 8001990:	ffffbf8f 	.word	0xffffbf8f
 8001994:	ffff80c0 	.word	0xffff80c0
 8001998:	ffffc080 	.word	0xffffc080

0800199c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800199c:	b510      	push	{r4, lr}
 800199e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 80019a0:	784c      	ldrb	r4, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	18c0      	adds	r0, r0, r3
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <USB_EPSetStall+0x30>)
 80019a8:	8803      	ldrh	r3, [r0, #0]
  if (ep->is_in != 0U)
 80019aa:	2c00      	cmp	r4, #0
 80019ac:	d008      	beq.n	80019c0 <USB_EPSetStall+0x24>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <USB_EPSetStall+0x34>)
 80019b0:	4019      	ands	r1, r3
 80019b2:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80019b4:	404b      	eors	r3, r1
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 80019bc:	2000      	movs	r0, #0
 80019be:	bd10      	pop	{r4, pc}
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80019c0:	4904      	ldr	r1, [pc, #16]	; (80019d4 <USB_EPSetStall+0x38>)
 80019c2:	4019      	ands	r1, r3
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	e7f4      	b.n	80019b4 <USB_EPSetStall+0x18>
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	ffff8080 	.word	0xffff8080
 80019d0:	ffff8fbf 	.word	0xffff8fbf
 80019d4:	ffffbf8f 	.word	0xffffbf8f

080019d8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80019d8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80019da:	784b      	ldrb	r3, [r1, #1]
{
 80019dc:	b530      	push	{r4, r5, lr}
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4c16      	ldr	r4, [pc, #88]	; (8001a3c <USB_EPClearStall+0x64>)
  if (ep->is_in != 0U)
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <USB_EPClearStall+0x3c>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019e6:	1883      	adds	r3, r0, r2
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	0652      	lsls	r2, r2, #25
 80019ec:	d505      	bpl.n	80019fa <USB_EPClearStall+0x22>
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	4d13      	ldr	r5, [pc, #76]	; (8001a40 <USB_EPClearStall+0x68>)
 80019f2:	402a      	ands	r2, r5
 80019f4:	4d13      	ldr	r5, [pc, #76]	; (8001a44 <USB_EPClearStall+0x6c>)
 80019f6:	432a      	orrs	r2, r5
 80019f8:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80019fa:	780b      	ldrb	r3, [r1, #0]
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <USB_EPClearStall+0x70>)
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	18c0      	adds	r0, r0, r3
 8001a02:	8803      	ldrh	r3, [r0, #0]
 8001a04:	401a      	ands	r2, r3
 8001a06:	2330      	movs	r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a08:	4053      	eors	r3, r2
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	8003      	strh	r3, [r0, #0]
  }
  return HAL_OK;
}
 8001a10:	2000      	movs	r0, #0
 8001a12:	bd30      	pop	{r4, r5, pc}
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a14:	1883      	adds	r3, r0, r2
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	0452      	lsls	r2, r2, #17
 8001a1a:	d505      	bpl.n	8001a28 <USB_EPClearStall+0x50>
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	4d08      	ldr	r5, [pc, #32]	; (8001a40 <USB_EPClearStall+0x68>)
 8001a20:	402a      	ands	r2, r5
 8001a22:	4d0a      	ldr	r5, [pc, #40]	; (8001a4c <USB_EPClearStall+0x74>)
 8001a24:	432a      	orrs	r2, r5
 8001a26:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001a28:	780b      	ldrb	r3, [r1, #0]
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <USB_EPClearStall+0x78>)
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	18c0      	adds	r0, r0, r3
 8001a30:	8803      	ldrh	r3, [r0, #0]
 8001a32:	401a      	ands	r2, r3
 8001a34:	23c0      	movs	r3, #192	; 0xc0
 8001a36:	019b      	lsls	r3, r3, #6
 8001a38:	e7e6      	b.n	8001a08 <USB_EPClearStall+0x30>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	ffff8080 	.word	0xffff8080
 8001a40:	ffff8f8f 	.word	0xffff8f8f
 8001a44:	000080c0 	.word	0x000080c0
 8001a48:	ffff8fbf 	.word	0xffff8fbf
 8001a4c:	0000c080 	.word	0x0000c080
 8001a50:	ffffbf8f 	.word	0xffffbf8f

08001a54 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d102      	bne.n	8001a5e <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	304c      	adds	r0, #76	; 0x4c
 8001a5c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8001a5e:	2000      	movs	r0, #0
 8001a60:	4770      	bx	lr

08001a62 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	3058      	adds	r0, #88	; 0x58
 8001a66:	8803      	ldrh	r3, [r0, #0]
 8001a68:	0212      	lsls	r2, r2, #8
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4770      	bx	lr

08001a72 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8001a72:	3006      	adds	r0, #6
 8001a74:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8001a76:	b280      	uxth	r0, r0
  return tmpreg;
}
 8001a78:	4770      	bx	lr

08001a7a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	4770      	bx	lr

08001a7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001a7e:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a80:	2480      	movs	r4, #128	; 0x80
 8001a82:	00e4      	lsls	r4, r4, #3
 8001a84:	1912      	adds	r2, r2, r4
  uint8_t *pBuf = pbUsrBuf;
 8001a86:	000c      	movs	r4, r1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8001a88:	3301      	adds	r3, #1
 8001a8a:	085b      	lsrs	r3, r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001a8c:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d100      	bne.n	8001a94 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8001a92:	bd30      	pop	{r4, r5, pc}
 8001a94:	7865      	ldrb	r5, [r4, #1]
 8001a96:	7822      	ldrb	r2, [r4, #0]
 8001a98:	022d      	lsls	r5, r5, #8
 8001a9a:	4315      	orrs	r5, r2
    *pdwVal = (uint16_t)temp2;
 8001a9c:	1a62      	subs	r2, r4, r1
 8001a9e:	5215      	strh	r5, [r2, r0]
 8001aa0:	3402      	adds	r4, #2
  for (i = n; i != 0U; i--)
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	e7f3      	b.n	8001a8e <USB_WritePMA+0x10>
	...

08001aa8 <USB_EPStartXfer>:
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8001aaa:	784e      	ldrb	r6, [r1, #1]
{
 8001aac:	000d      	movs	r5, r1
 8001aae:	698a      	ldr	r2, [r1, #24]
 8001ab0:	690b      	ldr	r3, [r1, #16]
 8001ab2:	0004      	movs	r4, r0
 8001ab4:	7b09      	ldrb	r1, [r1, #12]
  if (ep->is_in == 1U)
 8001ab6:	2e01      	cmp	r6, #1
 8001ab8:	d159      	bne.n	8001b6e <USB_EPStartXfer+0xc6>
    if (ep->xfer_len > ep->maxpacket)
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d922      	bls.n	8001b04 <USB_EPStartXfer+0x5c>
      ep->xfer_len -= len;
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	61aa      	str	r2, [r5, #24]
 8001ac2:	0027      	movs	r7, r4
 8001ac4:	b29e      	uxth	r6, r3
 8001ac6:	3750      	adds	r7, #80	; 0x50
    if (ep->doublebuffer == 0U)
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d11f      	bne.n	8001b0c <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8001acc:	88ea      	ldrh	r2, [r5, #6]
 8001ace:	0033      	movs	r3, r6
 8001ad0:	6969      	ldr	r1, [r5, #20]
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f7ff ffd3 	bl	8001a7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001ad8:	782b      	ldrb	r3, [r5, #0]
 8001ada:	883a      	ldrh	r2, [r7, #0]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	18e3      	adds	r3, r4, r3
 8001ae0:	189b      	adds	r3, r3, r2
 8001ae2:	4a55      	ldr	r2, [pc, #340]	; (8001c38 <USB_EPStartXfer+0x190>)
 8001ae4:	189b      	adds	r3, r3, r2
 8001ae6:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001ae8:	782b      	ldrb	r3, [r5, #0]
 8001aea:	4a54      	ldr	r2, [pc, #336]	; (8001c3c <USB_EPStartXfer+0x194>)
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	18e4      	adds	r4, r4, r3
 8001af0:	8823      	ldrh	r3, [r4, #0]
 8001af2:	401a      	ands	r2, r3
 8001af4:	2330      	movs	r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001af6:	4053      	eors	r3, r2
 8001af8:	4a51      	ldr	r2, [pc, #324]	; (8001c40 <USB_EPStartXfer+0x198>)
}
 8001afa:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	8023      	strh	r3, [r4, #0]
}
 8001b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ep->xfer_len = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61ab      	str	r3, [r5, #24]
 8001b08:	0013      	movs	r3, r2
 8001b0a:	e7da      	b.n	8001ac2 <USB_EPStartXfer+0x1a>
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8001b0c:	782a      	ldrb	r2, [r5, #0]
 8001b0e:	0091      	lsls	r1, r2, #2
 8001b10:	1861      	adds	r1, r4, r1
 8001b12:	8809      	ldrh	r1, [r1, #0]
 8001b14:	00d2      	lsls	r2, r2, #3
 8001b16:	0649      	lsls	r1, r1, #25
 8001b18:	d518      	bpl.n	8001b4c <USB_EPStartXfer+0xa4>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001b1a:	8839      	ldrh	r1, [r7, #0]
 8001b1c:	18a2      	adds	r2, r4, r2
 8001b1e:	1852      	adds	r2, r2, r1
 8001b20:	4948      	ldr	r1, [pc, #288]	; (8001c44 <USB_EPStartXfer+0x19c>)
 8001b22:	1852      	adds	r2, r2, r1
 8001b24:	8013      	strh	r3, [r2, #0]
        pmabuffer = ep->pmaaddr1;
 8001b26:	896a      	ldrh	r2, [r5, #10]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8001b28:	0033      	movs	r3, r6
 8001b2a:	6969      	ldr	r1, [r5, #20]
 8001b2c:	0020      	movs	r0, r4
 8001b2e:	f7ff ffa6 	bl	8001a7e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001b32:	786a      	ldrb	r2, [r5, #1]
 8001b34:	782b      	ldrb	r3, [r5, #0]
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d110      	bne.n	8001b5c <USB_EPStartXfer+0xb4>
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	18e3      	adds	r3, r4, r3
 8001b3e:	4942      	ldr	r1, [pc, #264]	; (8001c48 <USB_EPStartXfer+0x1a0>)
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	400a      	ands	r2, r1
 8001b44:	4941      	ldr	r1, [pc, #260]	; (8001c4c <USB_EPStartXfer+0x1a4>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	801a      	strh	r2, [r3, #0]
 8001b4a:	e7cd      	b.n	8001ae8 <USB_EPStartXfer+0x40>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001b4c:	8839      	ldrh	r1, [r7, #0]
 8001b4e:	18a2      	adds	r2, r4, r2
 8001b50:	1852      	adds	r2, r2, r1
 8001b52:	4939      	ldr	r1, [pc, #228]	; (8001c38 <USB_EPStartXfer+0x190>)
 8001b54:	1852      	adds	r2, r2, r1
 8001b56:	8013      	strh	r3, [r2, #0]
        pmabuffer = ep->pmaaddr0;
 8001b58:	892a      	ldrh	r2, [r5, #8]
 8001b5a:	e7e5      	b.n	8001b28 <USB_EPStartXfer+0x80>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001b5c:	2a01      	cmp	r2, #1
 8001b5e:	d1c3      	bne.n	8001ae8 <USB_EPStartXfer+0x40>
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	18e3      	adds	r3, r4, r3
 8001b64:	4938      	ldr	r1, [pc, #224]	; (8001c48 <USB_EPStartXfer+0x1a0>)
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	4939      	ldr	r1, [pc, #228]	; (8001c50 <USB_EPStartXfer+0x1a8>)
 8001b6c:	e7eb      	b.n	8001b46 <USB_EPStartXfer+0x9e>
    if (ep->xfer_len > ep->maxpacket)
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d915      	bls.n	8001b9e <USB_EPStartXfer+0xf6>
      ep->xfer_len -= len;
 8001b72:	1ad2      	subs	r2, r2, r3
 8001b74:	61aa      	str	r2, [r5, #24]
 8001b76:	7828      	ldrb	r0, [r5, #0]
    if (ep->doublebuffer == 0U)
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	d114      	bne.n	8001ba6 <USB_EPStartXfer+0xfe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001b7c:	0022      	movs	r2, r4
 8001b7e:	3250      	adds	r2, #80	; 0x50
 8001b80:	8811      	ldrh	r1, [r2, #0]
 8001b82:	4a30      	ldr	r2, [pc, #192]	; (8001c44 <USB_EPStartXfer+0x19c>)
 8001b84:	00c0      	lsls	r0, r0, #3
 8001b86:	18a2      	adds	r2, r4, r2
 8001b88:	1852      	adds	r2, r2, r1
 8001b8a:	1812      	adds	r2, r2, r0
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d134      	bne.n	8001bfa <USB_EPStartXfer+0x152>
 8001b90:	8813      	ldrh	r3, [r2, #0]
 8001b92:	4930      	ldr	r1, [pc, #192]	; (8001c54 <USB_EPStartXfer+0x1ac>)
 8001b94:	4019      	ands	r1, r3
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <USB_EPStartXfer+0x1b0>)
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	8013      	strh	r3, [r2, #0]
 8001b9c:	e035      	b.n	8001c0a <USB_EPStartXfer+0x162>
      ep->xfer_len = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61ab      	str	r3, [r5, #24]
 8001ba2:	0013      	movs	r3, r2
 8001ba4:	e7e7      	b.n	8001b76 <USB_EPStartXfer+0xce>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001ba6:	2e00      	cmp	r6, #0
 8001ba8:	d117      	bne.n	8001bda <USB_EPStartXfer+0x132>
 8001baa:	0022      	movs	r2, r4
 8001bac:	3250      	adds	r2, #80	; 0x50
 8001bae:	8811      	ldrh	r1, [r2, #0]
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <USB_EPStartXfer+0x190>)
 8001bb2:	00c0      	lsls	r0, r0, #3
 8001bb4:	18a2      	adds	r2, r4, r2
 8001bb6:	1852      	adds	r2, r2, r1
 8001bb8:	1812      	adds	r2, r2, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <USB_EPStartXfer+0x122>
 8001bbe:	8811      	ldrh	r1, [r2, #0]
 8001bc0:	4824      	ldr	r0, [pc, #144]	; (8001c54 <USB_EPStartXfer+0x1ac>)
 8001bc2:	4008      	ands	r0, r1
 8001bc4:	4924      	ldr	r1, [pc, #144]	; (8001c58 <USB_EPStartXfer+0x1b0>)
 8001bc6:	4301      	orrs	r1, r0
 8001bc8:	e006      	b.n	8001bd8 <USB_EPStartXfer+0x130>
 8001bca:	2b3d      	cmp	r3, #61	; 0x3d
 8001bcc:	d812      	bhi.n	8001bf4 <USB_EPStartXfer+0x14c>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	0859      	lsrs	r1, r3, #1
 8001bd2:	4018      	ands	r0, r3
 8001bd4:	1809      	adds	r1, r1, r0
 8001bd6:	0289      	lsls	r1, r1, #10
 8001bd8:	8011      	strh	r1, [r2, #0]
 8001bda:	7869      	ldrb	r1, [r5, #1]
 8001bdc:	782a      	ldrb	r2, [r5, #0]
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d11f      	bne.n	8001c22 <USB_EPStartXfer+0x17a>
 8001be2:	0021      	movs	r1, r4
 8001be4:	3150      	adds	r1, #80	; 0x50
 8001be6:	8808      	ldrh	r0, [r1, #0]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <USB_EPStartXfer+0x19c>)
 8001bea:	00d2      	lsls	r2, r2, #3
 8001bec:	1861      	adds	r1, r4, r1
 8001bee:	1809      	adds	r1, r1, r0
 8001bf0:	188a      	adds	r2, r1, r2
 8001bf2:	e7cb      	b.n	8001b8c <USB_EPStartXfer+0xe4>
 8001bf4:	0958      	lsrs	r0, r3, #5
 8001bf6:	0280      	lsls	r0, r0, #10
 8001bf8:	e7e4      	b.n	8001bc4 <USB_EPStartXfer+0x11c>
 8001bfa:	2b3d      	cmp	r3, #61	; 0x3d
 8001bfc:	d80e      	bhi.n	8001c1c <USB_EPStartXfer+0x174>
 8001bfe:	2001      	movs	r0, #1
 8001c00:	0859      	lsrs	r1, r3, #1
 8001c02:	4003      	ands	r3, r0
 8001c04:	18c9      	adds	r1, r1, r3
 8001c06:	0289      	lsls	r1, r1, #10
 8001c08:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c0a:	782b      	ldrb	r3, [r5, #0]
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <USB_EPStartXfer+0x1b4>)
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	18e4      	adds	r4, r4, r3
 8001c12:	8823      	ldrh	r3, [r4, #0]
 8001c14:	401a      	ands	r2, r3
 8001c16:	23c0      	movs	r3, #192	; 0xc0
 8001c18:	019b      	lsls	r3, r3, #6
 8001c1a:	e76c      	b.n	8001af6 <USB_EPStartXfer+0x4e>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	0299      	lsls	r1, r3, #10
 8001c20:	e7b9      	b.n	8001b96 <USB_EPStartXfer+0xee>
 8001c22:	2901      	cmp	r1, #1
 8001c24:	d1f1      	bne.n	8001c0a <USB_EPStartXfer+0x162>
 8001c26:	0021      	movs	r1, r4
 8001c28:	3150      	adds	r1, #80	; 0x50
 8001c2a:	8809      	ldrh	r1, [r1, #0]
 8001c2c:	00d2      	lsls	r2, r2, #3
 8001c2e:	1912      	adds	r2, r2, r4
 8001c30:	1852      	adds	r2, r2, r1
 8001c32:	4904      	ldr	r1, [pc, #16]	; (8001c44 <USB_EPStartXfer+0x19c>)
 8001c34:	1852      	adds	r2, r2, r1
 8001c36:	e7b0      	b.n	8001b9a <USB_EPStartXfer+0xf2>
 8001c38:	00000402 	.word	0x00000402
 8001c3c:	ffff8fbf 	.word	0xffff8fbf
 8001c40:	ffff8080 	.word	0xffff8080
 8001c44:	00000406 	.word	0x00000406
 8001c48:	ffff8f8f 	.word	0xffff8f8f
 8001c4c:	000080c0 	.word	0x000080c0
 8001c50:	0000c080 	.word	0x0000c080
 8001c54:	ffff83ff 	.word	0xffff83ff
 8001c58:	ffff8000 	.word	0xffff8000
 8001c5c:	ffffbf8f 	.word	0xffffbf8f

08001c60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001c62:	2580      	movs	r5, #128	; 0x80
 8001c64:	00ed      	lsls	r5, r5, #3
 8001c66:	1952      	adds	r2, r2, r5
  uint32_t n = (uint32_t)wNBytes >> 1;
 8001c68:	085c      	lsrs	r4, r3, #1
  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8001c6a:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8001c6c:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8001c6e:	000a      	movs	r2, r1
  for (i = n; i != 0U; i--)
 8001c70:	2e00      	cmp	r6, #0
 8001c72:	d107      	bne.n	8001c84 <USB_ReadPMA+0x24>
 8001c74:	0064      	lsls	r4, r4, #1
 8001c76:	1900      	adds	r0, r0, r4
 8001c78:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8001c7a:	07db      	lsls	r3, r3, #31
 8001c7c:	d501      	bpl.n	8001c82 <USB_ReadPMA+0x22>
  {
    temp = *pdwVal;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001c7e:	8803      	ldrh	r3, [r0, #0]
 8001c80:	700b      	strb	r3, [r1, #0]
  }
}
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
    temp = *pdwVal;
 8001c84:	1a55      	subs	r5, r2, r1
 8001c86:	5a2d      	ldrh	r5, [r5, r0]
  for (i = n; i != 0U; i--)
 8001c88:	3e01      	subs	r6, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8001c8a:	7015      	strb	r5, [r2, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8001c8c:	0a2d      	lsrs	r5, r5, #8
 8001c8e:	7055      	strb	r5, [r2, #1]
 8001c90:	3202      	adds	r2, #2
 8001c92:	e7ed      	b.n	8001c70 <USB_ReadPMA+0x10>

08001c94 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001c94:	23a4      	movs	r3, #164	; 0xa4
 8001c96:	009b      	lsls	r3, r3, #2
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001c9a:	58c4      	ldr	r4, [r0, r3]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	58c3      	ldr	r3, [r0, r3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <USBD_CDC_EP0_RxReady+0x28>
 8001ca4:	2580      	movs	r5, #128	; 0x80
 8001ca6:	00ad      	lsls	r5, r5, #2
 8001ca8:	5d60      	ldrb	r0, [r4, r5]
 8001caa:	28ff      	cmp	r0, #255	; 0xff
 8001cac:	d006      	beq.n	8001cbc <USBD_CDC_EP0_RxReady+0x28>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <USBD_CDC_EP0_RxReady+0x2c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	5ca2      	ldrb	r2, [r4, r2]
 8001cb4:	0021      	movs	r1, r4
 8001cb6:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 8001cb8:	23ff      	movs	r3, #255	; 0xff
 8001cba:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	bd70      	pop	{r4, r5, r6, pc}
 8001cc0:	00000201 	.word	0x00000201

08001cc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001cc4:	2343      	movs	r3, #67	; 0x43
 8001cc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001cc8:	4800      	ldr	r0, [pc, #0]	; (8001ccc <USBD_CDC_GetFSCfgDesc+0x8>)
 8001cca:	4770      	bx	lr
 8001ccc:	20000038 	.word	0x20000038

08001cd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001cd0:	2343      	movs	r3, #67	; 0x43
 8001cd2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001cd4:	4800      	ldr	r0, [pc, #0]	; (8001cd8 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001cd6:	4770      	bx	lr
 8001cd8:	2000007c 	.word	0x2000007c

08001cdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001cdc:	2343      	movs	r3, #67	; 0x43
 8001cde:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001ce0:	4800      	ldr	r0, [pc, #0]	; (8001ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001ce2:	4770      	bx	lr
 8001ce4:	200000cc 	.word	0x200000cc

08001ce8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001ce8:	230a      	movs	r3, #10
 8001cea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001cec:	4800      	ldr	r0, [pc, #0]	; (8001cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001cee:	4770      	bx	lr
 8001cf0:	200000c0 	.word	0x200000c0

08001cf4 <USBD_CDC_DataOut>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001cf6:	26a4      	movs	r6, #164	; 0xa4
 8001cf8:	00b6      	lsls	r6, r6, #2
{
 8001cfa:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001cfc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001cfe:	f000 ffb7 	bl	8002c70 <USBD_LL_GetRxDataSize>
 8001d02:	2383      	movs	r3, #131	; 0x83
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	50e8      	str	r0, [r5, r3]
  if(pdev->pClassData != NULL)
 8001d08:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 8001d0a:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00a      	beq.n	8001d26 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001d10:	2383      	movs	r3, #131	; 0x83
 8001d12:	2281      	movs	r2, #129	; 0x81
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	18e9      	adds	r1, r5, r3
 8001d18:	3388      	adds	r3, #136	; 0x88
 8001d1a:	58e3      	ldr	r3, [r4, r3]
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	58a8      	ldr	r0, [r5, r2]
 8001d22:	4798      	blx	r3
    return USBD_OK;
 8001d24:	2000      	movs	r0, #0
}
 8001d26:	bd70      	pop	{r4, r5, r6, pc}

08001d28 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8001d28:	23a4      	movs	r3, #164	; 0xa4
{
 8001d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	58c3      	ldr	r3, [r0, r3]
{
 8001d30:	0006      	movs	r6, r0
 8001d32:	000f      	movs	r7, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8001d34:	9301      	str	r3, [sp, #4]
    return USBD_FAIL;
 8001d36:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d017      	beq.n	8001d6c <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8001d3c:	2514      	movs	r5, #20
 8001d3e:	434d      	muls	r5, r1
 8001d40:	1975      	adds	r5, r6, r5
 8001d42:	69e8      	ldr	r0, [r5, #28]
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d012      	beq.n	8001d6e <USBD_CDC_DataIn+0x46>
 8001d48:	23a6      	movs	r3, #166	; 0xa6
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	58f3      	ldr	r3, [r6, r3]
 8001d4e:	014a      	lsls	r2, r1, #5
 8001d50:	189b      	adds	r3, r3, r2
 8001d52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d54:	f7fe fa72 	bl	800023c <__aeabi_uidivmod>
 8001d58:	1e0c      	subs	r4, r1, #0
 8001d5a:	d108      	bne.n	8001d6e <USBD_CDC_DataIn+0x46>
      pdev->ep_in[epnum].total_length = 0U;
 8001d5c:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8001d5e:	000b      	movs	r3, r1
 8001d60:	000a      	movs	r2, r1
 8001d62:	0030      	movs	r0, r6
 8001d64:	0039      	movs	r1, r7
 8001d66:	f000 ff63 	bl	8002c30 <USBD_LL_Transmit>
    return USBD_OK;
 8001d6a:	0020      	movs	r0, r4
}
 8001d6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8001d6e:	2385      	movs	r3, #133	; 0x85
 8001d70:	2000      	movs	r0, #0
 8001d72:	9a01      	ldr	r2, [sp, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	50d0      	str	r0, [r2, r3]
 8001d78:	e7f8      	b.n	8001d6c <USBD_CDC_DataIn+0x44>
	...

08001d7c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001d7c:	23a4      	movs	r3, #164	; 0xa4
{
 8001d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8001d84:	466b      	mov	r3, sp
{
 8001d86:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 8001d88:	1d59      	adds	r1, r3, #5
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8001d8e:	466b      	mov	r3, sp
{
 8001d90:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8001d92:	1d98      	adds	r0, r3, #6
 8001d94:	2300      	movs	r3, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001d96:	2460      	movs	r4, #96	; 0x60
  uint16_t status_info = 0U;
 8001d98:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001d9a:	7833      	ldrb	r3, [r6, #0]
 8001d9c:	401c      	ands	r4, r3
 8001d9e:	d029      	beq.n	8001df4 <USBD_CDC_Setup+0x78>
 8001da0:	2c20      	cmp	r4, #32
 8001da2:	d142      	bne.n	8001e2a <USBD_CDC_Setup+0xae>
    if (req->wLength)
 8001da4:	88f4      	ldrh	r4, [r6, #6]
 8001da6:	7870      	ldrb	r0, [r6, #1]
 8001da8:	2c00      	cmp	r4, #0
 8001daa:	d01b      	beq.n	8001de4 <USBD_CDC_Setup+0x68>
      if (req->bmRequest & 0x80U)
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0c      	bge.n	8001dcc <USBD_CDC_Setup+0x50>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001db2:	23a5      	movs	r3, #165	; 0xa5
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	58eb      	ldr	r3, [r5, r3]
 8001db8:	0022      	movs	r2, r4
 8001dba:	0039      	movs	r1, r7
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001dc0:	0039      	movs	r1, r7
 8001dc2:	88f2      	ldrh	r2, [r6, #6]
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	f000 fc9f 	bl	8002708 <USBD_CtlSendData>
 8001dca:	e009      	b.n	8001de0 <USBD_CDC_Setup+0x64>
        hcdc->CmdOpCode = req->bRequest;
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	54f8      	strb	r0, [r7, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <USBD_CDC_Setup+0xbc>)
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001dd4:	0022      	movs	r2, r4
        hcdc->CmdLength = (uint8_t)req->wLength;
 8001dd6:	54fc      	strb	r4, [r7, r3]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8001dd8:	0039      	movs	r1, r7
 8001dda:	0028      	movs	r0, r5
 8001ddc:	f000 fcaa 	bl	8002734 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001de4:	23a5      	movs	r3, #165	; 0xa5
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	58eb      	ldr	r3, [r5, r3]
 8001dea:	0022      	movs	r2, r4
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0031      	movs	r1, r6
 8001df0:	4798      	blx	r3
 8001df2:	e7f5      	b.n	8001de0 <USBD_CDC_Setup+0x64>
    switch (req->bRequest)
 8001df4:	7877      	ldrb	r7, [r6, #1]
 8001df6:	2f0a      	cmp	r7, #10
 8001df8:	d00b      	beq.n	8001e12 <USBD_CDC_Setup+0x96>
 8001dfa:	2f0b      	cmp	r7, #11
 8001dfc:	d010      	beq.n	8001e20 <USBD_CDC_Setup+0xa4>
 8001dfe:	2f00      	cmp	r7, #0
 8001e00:	d113      	bne.n	8001e2a <USBD_CDC_Setup+0xae>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e02:	239d      	movs	r3, #157	; 0x9d
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	5ceb      	ldrb	r3, [r5, r3]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d10e      	bne.n	8001e2a <USBD_CDC_Setup+0xae>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	0001      	movs	r1, r0
 8001e10:	e7d8      	b.n	8001dc4 <USBD_CDC_Setup+0x48>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001e12:	239d      	movs	r3, #157	; 0x9d
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	5ceb      	ldrb	r3, [r5, r3]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d106      	bne.n	8001e2a <USBD_CDC_Setup+0xae>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	e7d1      	b.n	8001dc4 <USBD_CDC_Setup+0x48>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8001e20:	239d      	movs	r3, #157	; 0x9d
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	5ceb      	ldrb	r3, [r5, r3]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d0da      	beq.n	8001de0 <USBD_CDC_Setup+0x64>
    USBD_CtlError (pdev, req);
 8001e2a:	0028      	movs	r0, r5
 8001e2c:	0031      	movs	r1, r6
 8001e2e:	f000 fc44 	bl	80026ba <USBD_CtlError>
    ret = USBD_FAIL;
 8001e32:	2002      	movs	r0, #2
    break;
 8001e34:	e7d5      	b.n	8001de2 <USBD_CDC_Setup+0x66>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	00000201 	.word	0x00000201

08001e3c <USBD_CDC_DeInit>:
{
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001e40:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8001e42:	2181      	movs	r1, #129	; 0x81
 8001e44:	f000 fea2 	bl	8002b8c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001e48:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001e4a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001e4c:	0020      	movs	r0, r4
 8001e4e:	f000 fe9d 	bl	8002b8c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001e52:	0023      	movs	r3, r4
  if(pdev->pClassData != NULL)
 8001e54:	26a4      	movs	r6, #164	; 0xa4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8001e56:	33fc      	adds	r3, #252	; 0xfc
 8001e58:	65dd      	str	r5, [r3, #92]	; 0x5c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001e5a:	2182      	movs	r1, #130	; 0x82
 8001e5c:	0020      	movs	r0, r4
  if(pdev->pClassData != NULL)
 8001e5e:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8001e60:	f000 fe94 	bl	8002b8c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001e64:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8001e66:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	d008      	beq.n	8001e7e <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001e6c:	23a5      	movs	r3, #165	; 0xa5
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	58e3      	ldr	r3, [r4, r3]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001e76:	59a0      	ldr	r0, [r4, r6]
 8001e78:	f000 ff06 	bl	8002c88 <USBD_static_free>
    pdev->pClassData = NULL;
 8001e7c:	51a5      	str	r5, [r4, r6]
}
 8001e7e:	2000      	movs	r0, #0
 8001e80:	bd70      	pop	{r4, r5, r6, pc}

08001e82 <USBD_CDC_Init>:
{
 8001e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e84:	0006      	movs	r6, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8001e86:	7c03      	ldrb	r3, [r0, #16]
{
 8001e88:	0004      	movs	r4, r0
 8001e8a:	36fc      	adds	r6, #252	; 0xfc
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d13b      	bne.n	8001f08 <USBD_CDC_Init+0x86>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	2202      	movs	r2, #2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	2181      	movs	r1, #129	; 0x81
 8001e98:	f000 fe66 	bl	8002b68 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001e9c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001e9e:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001ea0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001ea2:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001ea4:	0029      	movs	r1, r5
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	0020      	movs	r0, r4
 8001eaa:	f000 fe5d 	bl	8002b68 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8001eae:	65f5      	str	r5, [r6, #92]	; 0x5c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	2182      	movs	r1, #130	; 0x82
 8001eb6:	0020      	movs	r0, r4
 8001eb8:	f000 fe56 	bl	8002b68 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001ebc:	2601      	movs	r6, #1
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001ebe:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001ec0:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001ec2:	0080      	lsls	r0, r0, #2
 8001ec4:	f000 fedc 	bl	8002c80 <USBD_static_malloc>
 8001ec8:	23a4      	movs	r3, #164	; 0xa4
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	0005      	movs	r5, r0
 8001ece:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8001ed0:	0030      	movs	r0, r6
  if(pdev->pClassData == NULL)
 8001ed2:	2d00      	cmp	r5, #0
 8001ed4:	d017      	beq.n	8001f06 <USBD_CDC_Init+0x84>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	58e3      	ldr	r3, [r4, r3]
    hcdc->TxState = 0U;
 8001eda:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4798      	blx	r3
    hcdc->TxState = 0U;
 8001ee0:	2385      	movs	r3, #133	; 0x85
 8001ee2:	2281      	movs	r2, #129	; 0x81
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	50ef      	str	r7, [r5, r3]
    hcdc->RxState = 0U;
 8001ee8:	3304      	adds	r3, #4
 8001eea:	50ef      	str	r7, [r5, r3]
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8001eec:	7c23      	ldrb	r3, [r4, #16]
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	42bb      	cmp	r3, r7
 8001ef4:	d111      	bne.n	8001f1a <USBD_CDC_Init+0x98>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	58aa      	ldr	r2, [r5, r2]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	0031      	movs	r1, r6
 8001efe:	0020      	movs	r0, r4
 8001f00:	f000 fea6 	bl	8002c50 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8001f04:	9801      	ldr	r0, [sp, #4]
}
 8001f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001f08:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	2181      	movs	r1, #129	; 0x81
 8001f10:	f000 fe2a 	bl	8002b68 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8001f14:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8001f16:	2340      	movs	r3, #64	; 0x40
 8001f18:	e7c4      	b.n	8001ea4 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001f1a:	2340      	movs	r3, #64	; 0x40
 8001f1c:	58aa      	ldr	r2, [r5, r2]
 8001f1e:	0031      	movs	r1, r6
 8001f20:	0020      	movs	r0, r4
 8001f22:	f000 fe95 	bl	8002c50 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8001f26:	0038      	movs	r0, r7
 8001f28:	e7ed      	b.n	8001f06 <USBD_CDC_Init+0x84>

08001f2a <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 8001f2a:	2302      	movs	r3, #2

  if(fops != NULL)
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d003      	beq.n	8001f38 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 8001f30:	23a5      	movs	r3, #165	; 0xa5
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8001f36:	2300      	movs	r3, #0
  }

  return ret;
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	4770      	bx	lr

08001f3c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f3c:	23a4      	movs	r3, #164	; 0xa4
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8001f42:	2082      	movs	r0, #130	; 0x82
 8001f44:	0080      	lsls	r0, r0, #2
 8001f46:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8001f48:	2184      	movs	r1, #132	; 0x84
 8001f4a:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8001f4c:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8001f4e:	505a      	str	r2, [r3, r1]
}
 8001f50:	4770      	bx	lr

08001f52 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8001f52:	23a4      	movs	r3, #164	; 0xa4
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	58c2      	ldr	r2, [r0, r3]
 8001f58:	3b8c      	subs	r3, #140	; 0x8c

  return USBD_OK;
}
 8001f5a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8001f5c:	50d1      	str	r1, [r2, r3]
}
 8001f5e:	4770      	bx	lr

08001f60 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f60:	23a4      	movs	r3, #164	; 0xa4
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	58c2      	ldr	r2, [r0, r3]
{
 8001f66:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8001f68:	2302      	movs	r3, #2
  if(pdev->pClassData != NULL)
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d012      	beq.n	8001f94 <USBD_CDC_TransmitPacket+0x34>
    if(hcdc->TxState == 0U)
 8001f6e:	2185      	movs	r1, #133	; 0x85
 8001f70:	0089      	lsls	r1, r1, #2
 8001f72:	5854      	ldr	r4, [r2, r1]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d10c      	bne.n	8001f94 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 8001f7a:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8001f7c:	2384      	movs	r3, #132	; 0x84
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8001f82:	390c      	subs	r1, #12
 8001f84:	5852      	ldr	r2, [r2, r1]
 8001f86:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8001f88:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8001f8a:	39ff      	subs	r1, #255	; 0xff
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f000 fe4f 	bl	8002c30 <USBD_LL_Transmit>
      return USBD_OK;
 8001f92:	0023      	movs	r3, r4
  }
}
 8001f94:	0018      	movs	r0, r3
 8001f96:	bd10      	pop	{r4, pc}

08001f98 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001f98:	23a4      	movs	r3, #164	; 0xa4
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	58c2      	ldr	r2, [r0, r3]
{
 8001f9e:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8001fa0:	2402      	movs	r4, #2
  if(pdev->pClassData != NULL)
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	d009      	beq.n	8001fba <USBD_CDC_ReceivePacket+0x22>
 8001fa6:	2181      	movs	r1, #129	; 0x81
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8001fa8:	7c04      	ldrb	r4, [r0, #16]
 8001faa:	0089      	lsls	r1, r1, #2
 8001fac:	2c00      	cmp	r4, #0
 8001fae:	d106      	bne.n	8001fbe <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8001fb0:	5852      	ldr	r2, [r2, r1]
 8001fb2:	3b90      	subs	r3, #144	; 0x90
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f000 fe4b 	bl	8002c50 <USBD_LL_PrepareReceive>
  }
}
 8001fba:	0020      	movs	r0, r4
 8001fbc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8001fbe:	5852      	ldr	r2, [r2, r1]
 8001fc0:	2340      	movs	r3, #64	; 0x40
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	f000 fe44 	bl	8002c50 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8001fc8:	2400      	movs	r4, #0
 8001fca:	e7f6      	b.n	8001fba <USBD_CDC_ReceivePacket+0x22>

08001fcc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8001fcc:	b510      	push	{r4, lr}
  if(pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8001fce:	2302      	movs	r3, #2
  if(pdev == NULL)
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d013      	beq.n	8001ffc <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8001fd4:	23a3      	movs	r3, #163	; 0xa3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	58c4      	ldr	r4, [r0, r3]
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d001      	beq.n	8001fe2 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8001fde:	2400      	movs	r4, #0
 8001fe0:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d002      	beq.n	8001fec <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8001fe6:	23a2      	movs	r3, #162	; 0xa2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001fec:	239d      	movs	r3, #157	; 0x9d
 8001fee:	2101      	movs	r1, #1
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8001ff4:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001ff6:	f000 fd65 	bl	8002ac4 <USBD_LL_Init>

  return USBD_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	bd10      	pop	{r4, pc}

08002000 <USBD_RegisterClass>:
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002000:	2302      	movs	r3, #2
  if(pclass != 0)
 8002002:	2900      	cmp	r1, #0
 8002004:	d003      	beq.n	800200e <USBD_RegisterClass+0xe>
    pdev->pClass = pclass;
 8002006:	23a3      	movs	r3, #163	; 0xa3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 800200c:	2300      	movs	r3, #0
  }

  return status;
}
 800200e:	0018      	movs	r0, r3
 8002010:	4770      	bx	lr

08002012 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002012:	b510      	push	{r4, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002014:	f000 fd98 	bl	8002b48 <USBD_LL_Start>

  return USBD_OK;
}
 8002018:	2000      	movs	r0, #0
 800201a:	bd10      	pop	{r4, pc}

0800201c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800201c:	23a3      	movs	r3, #163	; 0xa3
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	58c3      	ldr	r3, [r0, r3]
{
 8002022:	b510      	push	{r4, lr}
  if(pdev->pClass != NULL)
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002028:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800202a:	bd10      	pop	{r4, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4798      	blx	r3
 8002030:	2800      	cmp	r0, #0
 8002032:	d1f9      	bne.n	8002028 <USBD_SetClassConfig+0xc>
 8002034:	e7f9      	b.n	800202a <USBD_SetClassConfig+0xe>

08002036 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002036:	23a3      	movs	r3, #163	; 0xa3
{
 8002038:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	58c3      	ldr	r3, [r0, r3]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4798      	blx	r3
  return USBD_OK;
}
 8002042:	2000      	movs	r0, #0
 8002044:	bd10      	pop	{r4, pc}
	...

08002048 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002048:	23a0      	movs	r3, #160	; 0xa0
 800204a:	009b      	lsls	r3, r3, #2
{
 800204c:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800204e:	18c5      	adds	r5, r0, r3
{
 8002050:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002052:	0028      	movs	r0, r5
 8002054:	f000 fb1d 	bl	8002692 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002058:	239b      	movs	r3, #155	; 0x9b
 800205a:	2201      	movs	r2, #1
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <USBD_LL_SetupStage+0x60>)
 8002062:	5ae2      	ldrh	r2, [r4, r3]
 8002064:	3b16      	subs	r3, #22
 8002066:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8002068:	3310      	adds	r3, #16
 800206a:	5ce1      	ldrb	r1, [r4, r3]
 800206c:	231f      	movs	r3, #31
 800206e:	400b      	ands	r3, r1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d00f      	beq.n	8002094 <USBD_LL_SetupStage+0x4c>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <USBD_LL_SetupStage+0x40>
 8002078:	2b02      	cmp	r3, #2
 800207a:	d010      	beq.n	800209e <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800207c:	237f      	movs	r3, #127	; 0x7f
 800207e:	0020      	movs	r0, r4
 8002080:	4399      	bics	r1, r3
 8002082:	f000 fd93 	bl	8002bac <USBD_LL_StallEP>
    break;
 8002086:	e003      	b.n	8002090 <USBD_LL_SetupStage+0x48>
    USBD_StdDevReq (pdev, &pdev->request);
 8002088:	0029      	movs	r1, r5
 800208a:	0020      	movs	r0, r4
 800208c:	f000 f910 	bl	80022b0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002090:	2000      	movs	r0, #0
 8002092:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002094:	0029      	movs	r1, r5
 8002096:	0020      	movs	r0, r4
 8002098:	f000 fa3e 	bl	8002518 <USBD_StdItfReq>
    break;
 800209c:	e7f8      	b.n	8002090 <USBD_LL_SetupStage+0x48>
    USBD_StdEPReq(pdev, &pdev->request);
 800209e:	0029      	movs	r1, r5
 80020a0:	0020      	movs	r0, r4
 80020a2:	f000 fa63 	bl	800256c <USBD_StdEPReq>
    break;
 80020a6:	e7f3      	b.n	8002090 <USBD_LL_SetupStage+0x48>
 80020a8:	00000286 	.word	0x00000286

080020ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	0004      	movs	r4, r0
 80020b0:	0015      	movs	r5, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80020b2:	2900      	cmp	r1, #0
 80020b4:	d130      	bne.n	8002118 <USBD_LL_DataOutStage+0x6c>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80020b6:	239b      	movs	r3, #155	; 0x9b
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	58c2      	ldr	r2, [r0, r3]
 80020bc:	2a03      	cmp	r2, #3
 80020be:	d123      	bne.n	8002108 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 80020c0:	0002      	movs	r2, r0
 80020c2:	3241      	adds	r2, #65	; 0x41
 80020c4:	32ff      	adds	r2, #255	; 0xff
 80020c6:	68d3      	ldr	r3, [r2, #12]
 80020c8:	6910      	ldr	r0, [r2, #16]
 80020ca:	4283      	cmp	r3, r0
 80020cc:	d90b      	bls.n	80020e6 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -=  pep->maxpacket;
 80020ce:	1a1b      	subs	r3, r3, r0
 80020d0:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx (pdev,
 80020d2:	b282      	uxth	r2, r0
 80020d4:	4298      	cmp	r0, r3
 80020d6:	d900      	bls.n	80020da <USBD_LL_DataOutStage+0x2e>
 80020d8:	b29a      	uxth	r2, r3
 80020da:	0029      	movs	r1, r5
 80020dc:	0020      	movs	r0, r4
 80020de:	f000 fb39 	bl	8002754 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80020e2:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 80020e4:	e016      	b.n	8002114 <USBD_LL_DataOutStage+0x68>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020e6:	23a3      	movs	r3, #163	; 0xa3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	58e3      	ldr	r3, [r4, r3]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <USBD_LL_DataOutStage+0x54>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80020f2:	229d      	movs	r2, #157	; 0x9d
 80020f4:	0092      	lsls	r2, r2, #2
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80020f6:	5ca2      	ldrb	r2, [r4, r2]
 80020f8:	2a03      	cmp	r2, #3
 80020fa:	d101      	bne.n	8002100 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80020fc:	0020      	movs	r0, r4
 80020fe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002100:	0020      	movs	r0, r4
 8002102:	f000 fb2f 	bl	8002764 <USBD_CtlSendStatus>
 8002106:	e7ec      	b.n	80020e2 <USBD_LL_DataOutStage+0x36>
  return USBD_OK;
 8002108:	000d      	movs	r5, r1
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800210a:	2a05      	cmp	r2, #5
 800210c:	d102      	bne.n	8002114 <USBD_LL_DataOutStage+0x68>
        pdev->ep0_state = USBD_EP0_IDLE;
 800210e:	50e1      	str	r1, [r4, r3]
        USBD_LL_StallEP(pdev, 0U);
 8002110:	f000 fd4c 	bl	8002bac <USBD_LL_StallEP>
}
 8002114:	0028      	movs	r0, r5
 8002116:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8002118:	23a3      	movs	r3, #163	; 0xa3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800211e:	2502      	movs	r5, #2
  else if((pdev->pClass->DataOut != NULL) &&
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f6      	beq.n	8002114 <USBD_LL_DataOutStage+0x68>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002126:	229d      	movs	r2, #157	; 0x9d
 8002128:	0092      	lsls	r2, r2, #2
  else if((pdev->pClass->DataOut != NULL) &&
 800212a:	5c82      	ldrb	r2, [r0, r2]
 800212c:	2a03      	cmp	r2, #3
 800212e:	d1f1      	bne.n	8002114 <USBD_LL_DataOutStage+0x68>
    pdev->pClass->DataOut(pdev, epnum);
 8002130:	4798      	blx	r3
 8002132:	e7d6      	b.n	80020e2 <USBD_LL_DataOutStage+0x36>

08002134 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	000d      	movs	r5, r1
 8002138:	0004      	movs	r4, r0
 800213a:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800213c:	2d00      	cmp	r5, #0
 800213e:	d14b      	bne.n	80021d8 <USBD_LL_DataInStage+0xa4>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002140:	239b      	movs	r3, #155	; 0x9b
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	58c3      	ldr	r3, [r0, r3]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d13f      	bne.n	80021ca <USBD_LL_DataInStage+0x96>
    {
      if(pep->rem_length > pep->maxpacket)
 800214a:	6a02      	ldr	r2, [r0, #32]
 800214c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800214e:	42b2      	cmp	r2, r6
 8002150:	d912      	bls.n	8002178 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002152:	1b92      	subs	r2, r2, r6
 8002154:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8002156:	b292      	uxth	r2, r2
 8002158:	f000 fae4 	bl	8002724 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800215c:	002b      	movs	r3, r5
 800215e:	002a      	movs	r2, r5
 8002160:	0029      	movs	r1, r5
 8002162:	0020      	movs	r0, r4
 8002164:	f000 fd74 	bl	8002c50 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002168:	239e      	movs	r3, #158	; 0x9e
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	5ce2      	ldrb	r2, [r4, r3]
 800216e:	2000      	movs	r0, #0
 8002170:	2a01      	cmp	r2, #1
 8002172:	d100      	bne.n	8002176 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002174:	54e0      	strb	r0, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8002178:	69c7      	ldr	r7, [r0, #28]
 800217a:	0031      	movs	r1, r6
 800217c:	0038      	movs	r0, r7
 800217e:	f7fe f85d 	bl	800023c <__aeabi_uidivmod>
 8002182:	1e0d      	subs	r5, r1, #0
 8002184:	d10c      	bne.n	80021a0 <USBD_LL_DataInStage+0x6c>
 8002186:	42be      	cmp	r6, r7
 8002188:	d80a      	bhi.n	80021a0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length < pdev->ep0_data_len))
 800218a:	269c      	movs	r6, #156	; 0x9c
 800218c:	00b6      	lsls	r6, r6, #2
           (pep->total_length >= pep->maxpacket) &&
 800218e:	59a3      	ldr	r3, [r4, r6]
 8002190:	429f      	cmp	r7, r3
 8002192:	d205      	bcs.n	80021a0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002194:	000a      	movs	r2, r1
 8002196:	0020      	movs	r0, r4
 8002198:	f000 fac4 	bl	8002724 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800219c:	51a5      	str	r5, [r4, r6]
 800219e:	e7dd      	b.n	800215c <USBD_LL_DataInStage+0x28>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80021a0:	23a3      	movs	r3, #163	; 0xa3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	58e3      	ldr	r3, [r4, r3]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <USBD_LL_DataInStage+0x86>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80021ac:	229d      	movs	r2, #157	; 0x9d
 80021ae:	0092      	lsls	r2, r2, #2
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80021b0:	5ca2      	ldrb	r2, [r4, r2]
 80021b2:	2a03      	cmp	r2, #3
 80021b4:	d101      	bne.n	80021ba <USBD_LL_DataInStage+0x86>
            pdev->pClass->EP0_TxSent(pdev);
 80021b6:	0020      	movs	r0, r4
 80021b8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	0020      	movs	r0, r4
 80021be:	f000 fcf5 	bl	8002bac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80021c2:	0020      	movs	r0, r4
 80021c4:	f000 fada 	bl	800277c <USBD_CtlReceiveStatus>
 80021c8:	e7ce      	b.n	8002168 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80021ca:	2204      	movs	r2, #4
 80021cc:	4393      	bics	r3, r2
 80021ce:	d1cb      	bne.n	8002168 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	f000 fceb 	bl	8002bac <USBD_LL_StallEP>
 80021d6:	e7c7      	b.n	8002168 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL) &&
 80021d8:	23a3      	movs	r3, #163	; 0xa3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80021de:	2002      	movs	r0, #2
  else if((pdev->pClass->DataIn != NULL) &&
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0c7      	beq.n	8002176 <USBD_LL_DataInStage+0x42>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80021e6:	229d      	movs	r2, #157	; 0x9d
 80021e8:	0092      	lsls	r2, r2, #2
  else if((pdev->pClass->DataIn != NULL) &&
 80021ea:	5ca2      	ldrb	r2, [r4, r2]
 80021ec:	2a03      	cmp	r2, #3
 80021ee:	d1c2      	bne.n	8002176 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 80021f0:	0029      	movs	r1, r5
 80021f2:	0020      	movs	r0, r4
 80021f4:	4798      	blx	r3
  return USBD_OK;
 80021f6:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80021f8:	e7bd      	b.n	8002176 <USBD_LL_DataInStage+0x42>

080021fa <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80021fa:	2200      	movs	r2, #0
{
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002200:	0011      	movs	r1, r2
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	f000 fcb0 	bl	8002b68 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002208:	0023      	movs	r3, r4
 800220a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800220c:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800220e:	33fc      	adds	r3, #252	; 0xfc
 8002210:	649d      	str	r5, [r3, #72]	; 0x48
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002212:	655e      	str	r6, [r3, #84]	; 0x54

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0033      	movs	r3, r6
 8002218:	2200      	movs	r2, #0
 800221a:	0020      	movs	r0, r4
 800221c:	f000 fca4 	bl	8002b68 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002220:	239d      	movs	r3, #157	; 0x9d
  pdev->ep0_state = USBD_EP0_IDLE;
 8002222:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002224:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002226:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002228:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800222a:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800222c:	3b08      	subs	r3, #8
 800222e:	50e1      	str	r1, [r4, r3]
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;
 8002230:	3310      	adds	r3, #16
  pdev->dev_config= 0U;
 8002232:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002234:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8002236:	3314      	adds	r3, #20
 8002238:	58e3      	ldr	r3, [r4, r3]
 800223a:	428b      	cmp	r3, r1
 800223c:	d005      	beq.n	800224a <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800223e:	23a3      	movs	r3, #163	; 0xa3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	58e3      	ldr	r3, [r4, r3]
 8002244:	0020      	movs	r0, r4
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4798      	blx	r3
  }

  return USBD_OK;
}
 800224a:	2000      	movs	r0, #0
 800224c:	bd70      	pop	{r4, r5, r6, pc}

0800224e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800224e:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002250:	2000      	movs	r0, #0
 8002252:	4770      	bx	lr

08002254 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002254:	239d      	movs	r3, #157	; 0x9d
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	5cc1      	ldrb	r1, [r0, r3]
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <USBD_LL_Suspend+0x14>)
 800225c:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800225e:	2204      	movs	r2, #4
 8002260:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8002262:	2000      	movs	r0, #0
 8002264:	4770      	bx	lr
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	00000275 	.word	0x00000275

0800226c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <USBD_LL_Resume+0xc>)
 800226e:	5cc2      	ldrb	r2, [r0, r3]
 8002270:	3b01      	subs	r3, #1
 8002272:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8002274:	2000      	movs	r0, #0
 8002276:	4770      	bx	lr
 8002278:	00000275 	.word	0x00000275

0800227c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800227c:	239d      	movs	r3, #157	; 0x9d
{
 800227e:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	5cc3      	ldrb	r3, [r0, r3]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d106      	bne.n	8002296 <USBD_LL_SOF+0x1a>
  {
    if(pdev->pClass->SOF != NULL)
 8002288:	23a3      	movs	r3, #163	; 0xa3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	58c3      	ldr	r3, [r0, r3]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d000      	beq.n	8002296 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8002294:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002296:	2000      	movs	r0, #0
 8002298:	bd10      	pop	{r4, pc}

0800229a <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800229a:	b510      	push	{r4, lr}
 800229c:	0004      	movs	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	f000 fc84 	bl	8002bac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80022a4:	2100      	movs	r1, #0
 80022a6:	0020      	movs	r0, r4
 80022a8:	f000 fc80 	bl	8002bac <USBD_LL_StallEP>
}
 80022ac:	bd10      	pop	{r4, pc}
	...

080022b0 <USBD_StdDevReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80022b0:	2260      	movs	r2, #96	; 0x60
 80022b2:	780b      	ldrb	r3, [r1, #0]
{
 80022b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80022b6:	4013      	ands	r3, r2
{
 80022b8:	0004      	movs	r4, r0
 80022ba:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80022bc:	2b20      	cmp	r3, #32
 80022be:	d014      	beq.n	80022ea <USBD_StdDevReq+0x3a>
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d012      	beq.n	80022ea <USBD_StdDevReq+0x3a>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d000      	beq.n	80022ca <USBD_StdDevReq+0x1a>
 80022c8:	e095      	b.n	80023f6 <USBD_StdDevReq+0x146>
    switch (req->bRequest)
 80022ca:	7848      	ldrb	r0, [r1, #1]
 80022cc:	2809      	cmp	r0, #9
 80022ce:	d900      	bls.n	80022d2 <USBD_StdDevReq+0x22>
 80022d0:	e091      	b.n	80023f6 <USBD_StdDevReq+0x146>
 80022d2:	f7fd ff23 	bl	800011c <__gnu_thumb1_case_uhi>
 80022d6:	00ee      	.short	0x00ee
 80022d8:	0090010c 	.word	0x0090010c
 80022dc:	00900104 	.word	0x00900104
 80022e0:	00130081 	.word	0x00130081
 80022e4:	00d80090 	.word	0x00d80090
 80022e8:	00a2      	.short	0x00a2
    pdev->pClass->Setup(pdev, req);
 80022ea:	23a3      	movs	r3, #163	; 0xa3
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	58e3      	ldr	r3, [r4, r3]
 80022f0:	0029      	movs	r1, r5
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	0020      	movs	r0, r4
 80022f6:	4798      	blx	r3
}
 80022f8:	2000      	movs	r0, #0
 80022fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  switch (req->wValue >> 8)
 80022fc:	884b      	ldrh	r3, [r1, #2]
 80022fe:	0a18      	lsrs	r0, r3, #8
 8002300:	3801      	subs	r0, #1
 8002302:	2806      	cmp	r0, #6
 8002304:	d877      	bhi.n	80023f6 <USBD_StdDevReq+0x146>
 8002306:	f7fd feff 	bl	8000108 <__gnu_thumb1_case_uqi>
 800230a:	2504      	.short	0x2504
 800230c:	50767634 	.word	0x50767634
 8002310:	5b          	.byte	0x5b
 8002311:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002312:	23a2      	movs	r3, #162	; 0xa2
 8002314:	466a      	mov	r2, sp
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	58e3      	ldr	r3, [r4, r3]
 800231a:	7c20      	ldrb	r0, [r4, #16]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1d91      	adds	r1, r2, #6
 8002320:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8002322:	466b      	mov	r3, sp
 8002324:	1d9e      	adds	r6, r3, #6
 8002326:	8831      	ldrh	r1, [r6, #0]
 8002328:	2900      	cmp	r1, #0
 800232a:	d00c      	beq.n	8002346 <USBD_StdDevReq+0x96>
 800232c:	88ea      	ldrh	r2, [r5, #6]
 800232e:	2a00      	cmp	r2, #0
 8002330:	d009      	beq.n	8002346 <USBD_StdDevReq+0x96>
    len = MIN(len, req->wLength);
 8002332:	1c0b      	adds	r3, r1, #0
 8002334:	4291      	cmp	r1, r2
 8002336:	d900      	bls.n	800233a <USBD_StdDevReq+0x8a>
 8002338:	1c13      	adds	r3, r2, #0
    USBD_CtlSendData (pdev, pbuf, len);
 800233a:	0001      	movs	r1, r0
    len = MIN(len, req->wLength);
 800233c:	b29a      	uxth	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800233e:	0020      	movs	r0, r4
    len = MIN(len, req->wLength);
 8002340:	8033      	strh	r3, [r6, #0]
    USBD_CtlSendData (pdev, pbuf, len);
 8002342:	f000 f9e1 	bl	8002708 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8002346:	88eb      	ldrh	r3, [r5, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1d5      	bne.n	80022f8 <USBD_StdDevReq+0x48>
    USBD_CtlSendStatus(pdev);
 800234c:	0020      	movs	r0, r4
 800234e:	f000 fa09 	bl	8002764 <USBD_CtlSendStatus>
 8002352:	e7d1      	b.n	80022f8 <USBD_StdDevReq+0x48>
 8002354:	23a3      	movs	r3, #163	; 0xa3
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8002356:	7c22      	ldrb	r2, [r4, #16]
 8002358:	009b      	lsls	r3, r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800235a:	58e3      	ldr	r3, [r4, r3]
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800235c:	2a00      	cmp	r2, #0
 800235e:	d106      	bne.n	800236e <USBD_StdDevReq+0xbe>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002362:	466a      	mov	r2, sp
 8002364:	1d90      	adds	r0, r2, #6
 8002366:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002368:	2302      	movs	r3, #2
 800236a:	7043      	strb	r3, [r0, #1]
 800236c:	e7d9      	b.n	8002322 <USBD_StdDevReq+0x72>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	e7f7      	b.n	8002362 <USBD_StdDevReq+0xb2>
    switch ((uint8_t)(req->wValue))
 8002372:	b2d8      	uxtb	r0, r3
 8002374:	2805      	cmp	r0, #5
 8002376:	d83e      	bhi.n	80023f6 <USBD_StdDevReq+0x146>
 8002378:	22a2      	movs	r2, #162	; 0xa2
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	7c23      	ldrb	r3, [r4, #16]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800237e:	58a2      	ldr	r2, [r4, r2]
    switch ((uint8_t)(req->wValue))
 8002380:	f7fd fec2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002384:	0d0b0903 	.word	0x0d0b0903
 8002388:	110f      	.short	0x110f
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800238a:	6852      	ldr	r2, [r2, #4]
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800238c:	4669      	mov	r1, sp
 800238e:	0018      	movs	r0, r3
 8002390:	3106      	adds	r1, #6
 8002392:	4790      	blx	r2
 8002394:	e7c5      	b.n	8002322 <USBD_StdDevReq+0x72>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002396:	6892      	ldr	r2, [r2, #8]
 8002398:	e7f8      	b.n	800238c <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800239a:	68d2      	ldr	r2, [r2, #12]
 800239c:	e7f6      	b.n	800238c <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800239e:	6912      	ldr	r2, [r2, #16]
 80023a0:	e7f4      	b.n	800238c <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80023a2:	6952      	ldr	r2, [r2, #20]
 80023a4:	e7f2      	b.n	800238c <USBD_StdDevReq+0xdc>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80023a6:	6992      	ldr	r2, [r2, #24]
 80023a8:	e7f0      	b.n	800238c <USBD_StdDevReq+0xdc>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80023aa:	7c23      	ldrb	r3, [r4, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d122      	bne.n	80023f6 <USBD_StdDevReq+0x146>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80023b0:	23a3      	movs	r3, #163	; 0xa3
 80023b2:	466a      	mov	r2, sp
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	58e3      	ldr	r3, [r4, r3]
 80023b8:	1d90      	adds	r0, r2, #6
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	4798      	blx	r3
 80023be:	e7b0      	b.n	8002322 <USBD_StdDevReq+0x72>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80023c0:	7c23      	ldrb	r3, [r4, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d117      	bne.n	80023f6 <USBD_StdDevReq+0x146>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80023c6:	23a3      	movs	r3, #163	; 0xa3
 80023c8:	466a      	mov	r2, sp
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	58e3      	ldr	r3, [r4, r3]
 80023ce:	1d90      	adds	r0, r2, #6
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80023d4:	2307      	movs	r3, #7
 80023d6:	e7c8      	b.n	800236a <USBD_StdDevReq+0xba>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80023d8:	888b      	ldrh	r3, [r1, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10b      	bne.n	80023f6 <USBD_StdDevReq+0x146>
 80023de:	88cb      	ldrh	r3, [r1, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <USBD_StdDevReq+0x146>
 80023e4:	884e      	ldrh	r6, [r1, #2]
 80023e6:	2e7f      	cmp	r6, #127	; 0x7f
 80023e8:	d805      	bhi.n	80023f6 <USBD_StdDevReq+0x146>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80023ea:	259d      	movs	r5, #157	; 0x9d
 80023ec:	00ad      	lsls	r5, r5, #2
 80023ee:	5d63      	ldrb	r3, [r4, r5]
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80023f0:	b2f1      	uxtb	r1, r6
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d103      	bne.n	80023fe <USBD_StdDevReq+0x14e>
    USBD_CtlError(pdev, req);
 80023f6:	0020      	movs	r0, r4
 80023f8:	f7ff ff4f 	bl	800229a <USBD_CtlError.constprop.1>
    break;
 80023fc:	e77c      	b.n	80022f8 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <USBD_StdDevReq+0x260>)
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002400:	0020      	movs	r0, r4
      pdev->dev_address = dev_addr;
 8002402:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002404:	f000 fc04 	bl	8002c10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002408:	0020      	movs	r0, r4
 800240a:	f000 f9ab 	bl	8002764 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800240e:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8002410:	2e00      	cmp	r6, #0
 8002412:	d100      	bne.n	8002416 <USBD_StdDevReq+0x166>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002414:	2301      	movs	r3, #1
 8002416:	5563      	strb	r3, [r4, r5]
 8002418:	e76e      	b.n	80022f8 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 800241a:	7889      	ldrb	r1, [r1, #2]
 800241c:	4d3d      	ldr	r5, [pc, #244]	; (8002514 <USBD_StdDevReq+0x264>)
 800241e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002420:	2901      	cmp	r1, #1
 8002422:	d8e8      	bhi.n	80023f6 <USBD_StdDevReq+0x146>
    switch (pdev->dev_state)
 8002424:	239d      	movs	r3, #157	; 0x9d
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	5ce2      	ldrb	r2, [r4, r3]
 800242a:	2a02      	cmp	r2, #2
 800242c:	d009      	beq.n	8002442 <USBD_StdDevReq+0x192>
 800242e:	2a03      	cmp	r2, #3
 8002430:	d015      	beq.n	800245e <USBD_StdDevReq+0x1ae>
      USBD_CtlError(pdev, req);
 8002432:	0020      	movs	r0, r4
 8002434:	f7ff ff31 	bl	800229a <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8002438:	7829      	ldrb	r1, [r5, #0]
 800243a:	0020      	movs	r0, r4
 800243c:	f7ff fdfb 	bl	8002036 <USBD_ClrClassConfig>
 8002440:	e75a      	b.n	80022f8 <USBD_StdDevReq+0x48>
      if (cfgidx)
 8002442:	2900      	cmp	r1, #0
 8002444:	d100      	bne.n	8002448 <USBD_StdDevReq+0x198>
 8002446:	e781      	b.n	800234c <USBD_StdDevReq+0x9c>
        pdev->dev_config = cfgidx;
 8002448:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800244a:	2203      	movs	r2, #3
        pdev->dev_config = cfgidx;
 800244c:	6061      	str	r1, [r4, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800244e:	54e2      	strb	r2, [r4, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002450:	0020      	movs	r0, r4
 8002452:	f7ff fde3 	bl	800201c <USBD_SetClassConfig>
 8002456:	2802      	cmp	r0, #2
 8002458:	d000      	beq.n	800245c <USBD_StdDevReq+0x1ac>
 800245a:	e777      	b.n	800234c <USBD_StdDevReq+0x9c>
 800245c:	e7cb      	b.n	80023f6 <USBD_StdDevReq+0x146>
      if (cfgidx == 0U)
 800245e:	2900      	cmp	r1, #0
 8002460:	d106      	bne.n	8002470 <USBD_StdDevReq+0x1c0>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002462:	2202      	movs	r2, #2
        USBD_ClrClassConfig(pdev, cfgidx);
 8002464:	0020      	movs	r0, r4
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002466:	54e2      	strb	r2, [r4, r3]
        pdev->dev_config = cfgidx;
 8002468:	6061      	str	r1, [r4, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800246a:	f7ff fde4 	bl	8002036 <USBD_ClrClassConfig>
 800246e:	e76d      	b.n	800234c <USBD_StdDevReq+0x9c>
      else if (cfgidx != pdev->dev_config)
 8002470:	6861      	ldr	r1, [r4, #4]
 8002472:	2901      	cmp	r1, #1
 8002474:	d100      	bne.n	8002478 <USBD_StdDevReq+0x1c8>
 8002476:	e769      	b.n	800234c <USBD_StdDevReq+0x9c>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002478:	b2c9      	uxtb	r1, r1
 800247a:	0020      	movs	r0, r4
 800247c:	f7ff fddb 	bl	8002036 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002480:	7829      	ldrb	r1, [r5, #0]
 8002482:	6061      	str	r1, [r4, #4]
 8002484:	e7e4      	b.n	8002450 <USBD_StdDevReq+0x1a0>
  if (req->wLength != 1U)
 8002486:	88ca      	ldrh	r2, [r1, #6]
 8002488:	2a01      	cmp	r2, #1
 800248a:	d1b4      	bne.n	80023f6 <USBD_StdDevReq+0x146>
    switch (pdev->dev_state)
 800248c:	239d      	movs	r3, #157	; 0x9d
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	5ce3      	ldrb	r3, [r4, r3]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0af      	beq.n	80023f6 <USBD_StdDevReq+0x146>
 8002496:	2b02      	cmp	r3, #2
 8002498:	d906      	bls.n	80024a8 <USBD_StdDevReq+0x1f8>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800249a:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 800249c:	2b03      	cmp	r3, #3
 800249e:	d1aa      	bne.n	80023f6 <USBD_StdDevReq+0x146>
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80024a0:	0020      	movs	r0, r4
 80024a2:	f000 f931 	bl	8002708 <USBD_CtlSendData>
 80024a6:	e727      	b.n	80022f8 <USBD_StdDevReq+0x48>
      pdev->dev_default_config = 0U;
 80024a8:	2300      	movs	r3, #0
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80024aa:	0021      	movs	r1, r4
      pdev->dev_default_config = 0U;
 80024ac:	60a3      	str	r3, [r4, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80024ae:	3108      	adds	r1, #8
 80024b0:	e7f6      	b.n	80024a0 <USBD_StdDevReq+0x1f0>
  switch (pdev->dev_state)
 80024b2:	239d      	movs	r3, #157	; 0x9d
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	5ce3      	ldrb	r3, [r4, r3]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d89b      	bhi.n	80023f6 <USBD_StdDevReq+0x146>
    if(req->wLength != 0x2U)
 80024be:	88cb      	ldrh	r3, [r1, #6]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d198      	bne.n	80023f6 <USBD_StdDevReq+0x146>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60e3      	str	r3, [r4, #12]
    if (pdev->dev_remote_wakeup)
 80024c8:	239f      	movs	r3, #159	; 0x9f
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	58e3      	ldr	r3, [r4, r3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <USBD_StdDevReq+0x226>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80024d2:	2303      	movs	r3, #3
 80024d4:	60e3      	str	r3, [r4, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80024d6:	0021      	movs	r1, r4
 80024d8:	2202      	movs	r2, #2
 80024da:	310c      	adds	r1, #12
 80024dc:	e7e0      	b.n	80024a0 <USBD_StdDevReq+0x1f0>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80024de:	884b      	ldrh	r3, [r1, #2]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d000      	beq.n	80024e6 <USBD_StdDevReq+0x236>
 80024e4:	e708      	b.n	80022f8 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 80024e6:	229f      	movs	r2, #159	; 0x9f
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	50a3      	str	r3, [r4, r2]
 80024ec:	e72e      	b.n	800234c <USBD_StdDevReq+0x9c>
  switch (pdev->dev_state)
 80024ee:	239d      	movs	r3, #157	; 0x9d
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	5ce3      	ldrb	r3, [r4, r3]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d900      	bls.n	80024fc <USBD_StdDevReq+0x24c>
 80024fa:	e77c      	b.n	80023f6 <USBD_StdDevReq+0x146>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80024fc:	884b      	ldrh	r3, [r1, #2]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d000      	beq.n	8002504 <USBD_StdDevReq+0x254>
 8002502:	e6f9      	b.n	80022f8 <USBD_StdDevReq+0x48>
      pdev->dev_remote_wakeup = 0U;
 8002504:	239f      	movs	r3, #159	; 0x9f
 8002506:	2200      	movs	r2, #0
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	50e2      	str	r2, [r4, r3]
 800250c:	e71e      	b.n	800234c <USBD_StdDevReq+0x9c>
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	00000276 	.word	0x00000276
 8002514:	200001e0 	.word	0x200001e0

08002518 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002518:	2260      	movs	r2, #96	; 0x60
 800251a:	780b      	ldrb	r3, [r1, #0]
{
 800251c:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800251e:	4013      	ands	r3, r2
{
 8002520:	0004      	movs	r4, r0
 8002522:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002524:	2b20      	cmp	r3, #32
 8002526:	d003      	beq.n	8002530 <USBD_StdItfReq+0x18>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d001      	beq.n	8002530 <USBD_StdItfReq+0x18>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <USBD_StdItfReq+0x4c>
    switch (pdev->dev_state)
 8002530:	239d      	movs	r3, #157	; 0x9d
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	5ce3      	ldrb	r3, [r4, r3]
 8002536:	3b01      	subs	r3, #1
 8002538:	2b02      	cmp	r3, #2
 800253a:	d813      	bhi.n	8002564 <USBD_StdItfReq+0x4c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800253c:	792b      	ldrb	r3, [r5, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d810      	bhi.n	8002564 <USBD_StdItfReq+0x4c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8002542:	23a3      	movs	r3, #163	; 0xa3
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	58e3      	ldr	r3, [r4, r3]
 8002548:	0029      	movs	r1, r5
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	0020      	movs	r0, r4
 800254e:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8002550:	88eb      	ldrh	r3, [r5, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <USBD_StdItfReq+0x48>
 8002556:	2800      	cmp	r0, #0
 8002558:	d102      	bne.n	8002560 <USBD_StdItfReq+0x48>
          USBD_CtlSendStatus(pdev);
 800255a:	0020      	movs	r0, r4
 800255c:	f000 f902 	bl	8002764 <USBD_CtlSendStatus>
}
 8002560:	2000      	movs	r0, #0
 8002562:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8002564:	0020      	movs	r0, r4
 8002566:	f7ff fe98 	bl	800229a <USBD_CtlError.constprop.1>
    break;
 800256a:	e7f9      	b.n	8002560 <USBD_StdItfReq+0x48>

0800256c <USBD_StdEPReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800256c:	780a      	ldrb	r2, [r1, #0]
{
 800256e:	000b      	movs	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002570:	2160      	movs	r1, #96	; 0x60
{
 8002572:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002574:	400a      	ands	r2, r1
{
 8002576:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002578:	2a20      	cmp	r2, #32
 800257a:	d017      	beq.n	80025ac <USBD_StdEPReq+0x40>
 800257c:	2a40      	cmp	r2, #64	; 0x40
 800257e:	d015      	beq.n	80025ac <USBD_StdEPReq+0x40>
 8002580:	2a00      	cmp	r2, #0
 8002582:	d10f      	bne.n	80025a4 <USBD_StdEPReq+0x38>
  ep_addr  = LOBYTE(req->wIndex);
 8002584:	8898      	ldrh	r0, [r3, #4]
    switch (req->bRequest)
 8002586:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002588:	b2c1      	uxtb	r1, r0
    switch (req->bRequest)
 800258a:	2a01      	cmp	r2, #1
 800258c:	d026      	beq.n	80025dc <USBD_StdEPReq+0x70>
 800258e:	2a00      	cmp	r2, #0
 8002590:	d03e      	beq.n	8002610 <USBD_StdEPReq+0xa4>
 8002592:	2a03      	cmp	r2, #3
 8002594:	d106      	bne.n	80025a4 <USBD_StdEPReq+0x38>
      switch (pdev->dev_state)
 8002596:	229d      	movs	r2, #157	; 0x9d
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	5ca2      	ldrb	r2, [r4, r2]
 800259c:	2a02      	cmp	r2, #2
 800259e:	d02d      	beq.n	80025fc <USBD_StdEPReq+0x90>
 80025a0:	2a03      	cmp	r2, #3
 80025a2:	d00c      	beq.n	80025be <USBD_StdEPReq+0x52>
    USBD_CtlError(pdev, req);
 80025a4:	0020      	movs	r0, r4
 80025a6:	f7ff fe78 	bl	800229a <USBD_CtlError.constprop.1>
    break;
 80025aa:	e006      	b.n	80025ba <USBD_StdEPReq+0x4e>
    pdev->pClass->Setup (pdev, req);
 80025ac:	22a3      	movs	r2, #163	; 0xa3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58a2      	ldr	r2, [r4, r2]
 80025b2:	0019      	movs	r1, r3
 80025b4:	6892      	ldr	r2, [r2, #8]
 80025b6:	0020      	movs	r0, r4
 80025b8:	4790      	blx	r2
}
 80025ba:	2000      	movs	r0, #0
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 80025be:	885a      	ldrh	r2, [r3, #2]
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d107      	bne.n	80025d4 <USBD_StdEPReq+0x68>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80025c4:	064a      	lsls	r2, r1, #25
 80025c6:	d005      	beq.n	80025d4 <USBD_StdEPReq+0x68>
 80025c8:	88db      	ldrh	r3, [r3, #6]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <USBD_StdEPReq+0x68>
            USBD_LL_StallEP(pdev, ep_addr);
 80025ce:	0020      	movs	r0, r4
 80025d0:	f000 faec 	bl	8002bac <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 80025d4:	0020      	movs	r0, r4
 80025d6:	f000 f8c5 	bl	8002764 <USBD_CtlSendStatus>
        break;
 80025da:	e7ee      	b.n	80025ba <USBD_StdEPReq+0x4e>
      switch (pdev->dev_state)
 80025dc:	229d      	movs	r2, #157	; 0x9d
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	5ca2      	ldrb	r2, [r4, r2]
 80025e2:	2a02      	cmp	r2, #2
 80025e4:	d00a      	beq.n	80025fc <USBD_StdEPReq+0x90>
 80025e6:	2a03      	cmp	r2, #3
 80025e8:	d1dc      	bne.n	80025a4 <USBD_StdEPReq+0x38>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80025ea:	885b      	ldrh	r3, [r3, #2]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e4      	bne.n	80025ba <USBD_StdEPReq+0x4e>
          if ((ep_addr & 0x7FU) != 0x00U)
 80025f0:	064b      	lsls	r3, r1, #25
 80025f2:	d0ef      	beq.n	80025d4 <USBD_StdEPReq+0x68>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80025f4:	0020      	movs	r0, r4
 80025f6:	f000 fae9 	bl	8002bcc <USBD_LL_ClearStallEP>
 80025fa:	e7eb      	b.n	80025d4 <USBD_StdEPReq+0x68>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80025fc:	064b      	lsls	r3, r1, #25
 80025fe:	d0d1      	beq.n	80025a4 <USBD_StdEPReq+0x38>
          USBD_LL_StallEP(pdev, ep_addr);
 8002600:	0020      	movs	r0, r4
 8002602:	f000 fad3 	bl	8002bac <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0020      	movs	r0, r4
 800260a:	f000 facf 	bl	8002bac <USBD_LL_StallEP>
 800260e:	e7d4      	b.n	80025ba <USBD_StdEPReq+0x4e>
      switch (pdev->dev_state)
 8002610:	239d      	movs	r3, #157	; 0x9d
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	5ce3      	ldrb	r3, [r4, r3]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d017      	beq.n	800264a <USBD_StdEPReq+0xde>
 800261a:	2b03      	cmp	r3, #3
 800261c:	d1c2      	bne.n	80025a4 <USBD_StdEPReq+0x38>
 800261e:	230f      	movs	r3, #15
 8002620:	2214      	movs	r2, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002622:	400b      	ands	r3, r1
 8002624:	4353      	muls	r3, r2
 8002626:	18e3      	adds	r3, r4, r3
        if((ep_addr & 0x80U) == 0x80U)
 8002628:	0600      	lsls	r0, r0, #24
 800262a:	d51e      	bpl.n	800266a <USBD_StdEPReq+0xfe>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0b8      	beq.n	80025a4 <USBD_StdEPReq+0x38>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002632:	257f      	movs	r5, #127	; 0x7f
 8002634:	400d      	ands	r5, r1
 8002636:	3501      	adds	r5, #1
 8002638:	4355      	muls	r5, r2
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800263a:	237f      	movs	r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800263c:	1965      	adds	r5, r4, r5
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800263e:	400b      	ands	r3, r1
 8002640:	d11e      	bne.n	8002680 <USBD_StdEPReq+0x114>
            pep->status = 0x0001U;
 8002642:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002644:	2202      	movs	r2, #2
 8002646:	0029      	movs	r1, r5
 8002648:	e00b      	b.n	8002662 <USBD_StdEPReq+0xf6>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800264a:	064b      	lsls	r3, r1, #25
 800264c:	d1aa      	bne.n	80025a4 <USBD_StdEPReq+0x38>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800264e:	0021      	movs	r1, r4
 8002650:	3141      	adds	r1, #65	; 0x41
 8002652:	31ff      	adds	r1, #255	; 0xff
 8002654:	0603      	lsls	r3, r0, #24
 8002656:	d501      	bpl.n	800265c <USBD_StdEPReq+0xf0>
 8002658:	392d      	subs	r1, #45	; 0x2d
 800265a:	39ff      	subs	r1, #255	; 0xff
          pep->status = 0x0000U;
 800265c:	2300      	movs	r3, #0
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800265e:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 8002660:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002662:	0020      	movs	r0, r4
 8002664:	f000 f850 	bl	8002708 <USBD_CtlSendData>
          break;
 8002668:	e7a7      	b.n	80025ba <USBD_StdEPReq+0x4e>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800266a:	33fc      	adds	r3, #252	; 0xfc
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	2b00      	cmp	r3, #0
 8002670:	d100      	bne.n	8002674 <USBD_StdEPReq+0x108>
 8002672:	e797      	b.n	80025a4 <USBD_StdEPReq+0x38>
          &pdev->ep_out[ep_addr & 0x7FU];
 8002674:	257f      	movs	r5, #127	; 0x7f
 8002676:	400d      	ands	r5, r1
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8002678:	4355      	muls	r5, r2
 800267a:	3541      	adds	r5, #65	; 0x41
 800267c:	35ff      	adds	r5, #255	; 0xff
 800267e:	e7dc      	b.n	800263a <USBD_StdEPReq+0xce>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002680:	0020      	movs	r0, r4
 8002682:	f000 fab3 	bl	8002bec <USBD_LL_IsStallEP>
 8002686:	2800      	cmp	r0, #0
 8002688:	d001      	beq.n	800268e <USBD_StdEPReq+0x122>
            pep->status = 0x0001U;
 800268a:	2301      	movs	r3, #1
 800268c:	e7d9      	b.n	8002642 <USBD_StdEPReq+0xd6>
            pep->status = 0x0000U;
 800268e:	6028      	str	r0, [r5, #0]
 8002690:	e7d8      	b.n	8002644 <USBD_StdEPReq+0xd8>

08002692 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002692:	780b      	ldrb	r3, [r1, #0]
 8002694:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002696:	784b      	ldrb	r3, [r1, #1]
 8002698:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800269a:	78ca      	ldrb	r2, [r1, #3]
 800269c:	788b      	ldrb	r3, [r1, #2]
 800269e:	0212      	lsls	r2, r2, #8
 80026a0:	189b      	adds	r3, r3, r2
 80026a2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80026a4:	794a      	ldrb	r2, [r1, #5]
 80026a6:	790b      	ldrb	r3, [r1, #4]
 80026a8:	0212      	lsls	r2, r2, #8
 80026aa:	189b      	adds	r3, r3, r2
 80026ac:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80026ae:	79ca      	ldrb	r2, [r1, #7]
 80026b0:	798b      	ldrb	r3, [r1, #6]
 80026b2:	0212      	lsls	r2, r2, #8
 80026b4:	189b      	adds	r3, r3, r2
 80026b6:	80c3      	strh	r3, [r0, #6]
}
 80026b8:	4770      	bx	lr

080026ba <USBD_CtlError>:
{
 80026ba:	b510      	push	{r4, lr}
 80026bc:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	f000 fa74 	bl	8002bac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80026c4:	2100      	movs	r1, #0
 80026c6:	0020      	movs	r0, r4
 80026c8:	f000 fa70 	bl	8002bac <USBD_LL_StallEP>
}
 80026cc:	bd10      	pop	{r4, pc}

080026ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80026ce:	2300      	movs	r3, #0
 80026d0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80026d2:	4298      	cmp	r0, r3
 80026d4:	d101      	bne.n	80026da <USBD_GetString+0xc>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0U;
    }
  }
}
 80026d6:	bd30      	pop	{r4, r5, pc}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 80026d8:	002b      	movs	r3, r5
 80026da:	5cc4      	ldrb	r4, [r0, r3]
 80026dc:	1c5d      	adds	r5, r3, #1
 80026de:	2c00      	cmp	r4, #0
 80026e0:	d1fa      	bne.n	80026d8 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80026ea:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80026ec:	2303      	movs	r3, #3
 80026ee:	704b      	strb	r3, [r1, #1]
 80026f0:	3b01      	subs	r3, #1
    while (*desc != '\0')
 80026f2:	7805      	ldrb	r5, [r0, #0]
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	d0ee      	beq.n	80026d6 <USBD_GetString+0x8>
      unicode[idx++] = *desc++;
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	54cd      	strb	r5, [r1, r3]
 80026fc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80026fe:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8002700:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8002702:	b2db      	uxtb	r3, r3
 8002704:	548c      	strb	r4, [r1, r2]
 8002706:	e7f4      	b.n	80026f2 <USBD_GetString+0x24>

08002708 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8002708:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800270a:	229b      	movs	r2, #155	; 0x9b
{
 800270c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800270e:	2402      	movs	r4, #2
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002714:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8002716:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8002718:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800271a:	2100      	movs	r1, #0
 800271c:	f000 fa88 	bl	8002c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002720:	2000      	movs	r0, #0
 8002722:	bd10      	pop	{r4, pc}

08002724 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8002724:	b510      	push	{r4, lr}
 8002726:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8002728:	000a      	movs	r2, r1
 800272a:	2100      	movs	r1, #0
 800272c:	f000 fa80 	bl	8002c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002730:	2000      	movs	r0, #0
 8002732:	bd10      	pop	{r4, pc}

08002734 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8002734:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8002736:	229b      	movs	r2, #155	; 0x9b
{
 8002738:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800273a:	2403      	movs	r4, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8002740:	0002      	movs	r2, r0
 8002742:	32fc      	adds	r2, #252	; 0xfc
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
  pdev->ep_out[0].rem_length   = len;
 8002746:	6513      	str	r3, [r2, #80]	; 0x50

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8002748:	000a      	movs	r2, r1
 800274a:	2100      	movs	r1, #0
 800274c:	f000 fa80 	bl	8002c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002750:	2000      	movs	r0, #0
 8002752:	bd10      	pop	{r4, pc}

08002754 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8002754:	b510      	push	{r4, lr}
 8002756:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8002758:	000a      	movs	r2, r1
 800275a:	2100      	movs	r1, #0
 800275c:	f000 fa78 	bl	8002c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002760:	2000      	movs	r0, #0
 8002762:	bd10      	pop	{r4, pc}

08002764 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002764:	239b      	movs	r3, #155	; 0x9b
 8002766:	2204      	movs	r2, #4
 8002768:	009b      	lsls	r3, r3, #2
{
 800276a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800276c:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800276e:	2300      	movs	r3, #0
 8002770:	001a      	movs	r2, r3
 8002772:	0019      	movs	r1, r3
 8002774:	f000 fa5c 	bl	8002c30 <USBD_LL_Transmit>

  return USBD_OK;
}
 8002778:	2000      	movs	r0, #0
 800277a:	bd10      	pop	{r4, pc}

0800277c <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800277c:	239b      	movs	r3, #155	; 0x9b
 800277e:	2205      	movs	r2, #5
 8002780:	009b      	lsls	r3, r3, #2
{
 8002782:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8002784:	50c2      	str	r2, [r0, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8002786:	2300      	movs	r3, #0
 8002788:	001a      	movs	r2, r3
 800278a:	0019      	movs	r1, r3
 800278c:	f000 fa60 	bl	8002c50 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8002790:	2000      	movs	r0, #0
 8002792:	bd10      	pop	{r4, pc}

08002794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002794:	b530      	push	{r4, r5, lr}
 8002796:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002798:	2238      	movs	r2, #56	; 0x38
 800279a:	2100      	movs	r1, #0
 800279c:	a80e      	add	r0, sp, #56	; 0x38
 800279e:	f000 fb15 	bl	8002dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a2:	2214      	movs	r2, #20
 80027a4:	2100      	movs	r1, #0
 80027a6:	4668      	mov	r0, sp
 80027a8:	f000 fb10 	bl	8002dcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ac:	2224      	movs	r2, #36	; 0x24
 80027ae:	2100      	movs	r1, #0
 80027b0:	a805      	add	r0, sp, #20
 80027b2:	f000 fb0b 	bl	8002dcc <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b6:	4914      	ldr	r1, [pc, #80]	; (8002808 <SystemClock_Config+0x74>)
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <SystemClock_Config+0x78>)
 80027ba:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027bc:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027be:	401a      	ands	r2, r3
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80027c8:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ca:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80027cc:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ce:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027d0:	3b12      	subs	r3, #18
 80027d2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d4:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80027d6:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027d8:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027da:	f7fe fac1 	bl	8000d60 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027de:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027e0:	0021      	movs	r1, r4
 80027e2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027e6:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ea:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ec:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027ee:	f7fe fd3b 	bl	8001268 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027f2:	2340      	movs	r3, #64	; 0x40
 80027f4:	9305      	str	r3, [sp, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80027f6:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f8:	a805      	add	r0, sp, #20
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80027fa:	04db      	lsls	r3, r3, #19
 80027fc:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fe:	f7fe fdeb 	bl	80013d8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002802:	b01d      	add	sp, #116	; 0x74
 8002804:	bd30      	pop	{r4, r5, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	40007000 	.word	0x40007000
 800280c:	ffffe7ff 	.word	0xffffe7ff

08002810 <main>:
{
 8002810:	b510      	push	{r4, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2401      	movs	r4, #1
{
 8002814:	b088      	sub	sp, #32
  HAL_Init();
 8002816:	f7fd fd2f 	bl	8000278 <HAL_Init>
  SystemClock_Config();
 800281a:	f7ff ffbb 	bl	8002794 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281e:	2214      	movs	r2, #20
 8002820:	2100      	movs	r1, #0
 8002822:	a803      	add	r0, sp, #12
 8002824:	f000 fad2 	bl	8002dcc <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <main+0x5c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800282c:	4810      	ldr	r0, [pc, #64]	; (8002870 <main+0x60>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	4322      	orrs	r2, r4
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
 8002834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002836:	4022      	ands	r2, r4
 8002838:	9201      	str	r2, [sp, #4]
 800283a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	430a      	orrs	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	400b      	ands	r3, r1
 8002848:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800284a:	311e      	adds	r1, #30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800284e:	f7fd fe3f 	bl	80004d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002852:	2320      	movs	r3, #32
 8002854:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	a903      	add	r1, sp, #12
 800285a:	4805      	ldr	r0, [pc, #20]	; (8002870 <main+0x60>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002860:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	f7fd fd7f 	bl	8000364 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002866:	f000 f853 	bl	8002910 <MX_USB_DEVICE_Init>
 800286a:	e7fe      	b.n	800286a <main+0x5a>
 800286c:	40021000 	.word	0x40021000
 8002870:	50000400 	.word	0x50000400

08002874 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002874:	4770      	bx	lr
	...

08002878 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002878:	2201      	movs	r2, #1
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_MspInit+0x18>)
 800287c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002886:	0552      	lsls	r2, r2, #21
 8002888:	430a      	orrs	r2, r1
 800288a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288c:	4770      	bx	lr
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000

08002894 <NMI_Handler>:
 8002894:	4770      	bx	lr

08002896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002896:	e7fe      	b.n	8002896 <HardFault_Handler>

08002898 <SVC_Handler>:
 8002898:	4770      	bx	lr

0800289a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289a:	4770      	bx	lr

0800289c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800289c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800289e:	f7fd fcff 	bl	80002a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80028a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80028a6:	4802      	ldr	r0, [pc, #8]	; (80028b0 <USB_IRQHandler+0xc>)
 80028a8:	f7fd ff44 	bl	8000734 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	20000e74 	.word	0x20000e74

080028b4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80028b4:	2280      	movs	r2, #128	; 0x80
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <SystemInit+0x44>)
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	490e      	ldr	r1, [pc, #56]	; (80028fc <SystemInit+0x48>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <SystemInit+0x4c>)
 80028cc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80028ce:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80028d0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	438a      	bics	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <SystemInit+0x50>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4909      	ldr	r1, [pc, #36]	; (8002908 <SystemInit+0x54>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <SystemInit+0x58>)
 80028f0:	0512      	lsls	r2, r2, #20
 80028f2:	609a      	str	r2, [r3, #8]
#endif
}
 80028f4:	4770      	bx	lr
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	88ff400c 	.word	0x88ff400c
 8002900:	fef6fff6 	.word	0xfef6fff6
 8002904:	fffbffff 	.word	0xfffbffff
 8002908:	ff02ffff 	.word	0xff02ffff
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002910:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8002912:	4c09      	ldr	r4, [pc, #36]	; (8002938 <MX_USB_DEVICE_Init+0x28>)
 8002914:	2200      	movs	r2, #0
 8002916:	4909      	ldr	r1, [pc, #36]	; (800293c <MX_USB_DEVICE_Init+0x2c>)
 8002918:	0020      	movs	r0, r4
 800291a:	f7ff fb57 	bl	8001fcc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <MX_USB_DEVICE_Init+0x30>)
 8002920:	0020      	movs	r0, r4
 8002922:	f7ff fb6d 	bl	8002000 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8002926:	4907      	ldr	r1, [pc, #28]	; (8002944 <MX_USB_DEVICE_Init+0x34>)
 8002928:	0020      	movs	r0, r4
 800292a:	f7ff fafe 	bl	8001f2a <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800292e:	0020      	movs	r0, r4
 8002930:	f7ff fb6f 	bl	8002012 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002934:	bd10      	pop	{r4, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000408 	.word	0x20000408
 800293c:	20000190 	.word	0x20000190
 8002940:	20000000 	.word	0x20000000
 8002944:	20000114 	.word	0x20000114

08002948 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8002948:	2000      	movs	r0, #0
 800294a:	4770      	bx	lr

0800294c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800294c:	2000      	movs	r0, #0
 800294e:	4770      	bx	lr

08002950 <CDC_Init_FS>:
{
 8002950:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8002952:	4c06      	ldr	r4, [pc, #24]	; (800296c <CDC_Init_FS+0x1c>)
 8002954:	2200      	movs	r2, #0
 8002956:	4906      	ldr	r1, [pc, #24]	; (8002970 <CDC_Init_FS+0x20>)
 8002958:	0020      	movs	r0, r4
 800295a:	f7ff faef 	bl	8001f3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800295e:	4905      	ldr	r1, [pc, #20]	; (8002974 <CDC_Init_FS+0x24>)
 8002960:	0020      	movs	r0, r4
 8002962:	f7ff faf6 	bl	8001f52 <USBD_CDC_SetRxBuffer>
}
 8002966:	2000      	movs	r0, #0
 8002968:	bd10      	pop	{r4, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000408 	.word	0x20000408
 8002970:	20000a8c 	.word	0x20000a8c
 8002974:	200006a4 	.word	0x200006a4

08002978 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002978:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800297a:	21a4      	movs	r1, #164	; 0xa4
{
 800297c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800297e:	4c08      	ldr	r4, [pc, #32]	; (80029a0 <CDC_Transmit_FS+0x28>)
 8002980:	0089      	lsls	r1, r1, #2
{
 8002982:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002984:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8002986:	397c      	subs	r1, #124	; 0x7c
 8002988:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 800298a:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 800298c:	2900      	cmp	r1, #0
 800298e:	d106      	bne.n	800299e <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8002990:	0019      	movs	r1, r3
 8002992:	0020      	movs	r0, r4
 8002994:	f7ff fad2 	bl	8001f3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002998:	0020      	movs	r0, r4
 800299a:	f7ff fae1 	bl	8001f60 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 800299e:	bd10      	pop	{r4, pc}
 80029a0:	20000408 	.word	0x20000408

080029a4 <CDC_Receive_FS>:
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	0004      	movs	r4, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80029a8:	4d0b      	ldr	r5, [pc, #44]	; (80029d8 <CDC_Receive_FS+0x34>)
 80029aa:	0001      	movs	r1, r0
 80029ac:	0028      	movs	r0, r5
 80029ae:	f7ff fad0 	bl	8001f52 <USBD_CDC_SetRxBuffer>
  if(Buf[0] == '1') {
 80029b2:	7823      	ldrb	r3, [r4, #0]
 80029b4:	2b31      	cmp	r3, #49	; 0x31
 80029b6:	d103      	bne.n	80029c0 <CDC_Receive_FS+0x1c>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80029b8:	2120      	movs	r1, #32
 80029ba:	4808      	ldr	r0, [pc, #32]	; (80029dc <CDC_Receive_FS+0x38>)
 80029bc:	f7fd fd8e 	bl	80004dc <HAL_GPIO_TogglePin>
  if(Buf[0] == '0') {
 80029c0:	7823      	ldrb	r3, [r4, #0]
 80029c2:	2b30      	cmp	r3, #48	; 0x30
 80029c4:	d103      	bne.n	80029ce <CDC_Receive_FS+0x2a>
	  CDC_Transmit_FS(buffer1, sizeof(buffer1));
 80029c6:	216c      	movs	r1, #108	; 0x6c
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <CDC_Receive_FS+0x3c>)
 80029ca:	f7ff ffd5 	bl	8002978 <CDC_Transmit_FS>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7ff fae2 	bl	8001f98 <USBD_CDC_ReceivePacket>
}
 80029d4:	2000      	movs	r0, #0
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	20000408 	.word	0x20000408
 80029dc:	50000400 	.word	0x50000400
 80029e0:	20000124 	.word	0x20000124

080029e4 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_PCD_MspInit+0x28>)
 80029e6:	6802      	ldr	r2, [r0, #0]
{
 80029e8:	b510      	push	{r4, lr}
  if(pcdHandle->Instance==USB)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10d      	bne.n	8002a0a <HAL_PCD_MspInit+0x26>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_PCD_MspInit+0x2c>)
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80029f6:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	0011      	movs	r1, r2
 8002a00:	f7fd fc5c 	bl	80002bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8002a04:	201f      	movs	r0, #31
 8002a06:	f7fd fc89 	bl	800031c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002a0a:	bd10      	pop	{r4, pc}
 8002a0c:	40005c00 	.word	0x40005c00
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a14:	238c      	movs	r3, #140	; 0x8c
{
 8002a16:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	18c1      	adds	r1, r0, r3
 8002a1c:	3340      	adds	r3, #64	; 0x40
 8002a1e:	58c0      	ldr	r0, [r0, r3]
 8002a20:	f7ff fb12 	bl	8002048 <USBD_LL_SetupStage>
}
 8002a24:	bd10      	pop	{r4, pc}

08002a26 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a26:	014b      	lsls	r3, r1, #5
 8002a28:	18c3      	adds	r3, r0, r3
 8002a2a:	33fc      	adds	r3, #252	; 0xfc
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2e:	239c      	movs	r3, #156	; 0x9c
{
 8002a30:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	58c0      	ldr	r0, [r0, r3]
 8002a36:	f7ff fb39 	bl	80020ac <USBD_LL_DataOutStage>
}
 8002a3a:	bd10      	pop	{r4, pc}

08002a3c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002a3c:	014b      	lsls	r3, r1, #5
 8002a3e:	18c3      	adds	r3, r0, r3
 8002a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a42:	239c      	movs	r3, #156	; 0x9c
{
 8002a44:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	58c0      	ldr	r0, [r0, r3]
 8002a4a:	f7ff fb73 	bl	8002134 <USBD_LL_DataInStage>
}
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002a50:	239c      	movs	r3, #156	; 0x9c
{
 8002a52:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	58c0      	ldr	r0, [r0, r3]
 8002a58:	f7ff fc10 	bl	800227c <USBD_LL_SOF>
}
 8002a5c:	bd10      	pop	{r4, pc}

08002a5e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002a5e:	b570      	push	{r4, r5, r6, lr}
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002a60:	249c      	movs	r4, #156	; 0x9c
{ 
 8002a62:	0005      	movs	r5, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002a64:	00a4      	lsls	r4, r4, #2
 8002a66:	2101      	movs	r1, #1
 8002a68:	5900      	ldr	r0, [r0, r4]
 8002a6a:	f7ff fbf0 	bl	800224e <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a6e:	5928      	ldr	r0, [r5, r4]
 8002a70:	f7ff fbc3 	bl	80021fa <USBD_LL_Reset>
}
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a78 <HAL_PCD_SuspendCallback>:
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002a78:	239c      	movs	r3, #156	; 0x9c
{
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	58c0      	ldr	r0, [r0, r3]
 8002a82:	f7ff fbe7 	bl	8002254 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002a86:	69a3      	ldr	r3, [r4, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002a8c:	2306      	movs	r3, #6
 8002a8e:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <HAL_PCD_SuspendCallback+0x20>)
 8002a90:	6911      	ldr	r1, [r2, #16]
 8002a92:	430b      	orrs	r3, r1
 8002a94:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8002a96:	bd10      	pop	{r4, pc}
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <HAL_PCD_ResumeCallback>:
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8002a9c:	6983      	ldr	r3, [r0, #24]
{
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002aa6:	2106      	movs	r1, #6
 8002aa8:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <HAL_PCD_ResumeCallback+0x24>)
 8002aaa:	6913      	ldr	r3, [r2, #16]
 8002aac:	438b      	bics	r3, r1
 8002aae:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8002ab0:	f7ff fe70 	bl	8002794 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002ab4:	239c      	movs	r3, #156	; 0x9c
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	58e0      	ldr	r0, [r4, r3]
 8002aba:	f7ff fbd7 	bl	800226c <USBD_LL_Resume>
}
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8002ac4:	239c      	movs	r3, #156	; 0x9c
{
 8002ac6:	b570      	push	{r4, r5, r6, lr}
 8002ac8:	0005      	movs	r5, r0
  hpcd_USB_FS.pData = pdev;
 8002aca:	481d      	ldr	r0, [pc, #116]	; (8002b40 <USBD_LL_Init+0x7c>)
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	50c5      	str	r5, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <USBD_LL_Init+0x80>)
  pdev->pData = &hpcd_USB_FS;
 8002ad2:	24a6      	movs	r4, #166	; 0xa6
  hpcd_USB_FS.Instance = USB;
 8002ad4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ad6:	2308      	movs	r3, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ad8:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002ada:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002adc:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8002ade:	00a4      	lsls	r4, r4, #2
 8002ae0:	5128      	str	r0, [r5, r4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002ae2:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002ae4:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ae6:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ae8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002aea:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002aec:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002aee:	f7fd fcf9 	bl	80004e4 <HAL_PCD_Init>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d001      	beq.n	8002afa <USBD_LL_Init+0x36>
    Error_Handler( );
 8002af6:	f7ff febd 	bl	8002874 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002afa:	2200      	movs	r2, #0
 8002afc:	5928      	ldr	r0, [r5, r4]
 8002afe:	0011      	movs	r1, r2
 8002b00:	2318      	movs	r3, #24
 8002b02:	f7fe f8b5 	bl	8000c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002b06:	5928      	ldr	r0, [r5, r4]
 8002b08:	2358      	movs	r3, #88	; 0x58
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	f7fe f8af 	bl	8000c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002b12:	5928      	ldr	r0, [r5, r4]
 8002b14:	23c0      	movs	r3, #192	; 0xc0
 8002b16:	2200      	movs	r2, #0
 8002b18:	2181      	movs	r1, #129	; 0x81
 8002b1a:	f7fe f8a9 	bl	8000c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002b1e:	2388      	movs	r3, #136	; 0x88
 8002b20:	5928      	ldr	r0, [r5, r4]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2200      	movs	r2, #0
 8002b26:	2101      	movs	r1, #1
 8002b28:	f7fe f8a2 	bl	8000c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	5928      	ldr	r0, [r5, r4]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2200      	movs	r2, #0
 8002b34:	2182      	movs	r1, #130	; 0x82
 8002b36:	f7fe f89b 	bl	8000c70 <HAL_PCDEx_PMAConfig>
}
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000e74 	.word	0x20000e74
 8002b44:	40005c00 	.word	0x40005c00

08002b48 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8002b48:	23a6      	movs	r3, #166	; 0xa6
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	58c0      	ldr	r0, [r0, r3]
{
 8002b4e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8002b50:	f7fd fd34 	bl	80005bc <HAL_PCD_Start>
 8002b54:	2302      	movs	r3, #2
 8002b56:	2803      	cmp	r0, #3
 8002b58:	d801      	bhi.n	8002b5e <USBD_LL_Start+0x16>
 8002b5a:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <USBD_LL_Start+0x1c>)
 8002b5c:	5c1b      	ldrb	r3, [r3, r0]
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	08002e0d 	.word	0x08002e0d

08002b68 <USBD_LL_OpenEP>:
{
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002b6e:	0023      	movs	r3, r4
 8002b70:	24a6      	movs	r4, #166	; 0xa6
 8002b72:	00a4      	lsls	r4, r4, #2
 8002b74:	5900      	ldr	r0, [r0, r4]
 8002b76:	f7fd fd46 	bl	8000606 <HAL_PCD_EP_Open>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	2803      	cmp	r0, #3
 8002b7e:	d801      	bhi.n	8002b84 <USBD_LL_OpenEP+0x1c>
 8002b80:	4b01      	ldr	r3, [pc, #4]	; (8002b88 <USBD_LL_OpenEP+0x20>)
 8002b82:	5c1b      	ldrb	r3, [r3, r0]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	bd10      	pop	{r4, pc}
 8002b88:	08002e0d 	.word	0x08002e0d

08002b8c <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b8c:	23a6      	movs	r3, #166	; 0xa6
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	58c0      	ldr	r0, [r0, r3]
{
 8002b92:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b94:	f7fd fd6b 	bl	800066e <HAL_PCD_EP_Close>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	2803      	cmp	r0, #3
 8002b9c:	d801      	bhi.n	8002ba2 <USBD_LL_CloseEP+0x16>
 8002b9e:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <USBD_LL_CloseEP+0x1c>)
 8002ba0:	5c1b      	ldrb	r3, [r3, r0]
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	08002e0d 	.word	0x08002e0d

08002bac <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002bac:	23a6      	movs	r3, #166	; 0xa6
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	58c0      	ldr	r0, [r0, r3]
{
 8002bb2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002bb4:	f7fd fff6 	bl	8000ba4 <HAL_PCD_EP_SetStall>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	2803      	cmp	r0, #3
 8002bbc:	d801      	bhi.n	8002bc2 <USBD_LL_StallEP+0x16>
 8002bbe:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <USBD_LL_StallEP+0x1c>)
 8002bc0:	5c1b      	ldrb	r3, [r3, r0]
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	08002e0d 	.word	0x08002e0d

08002bcc <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002bcc:	23a6      	movs	r3, #166	; 0xa6
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	58c0      	ldr	r0, [r0, r3]
{
 8002bd2:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002bd4:	f7fe f81b 	bl	8000c0e <HAL_PCD_EP_ClrStall>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	2803      	cmp	r0, #3
 8002bdc:	d801      	bhi.n	8002be2 <USBD_LL_ClearStallEP+0x16>
 8002bde:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <USBD_LL_ClearStallEP+0x1c>)
 8002be0:	5c1b      	ldrb	r3, [r3, r0]
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	bd10      	pop	{r4, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	08002e0d 	.word	0x08002e0d

08002bec <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002bec:	23a6      	movs	r3, #166	; 0xa6
  if((ep_addr & 0x80) == 0x80)
 8002bee:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	da06      	bge.n	8002c06 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002bf8:	227f      	movs	r2, #127	; 0x7f
 8002bfa:	4011      	ands	r1, r2
 8002bfc:	0149      	lsls	r1, r1, #5
 8002bfe:	185b      	adds	r3, r3, r1
 8002c00:	332a      	adds	r3, #42	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c02:	7818      	ldrb	r0, [r3, #0]
}
 8002c04:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002c06:	0149      	lsls	r1, r1, #5
 8002c08:	185b      	adds	r3, r3, r1
 8002c0a:	332b      	adds	r3, #43	; 0x2b
 8002c0c:	33ff      	adds	r3, #255	; 0xff
 8002c0e:	e7f8      	b.n	8002c02 <USBD_LL_IsStallEP+0x16>

08002c10 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c10:	23a6      	movs	r3, #166	; 0xa6
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	58c0      	ldr	r0, [r0, r3]
{
 8002c16:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002c18:	f7fd fce3 	bl	80005e2 <HAL_PCD_SetAddress>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	2803      	cmp	r0, #3
 8002c20:	d801      	bhi.n	8002c26 <USBD_LL_SetUSBAddress+0x16>
 8002c22:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <USBD_LL_SetUSBAddress+0x1c>)
 8002c24:	5c1b      	ldrb	r3, [r3, r0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	08002e0d 	.word	0x08002e0d

08002c30 <USBD_LL_Transmit>:
{
 8002c30:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002c32:	24a6      	movs	r4, #166	; 0xa6
 8002c34:	00a4      	lsls	r4, r4, #2
 8002c36:	5900      	ldr	r0, [r0, r4]
 8002c38:	f7fd fd65 	bl	8000706 <HAL_PCD_EP_Transmit>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	2803      	cmp	r0, #3
 8002c40:	d801      	bhi.n	8002c46 <USBD_LL_Transmit+0x16>
 8002c42:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <USBD_LL_Transmit+0x1c>)
 8002c44:	5c1b      	ldrb	r3, [r3, r0]
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	08002e0d 	.word	0x08002e0d

08002c50 <USBD_LL_PrepareReceive>:
{
 8002c50:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002c52:	24a6      	movs	r4, #166	; 0xa6
 8002c54:	00a4      	lsls	r4, r4, #2
 8002c56:	5900      	ldr	r0, [r0, r4]
 8002c58:	f7fd fd33 	bl	80006c2 <HAL_PCD_EP_Receive>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	2803      	cmp	r0, #3
 8002c60:	d801      	bhi.n	8002c66 <USBD_LL_PrepareReceive+0x16>
 8002c62:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <USBD_LL_PrepareReceive+0x1c>)
 8002c64:	5c1b      	ldrb	r3, [r3, r0]
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	08002e0d 	.word	0x08002e0d

08002c70 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002c70:	23a6      	movs	r3, #166	; 0xa6
{
 8002c72:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	58c0      	ldr	r0, [r0, r3]
 8002c78:	f7fd fd3e 	bl	80006f8 <HAL_PCD_EP_GetRxCount>
}
 8002c7c:	bd10      	pop	{r4, pc}
	...

08002c80 <USBD_static_malloc>:
}
 8002c80:	4800      	ldr	r0, [pc, #0]	; (8002c84 <USBD_static_malloc+0x4>)
 8002c82:	4770      	bx	lr
 8002c84:	200001e4 	.word	0x200001e4

08002c88 <USBD_static_free>:
}
 8002c88:	4770      	bx	lr
	...

08002c8c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c8c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002c8e:	4801      	ldr	r0, [pc, #4]	; (8002c94 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c90:	800b      	strh	r3, [r1, #0]
}
 8002c92:	4770      	bx	lr
 8002c94:	200001ac 	.word	0x200001ac

08002c98 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002c98:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002c9a:	4801      	ldr	r0, [pc, #4]	; (8002ca0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002c9c:	800b      	strh	r3, [r1, #0]
}
 8002c9e:	4770      	bx	lr
 8002ca0:	200001c0 	.word	0x200001c0

08002ca4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002ca4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002ca6:	4c04      	ldr	r4, [pc, #16]	; (8002cb8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8002ca8:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002caa:	4804      	ldr	r0, [pc, #16]	; (8002cbc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002cac:	0021      	movs	r1, r4
 8002cae:	f7ff fd0e 	bl	80026ce <USBD_GetString>
  return USBD_StrDesc;
}
 8002cb2:	0020      	movs	r0, r4
 8002cb4:	bd10      	pop	{r4, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	200010e8 	.word	0x200010e8
 8002cbc:	08002e2a 	.word	0x08002e2a

08002cc0 <USBD_FS_ProductStrDescriptor>:
{
 8002cc0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002cc2:	4c04      	ldr	r4, [pc, #16]	; (8002cd4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8002cc4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002cc6:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <USBD_FS_ProductStrDescriptor+0x18>)
 8002cc8:	0021      	movs	r1, r4
 8002cca:	f7ff fd00 	bl	80026ce <USBD_GetString>
}
 8002cce:	0020      	movs	r0, r4
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	200010e8 	.word	0x200010e8
 8002cd8:	08002e3d 	.word	0x08002e3d

08002cdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002cdc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002cde:	4c04      	ldr	r4, [pc, #16]	; (8002cf0 <USBD_FS_SerialStrDescriptor+0x14>)
{
 8002ce0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <USBD_FS_SerialStrDescriptor+0x18>)
 8002ce4:	0021      	movs	r1, r4
 8002ce6:	f7ff fcf2 	bl	80026ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002cea:	0020      	movs	r0, r4
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	200010e8 	.word	0x200010e8
 8002cf4:	08002e53 	.word	0x08002e53

08002cf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002cf8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002cfa:	4c04      	ldr	r4, [pc, #16]	; (8002d0c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8002cfc:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002cfe:	4804      	ldr	r0, [pc, #16]	; (8002d10 <USBD_FS_ConfigStrDescriptor+0x18>)
 8002d00:	0021      	movs	r1, r4
 8002d02:	f7ff fce4 	bl	80026ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002d06:	0020      	movs	r0, r4
 8002d08:	bd10      	pop	{r4, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200010e8 	.word	0x200010e8
 8002d10:	08002e11 	.word	0x08002e11

08002d14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002d14:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002d16:	4c04      	ldr	r4, [pc, #16]	; (8002d28 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8002d18:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002d1a:	4804      	ldr	r0, [pc, #16]	; (8002d2c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002d1c:	0021      	movs	r1, r4
 8002d1e:	f7ff fcd6 	bl	80026ce <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002d22:	0020      	movs	r0, r4
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200010e8 	.word	0x200010e8
 8002d2c:	08002e1c 	.word	0x08002e1c

08002d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d36:	e003      	b.n	8002d40 <LoopCopyDataInit>

08002d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d3e:	3104      	adds	r1, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d48:	d3f6      	bcc.n	8002d38 <CopyDataInit>
  ldr  r2, =_sbss
 8002d4a:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002d4c:	e002      	b.n	8002d54 <LoopFillZerobss>

08002d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002d4e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002d50:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d52:	3204      	adds	r2, #4

08002d54 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <LoopForever+0x16>)
  cmp  r2, r3
 8002d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d58:	d3f9      	bcc.n	8002d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d5a:	f7ff fdab 	bl	80028b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d5e:	f000 f811 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d62:	f7ff fd55 	bl	8002810 <main>

08002d66 <LoopForever>:

LoopForever:
    b LoopForever
 8002d66:	e7fe      	b.n	8002d66 <LoopForever>
  ldr   r0, =_estack
 8002d68:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002d6c:	08002e68 	.word	0x08002e68
  ldr  r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d74:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8002d78:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8002d7c:	200012e8 	.word	0x200012e8

08002d80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d80:	e7fe      	b.n	8002d80 <ADC1_COMP_IRQHandler>
	...

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	2600      	movs	r6, #0
 8002d88:	4d0c      	ldr	r5, [pc, #48]	; (8002dbc <__libc_init_array+0x38>)
 8002d8a:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <__libc_init_array+0x3c>)
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	2600      	movs	r6, #0
 8002d96:	f000 f821 	bl	8002ddc <_init>
 8002d9a:	4d0a      	ldr	r5, [pc, #40]	; (8002dc4 <__libc_init_array+0x40>)
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <__libc_init_array+0x44>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	00b3      	lsls	r3, r6, #2
 8002daa:	58eb      	ldr	r3, [r5, r3]
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	00b3      	lsls	r3, r6, #2
 8002db4:	58eb      	ldr	r3, [r5, r3]
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08002e60 	.word	0x08002e60
 8002dc0:	08002e60 	.word	0x08002e60
 8002dc4:	08002e60 	.word	0x08002e60
 8002dc8:	08002e64 	.word	0x08002e64

08002dcc <memset>:
 8002dcc:	0003      	movs	r3, r0
 8002dce:	1882      	adds	r2, r0, r2
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <memset+0xa>
 8002dd4:	4770      	bx	lr
 8002dd6:	7019      	strb	r1, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	e7f9      	b.n	8002dd0 <memset+0x4>

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
